(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
var App;

console.log('loading app');

module.exports = App = {};

if (typeof window !== "undefined" && window !== null) {
  window.App = App;
} else {
  global.App = App;
}

console.log('loading module');

_.merge(App, require('./models'));

App.JSX = require('./jsx/jsx');

App.Util = require('./util');

App.View = require('./views');

App.Lang = require('./lang');

App.Path = require('./path');

App.Constant = require('./constant');

_.merge(App, require('./contexts'));

console.log('loaded app');

App.start = function(node) {
  var router;
  router = new Arda.Router(Arda.DefaultLayout, node);
  return router.pushContext(App.MainContext);
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./constant":2,"./contexts":3,"./jsx/jsx":5,"./lang":7,"./models":8,"./path":9,"./util":10,"./views":11}],2:[function(require,module,exports){
var Constant;

module.exports = Constant = {
  classes: {
    challengeResultBox: 'col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2',
    textInput: 'form-control size-h3',
    submitButton: 'btn btn-lg btn-success size-h4 wide',
    blueButton: 'btn btn-md btn-primary size-h4',
    greenButton: 'btn btn-md btn-success size-h4',
    indexTable: 'table table-striped table-condensed table-bordered',
    editButton: 'btn btn-md btn-primary size-h6',
    smallBox: 'col-sm-6 col-sm-offset-3 col-md-4 col-md-offset-4',
    workbookChallengeBox: 'col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2',
    questionBox: 'col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2',
    join: function(base, added) {
      return [Constant.classes[base], added].join(' ');
    }
  },
  render: {
    levelLabel: function(value) {
      return _.find(Constant.levels, (function(_this) {
        return function(obj) {
          return obj.value === value;
        };
      })(this)).label;
    },
    evalType: function(value) {
      return _.find(Constant.evalTypes, (function(_this) {
        return function(obj) {
          return obj.value === value;
        };
      })(this)).label;
    },
    answerType: function(value) {
      return _.find(Constant.answerTypes, (function(_this) {
        return function(obj) {
          return obj.value === value;
        };
      })(this)).label;
    }
  },
  swal: {
    "delete": {
      title: "削除します",
      text: "この処理は取り消すことができません",
      type: "warning",
      showCancelButton: true,
      confirmButtonColor: "#e51c23",
      confirmButtonText: "削除する",
      closeOnConfirm: true,
      cancelButtonText: 'キャンセル',
      allowOutsideClick: true
    }
  },
  codeMirror: {
    configuration: {
      lineNumbers: true,
      mode: "xml",
      htmlMode: true,
      lineWrapping: true
    }
  }
};


},{}],3:[function(require,module,exports){
var Contexts;

module.exports = Contexts = {};

Contexts.MainContext = require('./main-context');


},{"./main-context":4}],4:[function(require,module,exports){
var MainContext, fitstHistroy, isCrossDomain, storedHistory,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = MainContext = (function(superClass) {
  var _feature, _history, _now;

  extend(MainContext, superClass);

  function MainContext() {
    this.forward = bind(this.forward, this);
    this.backward = bind(this.backward, this);
    this.replaceScene = bind(this.replaceScene, this);
    return MainContext.__super__.constructor.apply(this, arguments);
  }

  _history = [];

  _feature = [];

  _now = 0;

  MainContext.prototype.component = App.View.Qqa;

  MainContext.prototype.initState = function(props) {
    return props;
  };

  MainContext.prototype.expandComponentProps = function(props, state) {
    return props;
  };

  MainContext.prototype.stripPath = function(path) {
    return (path || location.href).replace(/.+?:\/\/(.+?)\//, '/');
  };

  MainContext.prototype.detectComponent = function(path) {
    var detector;
    detector = this.stripPath(path) || '';
    switch (false) {
      case detector.match(/^\/accounts\/new/) == null:
        return App.AccountContext;
      case detector.match(/^\/accounts\/.+\/edit/) == null:
        return App.AccountContext;
      case detector.match(/^\/accounts.*/) == null:
        return App.AccountIndexPageContext;
      case detector.match(/^\/workbooks\/new/) == null:
        return App.WorkbookEditContext;
      case detector.match(/^\/workbooks$/) == null:
      case detector.match(/^\/workbooks\/index\/.*/) == null:
        return App.WorkbookIndexContext;
      case detector.match(/^\/workbooks\/.+\/question\/new/) == null:
        return App.QuestionEditContext;
      case detector.match(/^\/workbooks\/.+\/selectors\/.+/) == null:
        return App.QuestionEditContext;
      case detector.match(/^\/workbooks\/.+\/edit/) == null:
        return App.WorkbookEditContext;
      case detector.match(/^\/workbooks\/.+/) == null:
        return App.WorkbookContext;
      case detector.match(/^\/workbooks\/.+/) == null:
        return App.WorkbookContext;
      case detector.match(/^\/challenges\/(.+)\/review/) == null:
        return {
          challenge_key: RegExp.$1,
          component: App.ChallengeReviewContext
        };
      case detector.match(/^\/challenges\/(.+)\/([0-9]+)/) == null:
        return {
          challenge_key: RegExp.$1,
          index: RegExp.$2,
          component: App.ChallengeQuestionContext
        };
      case detector.match(/^\/challenges\/(.+)/) == null:
        return {
          challenge_key: RegExp.$1,
          component: App.ChallengeResultContext
        };
      case detector !== '/':
        return App.PortalPageContext;
    }
  };

  MainContext.prototype.replaceScene = function(body, header, path, historize) {
    var component, params, passed, passingBody, result;
    if (historize == null) {
      historize = true;
    }
    component = _.isFunction(result = this.detectComponent(path)) ? (params = {}, result) : (params = result, result.component);
    console.log('component', component, result);
    if (!component) {
      return;
    }
    passingBody = body || this.props.config.body;
    passingBody.params = params;
    return (this.router.history.length ? this.router.replaceContext(component, passed = {
      body: passingBody,
      header: header || this.props.config.header,
      root: this
    }) : this.router.pushContext(component, passed = {
      body: passingBody,
      header: header || this.props.config.header,
      root: this
    })).then((function(_this) {
      return function() {
        if (historize) {
          _this.pushHistory(body, header, path);
        }
        return window.scrollTo(null, 0);
      };
    })(this));
  };

  MainContext.prototype.backward = function(e) {
    return this.emit('scene:change', {
      path: location.href,
      unhistorize: true
    });
  };

  MainContext.prototype.forward = function(e) {
    return this.emit('scene:change', {
      path: location.href,
      unhistorize: true
    });
  };

  MainContext.prototype.pickHeaderParameters = function(xhr) {
    var required;
    required = ['Total-Pages', 'Per-Page', 'Current-Page', 'Paginate-Path', 'Access-Level'];
    return _.reduce(required, function(a, req) {
      console.log(req);
      a[req] = xhr.getResponseHeader(req);
      return a;
    }, {});
  };

  MainContext.prototype.pushHistory = function(body, header, path) {
    var fitstHistroy;
    if (fitstHistroy) {
      fitstHistroy = false;
      return;
    }
    _history = _history.slice(0, +_now + 1 || 9e9);
    _now = _history.length;
    _history.push({
      body: body,
      header: header,
      path: path
    });
    return history.pushState({
      position: _history.length - 1
    }, null, path);
  };

  MainContext.prototype.initializeEventWatcher = function() {
    HistoryWard.startBrutally();
    $(window).on(HistoryWard.BACKWARD, this.backward);
    return $(window).on(HistoryWard.FORWARD, this.forward);
  };

  MainContext.prototype.delegate = function(subscribe) {
    MainContext.__super__.delegate.apply(this, arguments);
    subscribe('context:created', function() {
      return this.initializeEventWatcher();
    });
    subscribe('body:inited', (function(_this) {
      return function(router) {
        return _this.router = router;
      };
    })(this));
    subscribe('notify:success', (function(_this) {
      return function(title, message) {
        return notifySuccess(title, message);
      };
    })(this));
    subscribe('notify:fail', (function(_this) {
      return function(title, message) {
        return notifyDanger(title, message);
      };
    })(this));
    subscribe('reload', (function(_this) {
      return function() {
        return _this.update(function(state) {
          return state;
        });
      };
    })(this));
    return subscribe('scene:change', function(link) {
      var data, method, ref;
      ref = link.method != null ? {
        data: {
          _method: link.method
        },
        method: link.method
      } : {
        data: {},
        method: 'get'
      }, data = ref.data, method = ref.method;
      return $.ajax({
        url: link.path + '.json',
        dataType: 'json',
        data: data,
        type: method
      }).success((function(_this) {
        return function(body, _, xhr) {
          return _this.replaceScene(body, _this.pickHeaderParameters(xhr), link.path, !link.unhistorize);
        };
      })(this)).fail(function(data) {
        return console.error('error', link);
      });
    });
  };

  return MainContext;

})(Arda.Context);

storedHistory = [];

fitstHistroy = true;

isCrossDomain = function(url) {
  var e, error, originAnchor, urlAnchor;
  originAnchor = document.createElement("a");
  originAnchor.href = location.href;
  urlAnchor = document.createElement("a");
  try {
    urlAnchor.href = url;
    urlAnchor.href = urlAnchor.href;
    return !urlAnchor.protocol || !urlAnchor.host || (originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host);
  } catch (error) {
    e = error;
    return true;
  }
};


},{}],5:[function(require,module,exports){
var JSX;

module.exports = JSX = {
  Q: {
    qIndex: require('./q/q_index.js')
  }
};


},{"./q/q_index.js":6}],6:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    tags.push(React.createElement("span", {}, "$f(x)$"));
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],7:[function(require,module,exports){
var Lang;

module.exports = Lang = {
  portal: "QQAポータル"
};


},{}],8:[function(require,module,exports){
var Models;

module.exports = Models = {};


},{}],9:[function(require,module,exports){
var Path;

module.exports = Path = {
  portal: '/',
  team: '/team/%{team_key}',
  myTeam: '/teams',
  teams: '/teams/index',
  editMyself: '/accounts/me',
  logout: '/logout',
  createAccount: '/accounts/new',
  accountIndex: '/accounts',
  editAccount: '/accounts/%{account_key}/edit',
  deleteAccount: '/accounts/%{account_key}',
  createWorkbook: '/workbooks/new',
  workbookIndex: '/workbooks',
  showWorkbook: '/workbooks/%{workbook_key}',
  updateEvalType: '/workbooks/%{workbook_key}/eval_type',
  updatePoints: '/workbooks/%{workbook_key}/points',
  showWorkbook: '/workbooks/%{workbook_key}',
  editWorkbook: '/workbooks/%{workbook_key}/edit',
  editWorkbookTitle: '/workbooks/%{workbook_key}/title',
  deleteWorkbook: '/workbooks/%{workbook_key}',
  createQuestion: '/workbooks/%{workbook_key}/question/new',
  editQuestion: '/workbooks/%{workbook_key}/selectors/%{question_key}',
  deleteQuestion: '/workbooks/%{workbook_key}/selectors/%{question_key}/delete',
  sortQuestion: '/workbooks/%{workbook_key}/sort',
  startChallenge: '/challenges/%{workbook_key}/new',
  challengeResult: '/challenges/%{challenge_key}',
  challengeQuestion: '/challenges/%{challenge_key}/%{index}',
  challengeAnswer: '/challenges/%{challenge_key}/%{index}/answer',
  challengeReview: '/challenges/%{challenge_key}/review',
  challengeFinish: '/challenges/%{challenge_key}/finish',
  render: function(path, values) {
    return _.reduce(values, function(a, value, key) {
      return a.replace("%{" + key + "}", value);
    }, Path[path]);
  }
};


},{}],10:[function(require,module,exports){
var Util,
  slice = [].slice;

module.exports = Util = {

  /*
  React.createElementを変形
  
  ce(object)
    object.$cn -> className
    object.$el -> タグ名
    object.$inc -> 末尾引数、あるいは可変長引数として渡される値
    object -> 引数はそのままpropsとして渡される
  
  普通
  
     ce {$el: 'div', $cn: 'short', $inc: 'text'}
  
     <div className="short">
       text
     </div>
  
  入れ子
  
     Item = ReactClass
       render: ->
         ce {$el: 'li', $inc: 'item'}
  
     ce {$el: 'ul', $inc: [Item, Item]}
  
     <ul>
       {Item}
       {Item}
     </ul>
   */
  ce: function(object) {
    var child, children, i, len, results;
    switch (true) {
      case object != null ? object.hasOwnProperty('$el') : void 0:
        object.className = object.$cn;
        children = this.ce(object.$inc);
        if (_.isArray(children)) {
          return React.createElement.apply(React, [object.$el, object].concat(slice.call(children)));
        } else {
          return React.createElement(object.$el, object, children);
        }
        break;
      case _.isArray(object):
        results = [];
        for (i = 0, len = object.length; i < len; i++) {
          child = object[i];
          results.push(this.ce(child));
        }
        return results;
        break;
      case _.isString(object):
        return object;
      case _.isNumber(object):
        return object;
      case _.isObject(object):
        return object;
      default:
        return '';
    }
  }
};


},{}],11:[function(require,module,exports){
var Views;

module.exports = Views = {};

Views.Qqa = require('./qqa');


},{"./qqa":12}],12:[function(require,module,exports){
var Qqa;

module.exports = Qqa = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.Q.qIndex();
  },
  componentDidMount: function() {
    var childRouter;
    console.log('qqa mounted');
    childRouter = new Arda.Router(Arda.DefaultLayout, React.findDOMNode(this.refs.content));
    return this.dispatch('body:inited', childRouter);
  }
});


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
