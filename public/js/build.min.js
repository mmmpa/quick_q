(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
var App;

if (!global) {
  console.log('loading app');
}

module.exports = App = {};

if (typeof window !== "undefined" && window !== null) {
  window.App = App;
}

if (typeof global !== "undefined" && global !== null) {
  global.App = App;
}

if (!global) {
  console.log('loading module');
}

_.merge(App, require('./models'));

App.JSX = require('./jsx/jsx');

App.Util = require('./util');

App.View = require('./views');

App.Lang = require('./lang');

App.Path = require('./path');

App.Constant = require('./constant');

App.BaseContext = require('./contexts/base-context');

_.merge(App, require('./contexts'));

App.start = function(node) {
  var router;
  router = new Arda.Router(Arda.DefaultLayout, node);
  return router.pushContext(App.MainContext);
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./constant":2,"./contexts":5,"./contexts/base-context":3,"./jsx/jsx":15,"./lang":29,"./models":33,"./path":45,"./util":46,"./views":50}],2:[function(require,module,exports){
var Constant;

module.exports = Constant = {
  classes: {
    challengeResultBox: 'col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2',
    textInput: 'form-control size-h3',
    submitButton: 'btn btn-lg btn-success size-h4 wide',
    blueButton: 'btn btn-md btn-primary size-h4',
    greenButton: 'btn btn-md btn-success size-h4',
    indexTable: 'table table-striped table-condensed table-bordered',
    editButton: 'btn btn-md btn-primary size-h6',
    smallBox: 'col-sm-6 col-sm-offset-3 col-md-4 col-md-offset-4',
    workbookChallengeBox: 'col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2',
    questionBox: 'col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2',
    join: function(base, added) {
      return [Constant.classes[base], added].join(' ');
    }
  },
  render: {
    levelLabel: function(value) {
      return _.find(Constant.levels, (function(_this) {
        return function(obj) {
          return obj.value === value;
        };
      })(this)).label;
    },
    evalType: function(value) {
      return _.find(Constant.evalTypes, (function(_this) {
        return function(obj) {
          return obj.value === value;
        };
      })(this)).label;
    },
    answerType: function(value) {
      return _.find(Constant.answerTypes, (function(_this) {
        return function(obj) {
          return obj.value === value;
        };
      })(this)).label;
    }
  },
  swal: {
    "delete": {
      title: "削除します",
      text: "この処理は取り消すことができません",
      type: "warning",
      showCancelButton: true,
      confirmButtonColor: "#e51c23",
      confirmButtonText: "削除する",
      closeOnConfirm: true,
      cancelButtonText: 'キャンセル',
      allowOutsideClick: true
    }
  },
  codeMirror: {
    configuration: {
      lineNumbers: true,
      mode: "xml",
      htmlMode: true,
      lineWrapping: true
    }
  }
};


},{}],3:[function(require,module,exports){
var BaseContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = BaseContext = (function(superClass) {
  extend(BaseContext, superClass);

  function BaseContext() {
    return BaseContext.__super__.constructor.apply(this, arguments);
  }

  BaseContext.prototype.delegate = function(subscribe) {
    BaseContext.__super__.delegate.apply(this, arguments);
    subscribe('context:created', function() {
      return this.root = this.props.root;
    });
    return subscribe('inform:rendered', function() {
      return this.root.emit('inform:rendered');
    });
  };

  BaseContext.prototype.strikeApi = function(linker) {
    return this.root.strikeApi(linker);
  };

  BaseContext.prototype._strippedPath = function() {
    return this.root._strippedPath();
  };

  BaseContext.prototype._choppedPath = function() {
    return this.root._choppedPath();
  };

  return BaseContext;

})(Arda.Context);


},{}],4:[function(require,module,exports){
var BlankContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = BlankContext = (function(superClass) {
  extend(BlankContext, superClass);

  function BlankContext() {
    return BlankContext.__super__.constructor.apply(this, arguments);
  }

  BlankContext.prototype.initState = function(props) {
    return props;
  };

  BlankContext.prototype.component = React.createClass({
    render: function() {
      return React.createElement('div.container', {}, "Now loading " + this.props.name + "...");
    }
  });

  return BlankContext;

})(Arda.Context);


},{}],5:[function(require,module,exports){
var Contexts;

module.exports = Contexts = {};

Contexts.BaseContext = require('./base-context');

Contexts.BlankContext = require('./blank-context');

Contexts.MainContext = require('./main-context');

Contexts.Menu = require('./menu');

Contexts.Notifier = require('./notifier');

Contexts.PortalContext = require('./portal-context');

Contexts.Q = require('./q');


},{"./base-context":3,"./blank-context":4,"./main-context":6,"./menu":8,"./notifier":10,"./portal-context":11,"./q":13}],6:[function(require,module,exports){
var MainContext,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = MainContext = (function(superClass) {
  var _feature, _history, _now;

  extend(MainContext, superClass);

  function MainContext() {
    this._forward = bind(this._forward, this);
    this._backward = bind(this._backward, this);
    return MainContext.__super__.constructor.apply(this, arguments);
  }

  MainContext.prototype.component = React.createClass({
    mixins: [Arda.mixin],
    render: function() {
      return App.JSX.main();
    },
    componentDidMount: function() {
      var routers;
      routers = {
        content: new Arda.Router(Arda.DefaultLayout, React.findDOMNode(this.refs.content)),
        notifier: new Arda.Router(Arda.DefaultLayout, React.findDOMNode(this.refs.notifier)),
        menu: new Arda.Router(Arda.DefaultLayout, React.findDOMNode(this.refs.menu))
      };
      return this.dispatch('display:initialized', routers);
    }
  });

  _history = [];

  _feature = [];

  _now = 0;

  MainContext.prototype.initState = function(props) {
    return props;
  };

  MainContext.prototype.expandComponentProps = function(props, state) {
    return props;
  };

  MainContext.prototype.delegate = function(subscribe) {
    MainContext.__super__.delegate.apply(this, arguments);
    subscribe('context:created', function() {
      this._initializeValuables();
      this._initializeRouter();
      return this._initializeEventWatcher();
    });
    subscribe('display:initialized', this._initializeDisplay);
    subscribe('scene:replace', this._replaceScene);
    subscribe('notify:success', (function(_this) {
      return function(title, message) {};
    })(this));
    subscribe('window:top', function() {
      return window.scrollTo(0, 0);
    });
    subscribe('app:home', function() {
      return this._replaceScene(App.Linker.get(App.Path.portal));
    });
    subscribe('notify:fail', (function(_this) {
      return function(title, message) {};
    })(this));
    subscribe('history:push', (function(_this) {
      return function(linker) {
        history.pushState({}, null, linker.paramsUri);
        return ga('send', 'pageview', linker.paramsUri);
      };
    })(this));
    subscribe('reload', (function(_this) {
      return function() {
        return _this.update(function(state) {
          return state;
        });
      };
    })(this));
    subscribe('question:show', function(id, tags) {
      return this._replaceScene(App.Linker.get(App.Path.q, {
        id: id,
        tags: tags
      }));
    });
    subscribe('inform:rendered', function(q) {
      return MathJax.Hub.Typeset();
    });
    return subscribe('question:tagged:index', function(id) {
      return this._replaceScene(App.Linker.get(App.Path.taggedIndex, {
        tags: _.flatten([id])
      }));
    });
  };

  MainContext.prototype.strikeApi = function(linker, forceReload) {
    return App.ApiStriker.strike(linker, forceReload);
  };

  MainContext.prototype._initializeEventWatcher = function() {
    HistoryWard.startBrutally();
    $(window).on(HistoryWard.BACKWARD, this._backward);
    return $(window).on(HistoryWard.FORWARD, this._forward);
  };

  MainContext.prototype._initializeDisplay = function(routers) {
    this.content = routers.content;
    this.notifier = routers.notifier;
    this.menu = routers.menu;
    this.content.pushContext(App.BlankContext, {
      name: 'Content'
    }).done((function(_this) {
      return function() {
        return _this._initializeScene();
      };
    })(this));
    this.notifier.pushContext(App.BlankContext, {
      name: 'Notifier'
    }).done((function(_this) {
      return function() {
        return _this.notifier.replaceContext(App.Notifier.GodContext, {
          root: _this
        });
      };
    })(this));
    return this.menu.pushContext(App.BlankContext, {
      name: 'Menu'
    }).done((function(_this) {
      return function() {
        return _this.menu.replaceContext(App.Menu.GlobalContext, {
          root: _this
        });
      };
    })(this));
  };

  MainContext.prototype._initializeRouter = function() {
    App.Cassette.root = this;
    this.router = new App.Router();
    this.router.add('/', function(params) {
      return new App.Cassette(App.PortalContext, params);
    });
    this.router.add('/q', function(params) {
      return new App.Cassette(App.Q.IndexContext, params);
    });
    this.router.add('/q/tagged/-', function(params) {
      return new App.Cassette(App.Q.IndexContext, params);
    });
    this.router.add('/q/tagged/:tags', function(params) {
      return new App.Cassette(App.Q.IndexContext, params);
    });
    return this.router.add('/q/:id', (function(_this) {
      return function(params) {
        if (_this.state.fromIndex) {
          params.fromIndex = _this.state.fromIndex;
          _this.state.fromIndex = null;
        }
        return new App.Cassette(App.Q.QuestionContext, params);
      };
    })(this));
  };

  MainContext.prototype._initializeScene = function() {
    var ref;
    return (ref = this.content).pushContext.apply(ref, this._detectCassette().forPusher());
  };

  MainContext.prototype._initializeValuables = function() {};

  MainContext.prototype._backward = function(e) {
    var ref;
    return (ref = this.content).pushContext.apply(ref, this._detectCassette().forPusher());
  };

  MainContext.prototype._forward = function(e) {
    var ref;
    return (ref = this.content).pushContext.apply(ref, this._detectCassette().forPusher());
  };

  MainContext.prototype._detectCassette = function() {
    return this.router.execute(this._strippedPath());
  };

  MainContext.prototype._pickHeaderParameters = function(xhr) {
    var required;
    required = ['Total-Pages', 'Per-Page', 'Current-Page', 'Paginate-Path', 'Access-Level'];
    return _.reduce(required, function(a, req) {
      console.log(req);
      a[req] = xhr.getResponseHeader(req);
      return a;
    }, {});
  };

  MainContext.prototype._strippedPath = function() {
    return location.href.replace(/.+?:\/\/(.+?)\//, '/');
  };

  MainContext.prototype._choppedPath = function() {
    return location.href.replace(/.+?:\/\/(.+?)\//, '/').replace(/\?.*/, '');
  };

  MainContext.prototype._isCrossDomain = function(url) {
    var e, error, originAnchor, urlAnchor;
    originAnchor = document.createElement("a");
    originAnchor.href = location.href;
    urlAnchor = document.createElement("a");
    try {
      urlAnchor.href = url;
      urlAnchor.href = urlAnchor.href;
      return !urlAnchor.protocol || !urlAnchor.host || (originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host);
    } catch (error) {
      e = error;
      return true;
    }
  };

  MainContext.prototype._replaceScene = function(linker) {
    var ref;
    this.emit('history:push', linker);
    return (ref = this.content).pushContext.apply(ref, this._detectCassette().forPusher()).then((function(_this) {
      return function() {
        return MathJax.Hub.Typeset();
      };
    })(this));
  };

  return MainContext;

})(Arda.Context);


},{}],7:[function(require,module,exports){
var GlobalContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = GlobalContext = (function(superClass) {
  extend(GlobalContext, superClass);

  function GlobalContext() {
    return GlobalContext.__super__.constructor.apply(this, arguments);
  }

  GlobalContext.prototype.component = React.createClass({
    mixins: [Arda.mixin],
    render: function() {
      return App.JSX.Menu.menu({
        Fa: App.View.Fa,
        goHome: (function(_this) {
          return function() {
            return _this.dispatch('app:home');
          };
        })(this)
      });
    }
  });

  GlobalContext.prototype.initState = function(props) {
    return props;
  };

  GlobalContext.prototype.delegate = function(subscribe) {
    GlobalContext.__super__.delegate.apply(this, arguments);
    return subscribe('app:home', function(id) {
      return this.root.emit('app:home');
    });
  };

  return GlobalContext;

})(App.BaseContext);


},{}],8:[function(require,module,exports){
var Menu;

module.exports = Menu = {};

Menu.GlobalContext = require('./global-context');


},{"./global-context":7}],9:[function(require,module,exports){
var GodContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = GodContext = (function(superClass) {
  extend(GodContext, superClass);

  function GodContext() {
    return GodContext.__super__.constructor.apply(this, arguments);
  }

  GodContext.prototype.initState = function(props) {
    return props;
  };

  GodContext.prototype.component = React.createClass({
    render: function() {
      return React.createElement('div', {});
    }
  });

  return GodContext;

})(App.BaseContext);


},{}],10:[function(require,module,exports){
var Notifier;

module.exports = Notifier = {};

Notifier.GodContext = require('./god-context');


},{"./god-context":9}],11:[function(require,module,exports){
var BlankContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = BlankContext = (function(superClass) {
  var Portal;

  extend(BlankContext, superClass);

  function BlankContext() {
    return BlankContext.__super__.constructor.apply(this, arguments);
  }

  BlankContext.prototype.component = Portal = React.createClass({
    mixins: [Arda.mixin],
    render: function() {
      var q;
      return App.JSX.portal({
        Fa: App.View.Fa,
        Loading: App.View.Loading,
        qTags: (function() {
          var i, len, ref, results;
          ref = this.props.tags;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            q = ref[i];
            results.push(new App.Tag(q));
          }
          return results;
        }).call(this),
        sources: this.props.sources,
        showTaggedIndex: (function(_this) {
          return function(id) {
            return _this.dispatch('question:tagged:index', id);
          };
        })(this),
        isSourcesLoaded: (function(_this) {
          return function() {
            return _this.props.sources.length !== 0;
          };
        })(this),
        isTagsLoaded: (function(_this) {
          return function() {
            return _this.props.tags.length !== 0;
          };
        })(this)
      });
    }
  });

  BlankContext.prototype.initState = function(props) {
    return {
      tags: [],
      sources: []
    };
  };

  BlankContext.prototype.expandComponentProps = function(props, state) {
    return state;
  };

  BlankContext.prototype.delegate = function(subscribe) {
    BlankContext.__super__.delegate.apply(this, arguments);
    subscribe('context:started', function() {
      return this._initializeTags();
    });
    subscribe('context:started', function() {
      return this._initializeSources();
    });
    subscribe('question:show', function(q) {
      return this.root.emit('question:show', q);
    });
    return subscribe('question:tagged:index', function(id) {
      return this.root.emit('question:tagged:index', [id]);
    });
  };

  BlankContext.prototype._initializeTags = function() {
    return this.strikeApi(App.Linker.get(App.Path.tags)).then((function(_this) {
      return function(data) {
        return _this.update(function(s) {
          return _.merge(s, {
            tags: data.body
          });
        });
      };
    })(this));
  };

  BlankContext.prototype._initializeSources = function() {
    return this.strikeApi(App.Linker.get(App.Path.sources)).then((function(_this) {
      return function(data) {
        return _this.update(function(s) {
          return _.merge(s, {
            sources: data.body
          });
        });
      };
    })(this));
  };

  return BlankContext;

})(App.BaseContext);


},{}],12:[function(require,module,exports){
var IndexContext,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = IndexContext = (function(superClass) {
  extend(IndexContext, superClass);

  function IndexContext() {
    this.toggleTag = bind(this.toggleTag, this);
    return IndexContext.__super__.constructor.apply(this, arguments);
  }

  IndexContext.prototype.initState = function(props) {
    return {
      index: [],
      header: {},
      qTags: [],
      tagSelectorState: App.TagSelectorState.LOADING,
      selectorOpened: false,
      selectedTags: !props.tags ? [] : _.map(this.props.tags.split(','), (function(_this) {
        return function(n) {
          return +n;
        };
      })(this)),
      basePath: ''
    };
  };

  IndexContext.prototype.expandComponentProps = function(props, state) {
    return state;
  };

  IndexContext.prototype.component = React.createClass({
    mixins: [Arda.mixin],
    getInitialState: function() {
      return {
        old: null
      };
    },
    render: function() {
      var q, tag;
      return App.JSX.Q.indexPage({
        Paginator: App.View.Paginator,
        TagSelector: App.View.TagSelector,
        Loading: App.View.Loading,
        index: (function() {
          var i, len, ref, results;
          ref = this.props.index;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            q = ref[i];
            results.push(new App.Question(q));
          }
          return results;
        }).call(this),
        header: this.props.header,
        selectedTags: this.props.selectedTags,
        tagSelectorState: this.props.tagSelectorState,
        selectorOpened: this.props.selectorOpened,
        qTags: (function() {
          var i, len, ref, results;
          ref = this.props.qTags;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            tag = ref[i];
            results.push(new App.Tag(tag));
          }
          return results;
        }).call(this),
        showQuestion: (function(_this) {
          return function(e) {
            var id;
            e.preventDefault();
            id = e.currentTarget.getAttribute('rel');
            return _this.dispatch('question:show', id);
          };
        })(this)
      });
    },
    componentDidUpdate: function() {
      if (this.state.old !== this.props.index) {
        this.dispatch('inform:rendered');
        return this.state.old = this.props.index;
      }
    }
  });

  IndexContext.prototype.delegate = function(subscribe) {
    IndexContext.__super__.delegate.apply(this, arguments);
    subscribe('context:started', function() {
      return this._initializeIndex();
    });
    subscribe('question:show', function(id) {
      return this.root.emit('question:show', id, this.state.selectedTags);
    });
    subscribe('question:index:paginate', this.paginate);
    subscribe('question:tag:toggle', this.toggleTag);
    return subscribe('question:tagSelector:toggle', function() {
      return this.update(function(s) {
        s.selectorOpened = !s.selectorOpened;
        return s;
      });
    });
  };

  IndexContext.prototype.generateId = function() {
    if (this.id == null) {
      this.id = 0;
    }
    this.id++;
    return this.id;
  };

  IndexContext.prototype.currentId = function() {
    return this.id != null ? this.id : this.id = 0;
  };

  IndexContext.prototype.generateTagId = function() {
    if (this.tagId == null) {
      this.tagId = 0;
    }
    this.tagId++;
    return this.tagId;
  };

  IndexContext.prototype.currentTagId = function() {
    return this.tagId != null ? this.tagId : this.tagId = 0;
  };

  IndexContext.prototype.paginate = function(page) {
    var linker, myId;
    linker = App.Linker.get(this.state.basePath, {
      page: page
    });
    myId = this.generateId();
    return this.strikeApi(linker).then((function(_this) {
      return function(data) {
        if (myId !== _this.currentId()) {
          throw 'older';
        }
        return _this.update(function(s) {
          s.index = data.body;
          s.header = data.header;
          return s;
        });
      };
    })(this)).then((function(_this) {
      return function() {
        _this.root.emit('history:push', linker);
        return _this.root.emit('window:top');
      };
    })(this));
  };

  IndexContext.prototype.toggleTag = function(id) {
    var linker, myId, newTags, tags;
    tags = _.include(this.state.selectedTags, id) ? _.remove(this.state.selectedTags.concat(), (function(_this) {
      return function(n) {
        return n !== id;
      };
    })(this)) : (newTags = this.state.selectedTags.concat(), newTags.push(id), newTags);
    tags = _.sortBy(tags);
    linker = App.Linker.get(App.Path.taggedIndex, {
      tags: tags.join(',')
    });
    myId = this.generateTagId();
    this.generateId();
    this.update((function(_this) {
      return function(s) {
        s.tagSelectorState = App.TagSelectorState.TOGGLED;
        s.selectedTags = tags;
        s.index = [];
        return s;
      };
    })(this));
    return this.strikeApi(linker).then((function(_this) {
      return function(data) {
        if (myId !== _this.currentTagId()) {
          throw 'older';
        }
        return _this.update(function(s) {
          s.index = data.body;
          s.header = data.header;
          return s;
        });
      };
    })(this)).then((function(_this) {
      return function() {
        _this.root.emit('history:push', linker);
        return _this.update(function(s) {
          s.basePath = _this._choppedPath();
          return s;
        });
      };
    })(this)).then((function(_this) {
      return function() {
        return _this.update(function(s) {
          s.tagSelectorState = App.TagSelectorState.LOADING;
          return s;
        });
      };
    })(this)).then((function(_this) {
      return function() {
        return _this.strikeApi(App.Linker.get(App.Path.taggedTags, {
          tags: tags
        })).then(function(data) {
          return _this.update(function(s) {
            s.tagSelectorState = App.TagSelectorState.LOADED;
            s.qTags = data.body;
            return s;
          });
        });
      };
    })(this));
  };

  IndexContext.prototype._initializeIndex = function() {
    return this.strikeApi(App.Linker.get(this._strippedPath())).then((function(_this) {
      return function(data) {
        return _this.update(function(s) {
          s.basePath = _this._choppedPath();
          s.index = data.body;
          s.header = data.header;
          return s;
        }).then(function() {
          return _this._initializeTags();
        });
      };
    })(this));
  };

  IndexContext.prototype._initializeTags = function() {
    return this.strikeApi(App.Linker.get(App.Path.taggedTags, {
      tags: this.state.selectedTags
    })).then((function(_this) {
      return function(data) {
        return _this.update(function(s) {
          s.tagSelectorState = App.TagSelectorState.LOADED;
          s.qTags = data.body;
          return s;
        });
      };
    })(this));
  };

  return IndexContext;

})(App.BaseContext);


},{}],13:[function(require,module,exports){
var Q;

module.exports = Q = {};

Q.IndexContext = require('./index-context');

Q.QuestionContext = require('./question-context');


},{"./index-context":12,"./question-context":14}],14:[function(require,module,exports){
var QuestionContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = QuestionContext = (function(superClass) {
  extend(QuestionContext, superClass);

  function QuestionContext() {
    return QuestionContext.__super__.constructor.apply(this, arguments);
  }

  QuestionContext.prototype.component = React.createClass({
    mixins: [Arda.mixin],
    getInitialState: function() {
      return {
        informed: false
      };
    },
    render: function() {
      if (this.props.state === App.QuestionState.LOADING) {
        return App.JSX.loading({
          Fa: App.View.Fa
        });
      }
      console.log(unescape(location.href).match(/tags=([0-9,]+)/));
      return App.JSX.Q.question({
        Fa: App.View.Fa,
        AnswerOption: this.detectAnswerOption(),
        InOrder: App.View.InOrder,
        QuestionState: App.QuestionState,
        Loading: App.View.Loading,
        sourceLink: this.props.sourceLink,
        state: this.props.state,
        question: this.props.question,
        answers: this.props.answers,
        premise: this.props.premise,
        result: this.props.result,
        qTags: this.props.qTags,
        submit: (function(_this) {
          return function() {
            return _this.dispatch('question:submit');
          };
        })(this),
        showTaggedIndex: (function(_this) {
          return function(e) {
            var id;
            e.preventDefault();
            id = e.currentTarget.getAttribute('rel');
            return _this.dispatch('question:tagged:index', id);
          };
        })(this),
        goBack: (function(_this) {
          return function() {
            var ref, tags;
            tags = (ref = unescape(location.href).match(/tags=([0-9,]+)/)) != null ? ref[1] : void 0;
            if (tags) {
              return _this.dispatch('question:tagged:index', tags);
            } else if (_this.hasHistory()) {
              return history.back();
            } else {
              return _this.dispatch('app:home');
            }
          };
        })(this),
        isCorrect: (function(_this) {
          return function() {
            if (_this.props.result.isCorrect) {
              return _this.props.result.isCorrect();
            } else {
              return _this.props.result[0].isCorrect();
            }
          };
        })(this),
        resultText: (function(_this) {
          return function() {
            if (_this.props.result.resultText) {
              return _this.props.result.resultText;
            } else {
              return _this.props.result[0].resultText;
            }
          };
        })(this)
      });
    },
    componentDidUpdate: function() {
      if (!this.state.informed && this.allDataLoaded()) {
        this.dispatch('inform:rendered');
        return this.state.informed = true;
      }
    },
    allDataLoaded: function() {
      return this.props.question && (!this.props.question.hasPremise() || this.props.premise);
    },
    hasHistory: function() {
      return window.history.state && window.history.state.historyWardUID;
    },
    detectAnswerOption: function() {
      var q;
      q = this.props.question;
      switch (false) {
        case !q.isFreeText():
          return App.View.FreeText;
        case !q.isOx():
          return App.View.Ox;
        case !q.isSingleChoice():
          return App.View.SingleChoice;
        case !q.isMultipleChoices():
          return App.View.MultipleChoices;
        case !q.isInOrder():
          return App.View.InOrder;
        case !q.isMultipleQuestions():
          return App.View.MultipleQuestions;
      }
    }
  });

  QuestionContext.prototype.initState = function(props) {
    return {
      id: props.id,
      question: null,
      answers: null,
      state: App.QuestionState.LOADING,
      result: null,
      sourceLink: null,
      qTags: null
    };
  };

  QuestionContext.prototype.expandComponentProps = function(props, state) {
    return state;
  };

  QuestionContext.prototype.isAnswerable = function() {
    return this.state.state === App.QuestionState.ASKING || this.state.state === App.QuestionState.ASKED;
  };

  QuestionContext.prototype.isSubmittable = function() {
    return this.state.state === App.QuestionState.ASKED;
  };

  QuestionContext.prototype.isInOrder = function() {
    return this.state.question.isInOrder();
  };

  QuestionContext.prototype.isMultipleQuestions = function() {
    return this.state.question.isMultipleQuestions();
  };

  QuestionContext.prototype.isAnswersFullFilled = function() {
    var result;
    if (this.isMultipleQuestions()) {
      result = true;
      _.each(_.zip(this.state.question.children, this.state.answers), (function(_this) {
        return function(qa) {
          var a, q;
          q = qa[0], a = qa[1];
          if (!_this.isAnswersFullFilledOf(q, a || '')) {
            return result = false;
          }
        };
      })(this));
      return result;
    } else {
      return this.isAnswersFullFilledOf(this.state.question, this.state.answers);
    }
  };

  QuestionContext.prototype.isAnswersFullFilledOf = function(q, a) {
    if (q.isInOrder()) {
      return !_.include(a, '') && !_.include(a, null) && !_.include(a, void 0);
    } else {
      return !_.isNull(a) && (a.length > 0 || _.isNumber(a));
    }
  };

  QuestionContext.prototype.delegate = function(subscribe) {
    QuestionContext.__super__.delegate.apply(this, arguments);
    subscribe('context:started', function() {
      return this._initializeQuestion();
    });
    subscribe('question:show', function(q) {
      return this.root.emit('question:show', q);
    });
    subscribe('question:answer', function(answer, index) {
      if (!this.isAnswerable()) {
        return;
      }
      return this.update((function(_this) {
        return function(s) {
          if (_this.isMultipleQuestions()) {
            if (s.answers == null) {
              s.answers = [];
            }
            s.answers[+index] = answer;
          } else {
            s.answers = answer;
          }
          return s;
        };
      })(this)).then((function(_this) {
        return function() {
          if (_this.isAnswersFullFilled()) {
            return _this.update(function(s) {
              return _.merge(s, {
                state: App.QuestionState.ASKED
              });
            });
          } else {
            return _this.update(function(s) {
              return _.merge(s, {
                state: App.QuestionState.ASKING
              });
            });
          }
        };
      })(this));
    });
    subscribe('question:submit', function() {
      if (!this.isSubmittable()) {
        return;
      }
      console.log(this.state);
      this.update(function(s) {
        return _.merge(s, {
          state: App.QuestionState.SUBMITTING
        });
      });
      return this.strikeApi(App.Linker.post(App.Path.mark, {
        id: this.state.question.id,
        answers: this.state.answers
      })).then((function(_this) {
        return function(data) {
          var subMarks;
          if (_this.isMultipleQuestions()) {
            subMarks = _.map(data.body.correct_answer, function(mark, index) {
              var subMark;
              subMark = _.clone(data.body);
              subMark.correct_answer = mark;
              return new App.Mark(subMark, _this.state.question.children[index].options);
            });
            return _this.update(function(s) {
              s.result = subMarks;
              s.state = App.QuestionState.MARKED;
              return s;
            });
          } else {
            return _this.update(function(s) {
              return _.merge(s, {
                result: new App.Mark(data.body, s.question.options),
                state: App.QuestionState.MARKED
              });
            });
          }
        };
      })(this));
    });
    subscribe('question:tagged:index', function(id) {
      return this.root.emit('question:tagged:index', [id]);
    });
    return subscribe('app:home', function() {
      return this.root.emit('app:home');
    });
  };

  QuestionContext.prototype._initializeQuestion = function() {
    return this.strikeApi(App.Linker.get(App.Path.q, {
      id: this.props.id
    })).then((function(_this) {
      return function(data) {
        return _this.update(function(s) {
          return _.merge(s, {
            question: new App.Question(data.body),
            state: App.QuestionState.ASKING
          });
        }).then(function() {
          if (_this.isInOrder()) {
            return _this.update(function(s) {
              return _.merge(s, {
                answers: new Array(s.question.answersNumber)
              });
            });
          }
        }).then(function() {
          if (_this.state.question.hasPremise()) {
            return _this.strikeApi(App.Linker.get(App.Path.premise, {
              id: _this.state.question.premiseId
            })).then(function(data) {
              return _this.update(function(s) {
                s.premise = new App.Premise(data.body);
                return s;
              });
            });
          }
        }).then(function() {
          return _this.strikeApi(App.Linker.get(App.Path.qTags, {
            id: _this.props.id
          })).then(function(data) {
            return _this.update(function(s) {
              s.qTags = _.map(data.body, (function(_this) {
                return function(tag) {
                  return new App.Tag(tag);
                };
              })(this));
              return s;
            });
          });
        }).then(function() {
          if (_this.state.question.hasSource()) {
            return _this.strikeApi(App.Linker.get(App.Path.source, {
              id: _this.state.question.sourceLinkId
            })).then(function(data) {
              return _this.update(function(s) {
                s.sourceLink = new App.SourceLink(data.body);
                return s;
              });
            });
          }
        });
      };
    })(this));
  };

  return QuestionContext;

})(App.BaseContext);


},{}],15:[function(require,module,exports){
var JSX;

module.exports = JSX = {
  loading: require('./loading.js'),
  main: require('./main.js'),
  Menu: {
    menu: require('./menu/menu.js')
  },
  paginator: require('./paginator.js'),
  portal: require('./portal.js'),
  Q: {
    freeText: require('./q/free-text.js'),
    inOrder: require('./q/in-order.js'),
    indexPage: require('./q/index-page.js'),
    multipleQuestions: require('./q/multiple_questions.js'),
    ox: require('./q/ox.js'),
    question: require('./q/question.js'),
    singleChoice: require('./q/single-choice.js'),
    tagSelector: require('./q/tag-selector.js')
  }
};


},{"./loading.js":16,"./main.js":17,"./menu/menu.js":18,"./paginator.js":19,"./portal.js":20,"./q/free-text.js":21,"./q/in-order.js":22,"./q/index-page.js":23,"./q/multiple_questions.js":24,"./q/ox.js":25,"./q/question.js":26,"./q/single-choice.js":27,"./q/tag-selector.js":28}],16:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa) {
      tags.push(React.createElement("section", {
        className: "common-loading"
      }, React.createElement(Fa, {
        icon: "spinner",
        animation: "pulse"
      }), " ", "Now loading..."));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],17:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    tags.push(React.createElement("article", {
      id: "notifier",
      ref: "notifier"
    }));
    tags.push(React.createElement("article", {
      id: "menu",
      ref: "menu"
    }));
    tags.push(React.createElement("article", {
      id: "content",
      ref: "content"
    }));
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],18:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, goHome) {
      tags.push(React.createElement("section", {
        className: "global-menu menu-area"
      }, React.createElement("div", {
        className: "global-menu menu-body"
      }, React.createElement("button", {
        onClick: goHome,
        className: "global-menu go-home"
      }, React.createElement(Fa, {
        icon: "home",
        scale: 2
      })))));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "goHome" in locals_for_with ? locals_for_with.goHome : typeof goHome !== "undefined" ? goHome : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],19:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(links, paginate) {
      tags.push(React.createElement("section", {
        className: "question-index paginator area"
      }, React.createElement("ul", {
        className: "question-index paginator list"
      }, function() {
        var tags = [];
        var $$obj = links;
        if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
          var link = $$obj[$index];
          tags.push(React.createElement.apply(React, [ "li", {
            key: link.page,
            className: "question-index paginator body"
          } ].concat(function() {
            var tags = [];
            link.isCurrent ? tags.push(React.createElement("a", {
              onClick: paginate.bind(null, link.page),
              className: "question-index paginator anchor now"
            }, link.page)) : tags.push(React.createElement("a", {
              onClick: paginate.bind(null, link.page),
              className: "question-index paginator anchor ready"
            }, link.page));
            return tags;
          }.call(this))));
        } else {
          var $$l = 0;
          for (var $index in $$obj) {
            $$l++;
            var link = $$obj[$index];
            tags.push(React.createElement.apply(React, [ "li", {
              key: link.page,
              className: "question-index paginator body"
            } ].concat(function() {
              var tags = [];
              link.isCurrent ? tags.push(React.createElement("a", {
                onClick: paginate.bind(null, link.page),
                className: "question-index paginator anchor now"
              }, link.page)) : tags.push(React.createElement("a", {
                onClick: paginate.bind(null, link.page),
                className: "question-index paginator anchor ready"
              }, link.page));
              return tags;
            }.call(this))));
          }
        }
        return tags;
      }.call(this))));
    }).call(this, "links" in locals_for_with ? locals_for_with.links : typeof links !== "undefined" ? links : undefined, "paginate" in locals_for_with ? locals_for_with.paginate : typeof paginate !== "undefined" ? paginate : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],20:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, Loading, isSourcesLoaded, isTagsLoaded, qTags, showTaggedIndex, sources) {
      tags.push(React.createElement("section", {
        className: "portal portal-body"
      }, React.createElement.apply(React, [ "section", {
        className: "portal tag-list area"
      } ].concat(function() {
        var tags = [];
        tags.push(React.createElement("h1", {
          className: "portal sub-title"
        }, React.createElement(Fa, {
          icon: "tags"
        }), "タグリスト"));
        isTagsLoaded() ? tags.push(React.createElement("ul", {
          className: "portal tag-list-body"
        }, function() {
          var tags = [];
          var $$obj = qTags;
          if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
            var tag = $$obj[$index];
            tag.has_question() ? tags.push(React.createElement("li", {
              key: tag.id,
              className: "portal tag-list-tag"
            }, React.createElement(Fa, {
              icon: "tag"
            }), React.createElement("a", {
              onClick: showTaggedIndex.bind(null, tag.id)
            }, React.createElement("span", {
              className: "name"
            }, tag.display), React.createElement("span", {
              className: "count"
            }, tag.countText)))) : tags.push(React.createElement("li", {
              key: tag.id,
              className: "portal tag-list-tag disabled"
            }, React.createElement(Fa, {
              icon: "tag"
            }), React.createElement("span", {}, React.createElement("span", {
              className: "name"
            }, tag.display), React.createElement("span", {
              className: "count"
            }, tag.countText))));
          } else {
            var $$l = 0;
            for (var $index in $$obj) {
              $$l++;
              var tag = $$obj[$index];
              tag.has_question() ? tags.push(React.createElement("li", {
                key: tag.id,
                className: "portal tag-list-tag"
              }, React.createElement(Fa, {
                icon: "tag"
              }), React.createElement("a", {
                onClick: showTaggedIndex.bind(null, tag.id)
              }, React.createElement("span", {
                className: "name"
              }, tag.display), React.createElement("span", {
                className: "count"
              }, tag.countText)))) : tags.push(React.createElement("li", {
                key: tag.id,
                className: "portal tag-list-tag disabled"
              }, React.createElement(Fa, {
                icon: "tag"
              }), React.createElement("span", {}, React.createElement("span", {
                className: "name"
              }, tag.display), React.createElement("span", {
                className: "count"
              }, tag.countText))));
            }
          }
          return tags;
        }.call(this))) : tags.push(React.createElement(Loading, {}));
        return tags;
      }.call(this))), React.createElement.apply(React, [ "section", {
        className: "portal source area"
      } ].concat(function() {
        var tags = [];
        tags.push(React.createElement("h1", {
          className: "portal sub-title"
        }, React.createElement(Fa, {
          icon: "link"
        }), "出典リスト（予定含む）"));
        isSourcesLoaded() ? tags.push(React.createElement("ul", {
          className: "portal source-list-body"
        }, function() {
          var tags = [];
          var $$obj = sources;
          if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
            var source = $$obj[$index];
            tags.push(React.createElement("li", {
              key: source.id,
              className: "portal source-list-source"
            }, React.createElement(Fa, {
              icon: "link"
            }), React.createElement("a", {
              href: source.url
            }, source.display)));
          } else {
            var $$l = 0;
            for (var $index in $$obj) {
              $$l++;
              var source = $$obj[$index];
              tags.push(React.createElement("li", {
                key: source.id,
                className: "portal source-list-source"
              }, React.createElement(Fa, {
                icon: "link"
              }), React.createElement("a", {
                href: source.url
              }, source.display)));
            }
          }
          return tags;
        }.call(this))) : tags.push(React.createElement(Loading, {}));
        return tags;
      }.call(this))), React.createElement("section", {
        className: "portal tag-list area"
      }, React.createElement("h1", {
        className: "portal sub-title"
      }, React.createElement(Fa, {
        icon: "bullhorn"
      }), "ところでこれはなに"), React.createElement("section", {
        className: "portal hello"
      }, React.createElement("p", {}, "おふくろさま（無職、36歳、男、", React.createElement("a", {
        href: "https://twitter.com/o296sm"
      }, "@o296sm"), "）がプログラムの勉強のためにつくっています。"), React.createElement("p", {}, "ソースは公開していますが、動作保証などはありません。", React.createElement("a", {
        href: "https://github.com/mmmpa/quick_q"
      }, "https://github.com/mmmpa/quick_q")), React.createElement("p", {}, "各問題は使用条件にしたがい、出典を明記していますので、そちらで最終確認することをおすすめします。"), React.createElement("p", {}, "本サイト、本サイトのソースの利用によって生じたいかなる損害に対してもおふくろさまは一切の責任を負わないものとします。")))));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "Loading" in locals_for_with ? locals_for_with.Loading : typeof Loading !== "undefined" ? Loading : undefined, "isSourcesLoaded" in locals_for_with ? locals_for_with.isSourcesLoaded : typeof isSourcesLoaded !== "undefined" ? isSourcesLoaded : undefined, "isTagsLoaded" in locals_for_with ? locals_for_with.isTagsLoaded : typeof isTagsLoaded !== "undefined" ? isTagsLoaded : undefined, "qTags" in locals_for_with ? locals_for_with.qTags : typeof qTags !== "undefined" ? qTags : undefined, "showTaggedIndex" in locals_for_with ? locals_for_with.showTaggedIndex : typeof showTaggedIndex !== "undefined" ? showTaggedIndex : undefined, "sources" in locals_for_with ? locals_for_with.sources : typeof sources !== "undefined" ? sources : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],21:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(answers, input, isMarked) {
      tags.push(React.createElement("div", {
        className: "question-q text"
      }, React.createElement("input", {
        placeholder: "入力欄",
        disabled: isMarked(),
        value: answers,
        onChange: input,
        className: "question-q free-text"
      })));
    }).call(this, "answers" in locals_for_with ? locals_for_with.answers : typeof answers !== "undefined" ? answers : undefined, "input" in locals_for_with ? locals_for_with.input : typeof input !== "undefined" ? input : undefined, "isMarked" in locals_for_with ? locals_for_with.isMarked : typeof isMarked !== "undefined" ? isMarked : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],22:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, answersNumber, isCorrect, isMarked, options, select, selected) {
      var n = 0;
      for (;n < answersNumber; ) {
        tags.push(React.createElement("section", {
          key: n
        }, React.createElement.apply(React, [ "div", {
          className: "question-q order number"
        } ].concat(function() {
          var tags = [];
          isMarked() && (isCorrect(n) ? tags.push(React.createElement("span", {
            className: "question-q mark-on-check correct"
          }, React.createElement(Fa, {
            icon: "circle-o"
          }))) : tags.push(React.createElement("span", {
            className: "question-q mark-on-check incorrect"
          }, React.createElement(Fa, {
            icon: "times"
          }))));
          tags.push(React.createElement("span", {
            className: "number-circle"
          }, n + 1));
          return tags;
        }.call(this))), React.createElement("div", {
          className: "question-q order select"
        }, React.createElement("select", {
          onChange: select,
          name: n,
          disabled: isMarked(),
          value: selected(n),
          className: "question-q order selector"
        }, React.createElement("option", {
          value: ""
        }, "未選択"), function() {
          var tags = [];
          var $$obj = options;
          if ("number" == typeof $$obj.length) for (var index = 0, $$l = $$obj.length; $$l > index; index++) {
            var opt = $$obj[index];
            tags.push(React.createElement("option", {
              value: opt.id,
              key: opt.id
            }, opt.marked.__html));
          } else {
            var $$l = 0;
            for (var index in $$obj) {
              $$l++;
              var opt = $$obj[index];
              tags.push(React.createElement("option", {
                value: opt.id,
                key: opt.id
              }, opt.marked.__html));
            }
          }
          return tags;
        }.call(this)))));
        n++;
      }
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "answersNumber" in locals_for_with ? locals_for_with.answersNumber : typeof answersNumber !== "undefined" ? answersNumber : undefined, "isCorrect" in locals_for_with ? locals_for_with.isCorrect : typeof isCorrect !== "undefined" ? isCorrect : undefined, "isMarked" in locals_for_with ? locals_for_with.isMarked : typeof isMarked !== "undefined" ? isMarked : undefined, "options" in locals_for_with ? locals_for_with.options : typeof options !== "undefined" ? options : undefined, "select" in locals_for_with ? locals_for_with.select : typeof select !== "undefined" ? select : undefined, "selected" in locals_for_with ? locals_for_with.selected : typeof selected !== "undefined" ? selected : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],23:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Loading, Paginator, TagSelector, header, index, qTags, selectedTags, selectorOpened, showQuestion, tagSelectorState) {
      tags.push(React.createElement(TagSelector, {
        qTags: qTags,
        selectedTags: selectedTags,
        selectorOpened: selectorOpened,
        tagSelectorState: tagSelectorState
      }));
      if (0 == index.length) tags.push(React.createElement(Loading, {})); else {
        tags.push(React.createElement(Paginator, {
          header: header
        }));
        tags.push(React.createElement("section", {
          className: "question-index index"
        }, React.createElement("table", {
          className: "question-index list"
        }, React.createElement("tbody", {}, function() {
          var tags = [];
          var $$obj = index;
          if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
            var question = $$obj[$index];
            tags.push(React.createElement("tr", {
              key: question.id
            }, React.createElement("th", {
              className: "id"
            }, question.id), React.createElement("td", {
              className: "description"
            }, React.createElement("a", {
              href: question.uri,
              rel: question.id,
              onClick: showQuestion,
              props: question
            }, question.description)), React.createElement("td", {
              className: "way"
            }, question.wayText)));
          } else {
            var $$l = 0;
            for (var $index in $$obj) {
              $$l++;
              var question = $$obj[$index];
              tags.push(React.createElement("tr", {
                key: question.id
              }, React.createElement("th", {
                className: "id"
              }, question.id), React.createElement("td", {
                className: "description"
              }, React.createElement("a", {
                href: question.uri,
                rel: question.id,
                onClick: showQuestion,
                props: question
              }, question.description)), React.createElement("td", {
                className: "way"
              }, question.wayText)));
            }
          }
          return tags;
        }.call(this)))));
        tags.push(React.createElement(Paginator, {
          header: header
        }));
      }
    }).call(this, "Loading" in locals_for_with ? locals_for_with.Loading : typeof Loading !== "undefined" ? Loading : undefined, "Paginator" in locals_for_with ? locals_for_with.Paginator : typeof Paginator !== "undefined" ? Paginator : undefined, "TagSelector" in locals_for_with ? locals_for_with.TagSelector : typeof TagSelector !== "undefined" ? TagSelector : undefined, "header" in locals_for_with ? locals_for_with.header : typeof header !== "undefined" ? header : undefined, "index" in locals_for_with ? locals_for_with.index : typeof index !== "undefined" ? index : undefined, "qTags" in locals_for_with ? locals_for_with.qTags : typeof qTags !== "undefined" ? qTags : undefined, "selectedTags" in locals_for_with ? locals_for_with.selectedTags : typeof selectedTags !== "undefined" ? selectedTags : undefined, "selectorOpened" in locals_for_with ? locals_for_with.selectorOpened : typeof selectorOpened !== "undefined" ? selectorOpened : undefined, "showQuestion" in locals_for_with ? locals_for_with.showQuestion : typeof showQuestion !== "undefined" ? showQuestion : undefined, "tagSelectorState" in locals_for_with ? locals_for_with.tagSelectorState : typeof tagSelectorState !== "undefined" ? tagSelectorState : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],24:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, FreeText, InOrder, MultipleChoices, Ox, SingleChoice, answers, children, result) {
      tags.push(function() {
        var tags = [];
        var $$obj = children;
        if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
          var child = $$obj[$index];
          tags.push(React.createElement("section", {
            className: "question-q text"
          }, React.createElement("h1", {
            className: "question-q q"
          }, React.createElement(Fa, {
            icon: "question"
          }), "設問", child.index + 1)));
          tags.push(React.createElement("section", {
            className: "question-q question-area"
          }, React.createElement("div", {
            dangerouslySetInnerHTML: child.marked,
            className: "question-q q-text"
          })));
          tags.push(React.createElement("section", {
            className: "question-q answer"
          }, React.createElement("h1", {
            className: "question-q a"
          }, React.createElement(Fa, {
            icon: "exclamation"
          }), child.pleaseText)));
          child.isFreeText() ? tags.push(React.createElement(FreeText, {
            question: child,
            options: child.options,
            answers: answers[child.index],
            result: result[child.index]
          })) : child.isOx() ? tags.push(React.createElement(Ox, {
            question: child,
            options: child.options,
            answers: answers[child.index],
            result: result[child.index]
          })) : child.isSingleChoice() ? tags.push(React.createElement(SingleChoice, {
            question: child,
            options: child.options,
            answers: answers[child.index],
            result: result[child.index]
          })) : child.isMultipleChoices() ? tags.push(React.createElement(MultipleChoices, {
            question: child,
            options: child.options,
            answers: answers[child.index],
            result: result[child.index]
          })) : child.isInOrder() && tags.push(React.createElement(InOrder, {
            question: child,
            answers: answers[child.index],
            result: result[child.index]
          }));
        } else {
          var $$l = 0;
          for (var $index in $$obj) {
            $$l++;
            var child = $$obj[$index];
            tags.push(React.createElement("section", {
              className: "question-q text"
            }, React.createElement("h1", {
              className: "question-q q"
            }, React.createElement(Fa, {
              icon: "question"
            }), "設問", child.index + 1)));
            tags.push(React.createElement("section", {
              className: "question-q question-area"
            }, React.createElement("div", {
              dangerouslySetInnerHTML: child.marked,
              className: "question-q q-text"
            })));
            tags.push(React.createElement("section", {
              className: "question-q answer"
            }, React.createElement("h1", {
              className: "question-q a"
            }, React.createElement(Fa, {
              icon: "exclamation"
            }), child.pleaseText)));
            child.isFreeText() ? tags.push(React.createElement(FreeText, {
              question: child,
              options: child.options,
              answers: answers[child.index],
              result: result[child.index]
            })) : child.isOx() ? tags.push(React.createElement(Ox, {
              question: child,
              options: child.options,
              answers: answers[child.index],
              result: result[child.index]
            })) : child.isSingleChoice() ? tags.push(React.createElement(SingleChoice, {
              question: child,
              options: child.options,
              answers: answers[child.index],
              result: result[child.index]
            })) : child.isMultipleChoices() ? tags.push(React.createElement(MultipleChoices, {
              question: child,
              options: child.options,
              answers: answers[child.index],
              result: result[child.index]
            })) : child.isInOrder() && tags.push(React.createElement(InOrder, {
              question: child,
              answers: answers[child.index],
              result: result[child.index]
            }));
          }
        }
        return tags;
      }.call(this));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "FreeText" in locals_for_with ? locals_for_with.FreeText : typeof FreeText !== "undefined" ? FreeText : undefined, "InOrder" in locals_for_with ? locals_for_with.InOrder : typeof InOrder !== "undefined" ? InOrder : undefined, "MultipleChoices" in locals_for_with ? locals_for_with.MultipleChoices : typeof MultipleChoices !== "undefined" ? MultipleChoices : undefined, "Ox" in locals_for_with ? locals_for_with.Ox : typeof Ox !== "undefined" ? Ox : undefined, "SingleChoice" in locals_for_with ? locals_for_with.SingleChoice : typeof SingleChoice !== "undefined" ? SingleChoice : undefined, "answers" in locals_for_with ? locals_for_with.answers : typeof answers !== "undefined" ? answers : undefined, "children" in locals_for_with ? locals_for_with.children : typeof children !== "undefined" ? children : undefined, "result" in locals_for_with ? locals_for_with.result : typeof result !== "undefined" ? result : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],25:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, Object, isFalse, isTrue, toggle) {
      function jade_join_classes(val) {
        return (Array.isArray(val) ? val.map(jade_join_classes) : val && "object" == typeof val ? Object.keys(val).filter(function(key) {
          return val[key];
        }) : [ val ]).filter(function(val) {
          return null != val && "" !== val;
        }).join(" ");
      }
      tags.push(React.createElement("section", {
        className: "question-q ox-control"
      }, React.createElement("div", {
        onClick: toggle.bind(null, 1),
        className: jade_join_classes([ "question-q", "ox-button", "o", isTrue() ])
      }, React.createElement(Fa, {
        icon: "circle-o"
      })), React.createElement("div", {
        onClick: toggle.bind(null, 0),
        className: jade_join_classes([ "question-q", "ox-button", "x", isFalse() ])
      }, React.createElement(Fa, {
        icon: "times"
      }))));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "Object" in locals_for_with ? locals_for_with.Object : typeof Object !== "undefined" ? Object : undefined, "isFalse" in locals_for_with ? locals_for_with.isFalse : typeof isFalse !== "undefined" ? isFalse : undefined, "isTrue" in locals_for_with ? locals_for_with.isTrue : typeof isTrue !== "undefined" ? isTrue : undefined, "toggle" in locals_for_with ? locals_for_with.toggle : typeof toggle !== "undefined" ? toggle : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],26:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(AnswerOption, Fa, Loading, QuestionState, answers, goBack, isCorrect, premise, qTags, question, result, resultText, showTaggedIndex, sourceLink, state, submit) {
      tags.push(React.createElement.apply(React, [ "section", {
        className: "question-q body"
      } ].concat(function() {
        var tags = [];
        tags.push(React.createElement.apply(React, [ "section", {
          className: "question-q tagged-tag-area"
        } ].concat(function() {
          var tags = [];
          qTags ? tags.push(React.createElement("ul", {
            className: "question-q tagged-tag-body"
          }, function() {
            var tags = [];
            var $$obj = qTags;
            if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
              var tag = $$obj[$index];
              tags.push(React.createElement("li", {
                key: tag.id,
                className: "question-q tagged-tag-tag"
              }, React.createElement(Fa, {
                icon: "tag"
              }), React.createElement("a", {
                href: tag.uri,
                rel: tag.id,
                onClick: showTaggedIndex
              }, React.createElement("span", {
                className: "name"
              }, tag.display))));
            } else {
              var $$l = 0;
              for (var $index in $$obj) {
                $$l++;
                var tag = $$obj[$index];
                tags.push(React.createElement("li", {
                  key: tag.id,
                  className: "question-q tagged-tag-tag"
                }, React.createElement(Fa, {
                  icon: "tag"
                }), React.createElement("a", {
                  href: tag.uri,
                  rel: tag.id,
                  onClick: showTaggedIndex
                }, React.createElement("span", {
                  className: "name"
                }, tag.display))));
              }
            }
            return tags;
          }.call(this))) : tags.push(React.createElement(Loading, {}));
          return tags;
        }.call(this))));
        question.hasPremise() && tags.push(React.createElement.apply(React, [ "section", {
          className: "question-q premise"
        } ].concat(function() {
          var tags = [];
          tags.push(React.createElement("h1", {
            className: "question-q premise-title"
          }, React.createElement(Fa, {
            icon: "file-text-o"
          }), "共通の前文"));
          premise ? tags.push(React.createElement("section", {
            className: "question-q premise-area"
          }, React.createElement("div", {
            dangerouslySetInnerHTML: premise.marked,
            className: "question-q q-text"
          }))) : tags.push(React.createElement(Loading, {}));
          return tags;
        }.call(this))));
        tags.push(React.createElement("section", {
          className: "question-q text"
        }, React.createElement("h1", {
          className: "question-q q"
        }, React.createElement(Fa, {
          icon: "question-circle"
        }), "問題")));
        tags.push(React.createElement("section", {
          className: "question-q question-area"
        }, React.createElement("div", {
          dangerouslySetInnerHTML: question.marked,
          className: "question-q q-text"
        })));
        tags.push(React.createElement("section", {
          className: "question-q answer"
        }, React.createElement("h1", {
          className: "question-q a"
        }, React.createElement(Fa, {
          icon: "exclamation-circle"
        }), question.pleaseText), React.createElement("section", {
          className: "question-q answer-area"
        }, React.createElement(AnswerOption, {
          question: question,
          options: question.options,
          answers: answers,
          result: result
        }))));
        state == QuestionState.MARKED ? tags.push(React.createElement.apply(React, [ "section", {
          className: "question-q result-area"
        } ].concat(function() {
          var tags = [];
          tags.push(React.createElement.apply(React, [ "div", {
            className: "question-q mark-area"
          } ].concat(function() {
            var tags = [];
            isCorrect() ? tags.push(React.createElement("h1", {
              className: "question-q mark correct"
            }, React.createElement(Fa, {
              icon: "thumbs-o-up"
            }), resultText())) : tags.push(React.createElement("h1", {
              className: "question-q mark incorrect"
            }, React.createElement(Fa, {
              icon: "hand-stop-o"
            }), resultText()));
            return tags;
          }.call(this))));
          tags.push(React.createElement("h1", {
            className: "question-q correct-answer"
          }, React.createElement(Fa, {
            icon: "graduation-cap"
          }), "正解は..."));
          question.isMultipleQuestions() ? tags.push(React.createElement("ol", {}, function() {
            var tags = [];
            var $$obj = result;
            if ("number" == typeof $$obj.length) for (var index = 0, $$l = $$obj.length; $$l > index; index++) {
              var mark = $$obj[index];
              tags.push(React.createElement("li", {
                key: index
              }, React.createElement("div", {
                dangerouslySetInnerHTML: mark.correctAnswer,
                className: "question-q answer-area"
              })));
            } else {
              var $$l = 0;
              for (var index in $$obj) {
                $$l++;
                var mark = $$obj[index];
                tags.push(React.createElement("li", {
                  key: index
                }, React.createElement("div", {
                  dangerouslySetInnerHTML: mark.correctAnswer,
                  className: "question-q answer-area"
                })));
              }
            }
            return tags;
          }.call(this))) : tags.push(React.createElement("div", {
            dangerouslySetInnerHTML: result.correctAnswer,
            className: "question-q answer-area"
          }));
          return tags;
        }.call(this)))) : tags.push(React.createElement.apply(React, [ "section", {
          className: "question-q control"
        } ].concat(function() {
          var tags = [];
          state == QuestionState.ASKING ? tags.push(React.createElement("button", {
            disabled: !0,
            className: "question-q button submit disabled"
          }, React.createElement(Fa, {
            icon: "graduation-cap"
          }), " ", question.pleaseText)) : state == QuestionState.ASKED ? tags.push(React.createElement("button", {
            onClick: submit,
            className: "question-q button submit"
          }, React.createElement(Fa, {
            icon: "graduation-cap"
          }), " ", "正解を確認する")) : state == QuestionState.SUBMITTING && tags.push(React.createElement("button", {
            disabled: !0,
            className: "question-q button submit disabled"
          }, React.createElement(Fa, {
            icon: "spinner",
            animation: "pulse"
          }), " ", "確認中..."));
          return tags;
        }.call(this))));
        tags.push(React.createElement.apply(React, [ "section", {
          className: "question-q control-area"
        } ].concat(function() {
          var tags = [];
          tags.push(React.createElement("button", {
            onClick: goBack,
            className: "button go-back"
          }, React.createElement(Fa, {
            icon: "arrow-circle-o-left"
          }), "一覧にもどる"));
          question.hasSource() && sourceLink && tags.push(React.createElement("section", {
            className: "question-q source-link-area"
          }, React.createElement("h1", {
            className: "question-q source-link-title"
          }, React.createElement(Fa, {
            icon: "link"
          }), "出典"), React.createElement("p", {}, React.createElement(Fa, {
            icon: "link"
          }), React.createElement("a", {
            href: sourceLink.url
          }, sourceLink.display))));
          return tags;
        }.call(this))));
        return tags;
      }.call(this))));
    }).call(this, "AnswerOption" in locals_for_with ? locals_for_with.AnswerOption : typeof AnswerOption !== "undefined" ? AnswerOption : undefined, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "Loading" in locals_for_with ? locals_for_with.Loading : typeof Loading !== "undefined" ? Loading : undefined, "QuestionState" in locals_for_with ? locals_for_with.QuestionState : typeof QuestionState !== "undefined" ? QuestionState : undefined, "answers" in locals_for_with ? locals_for_with.answers : typeof answers !== "undefined" ? answers : undefined, "goBack" in locals_for_with ? locals_for_with.goBack : typeof goBack !== "undefined" ? goBack : undefined, "isCorrect" in locals_for_with ? locals_for_with.isCorrect : typeof isCorrect !== "undefined" ? isCorrect : undefined, "premise" in locals_for_with ? locals_for_with.premise : typeof premise !== "undefined" ? premise : undefined, "qTags" in locals_for_with ? locals_for_with.qTags : typeof qTags !== "undefined" ? qTags : undefined, "question" in locals_for_with ? locals_for_with.question : typeof question !== "undefined" ? question : undefined, "result" in locals_for_with ? locals_for_with.result : typeof result !== "undefined" ? result : undefined, "resultText" in locals_for_with ? locals_for_with.resultText : typeof resultText !== "undefined" ? resultText : undefined, "showTaggedIndex" in locals_for_with ? locals_for_with.showTaggedIndex : typeof showTaggedIndex !== "undefined" ? showTaggedIndex : undefined, "sourceLink" in locals_for_with ? locals_for_with.sourceLink : typeof sourceLink !== "undefined" ? sourceLink : undefined, "state" in locals_for_with ? locals_for_with.state : typeof state !== "undefined" ? state : undefined, "submit" in locals_for_with ? locals_for_with.submit : typeof submit !== "undefined" ? submit : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],27:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, isActive, isCorrect, isMarked, options, toggle) {
      tags.push(React.createElement("ul", {
        className: "question-q options"
      }, function() {
        var tags = [];
        var $$obj = options;
        if ("number" == typeof $$obj.length) for (var index = 0, $$l = $$obj.length; $$l > index; index++) {
          var option = $$obj[index];
          tags.push(React.createElement("li", {
            onClick: toggle.bind(null, option.id),
            key: option.id,
            className: "question-q option"
          }, React.createElement.apply(React, [ "div", {
            className: "question-q checker"
          } ].concat(function() {
            var tags = [];
            isMarked() && (isCorrect(option.id) ? tags.push(React.createElement("span", {
              className: "question-q mark-on-check correct"
            }, React.createElement(Fa, {
              icon: "circle-o"
            }))) : tags.push(React.createElement("span", {
              className: "question-q mark-on-check incorrect"
            }, React.createElement(Fa, {
              icon: "times"
            }))));
            isActive(option.id) ? tags.push(React.createElement("span", {
              className: "question-q check active"
            }, React.createElement(Fa, {
              icon: "check",
              scale: 2
            }))) : tags.push(React.createElement("span", {
              className: "question-q check"
            }, React.createElement(Fa, {
              icon: "check",
              scale: 2
            })));
            return tags;
          }.call(this))), React.createElement("div", {
            dangerouslySetInnerHTML: option.marked,
            className: "question-q a-text"
          })));
        } else {
          var $$l = 0;
          for (var index in $$obj) {
            $$l++;
            var option = $$obj[index];
            tags.push(React.createElement("li", {
              onClick: toggle.bind(null, option.id),
              key: option.id,
              className: "question-q option"
            }, React.createElement.apply(React, [ "div", {
              className: "question-q checker"
            } ].concat(function() {
              var tags = [];
              isMarked() && (isCorrect(option.id) ? tags.push(React.createElement("span", {
                className: "question-q mark-on-check correct"
              }, React.createElement(Fa, {
                icon: "circle-o"
              }))) : tags.push(React.createElement("span", {
                className: "question-q mark-on-check incorrect"
              }, React.createElement(Fa, {
                icon: "times"
              }))));
              isActive(option.id) ? tags.push(React.createElement("span", {
                className: "question-q check active"
              }, React.createElement(Fa, {
                icon: "check",
                scale: 2
              }))) : tags.push(React.createElement("span", {
                className: "question-q check"
              }, React.createElement(Fa, {
                icon: "check",
                scale: 2
              })));
              return tags;
            }.call(this))), React.createElement("div", {
              dangerouslySetInnerHTML: option.marked,
              className: "question-q a-text"
            })));
          }
        }
        return tags;
      }.call(this)));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "isActive" in locals_for_with ? locals_for_with.isActive : typeof isActive !== "undefined" ? isActive : undefined, "isCorrect" in locals_for_with ? locals_for_with.isCorrect : typeof isCorrect !== "undefined" ? isCorrect : undefined, "isMarked" in locals_for_with ? locals_for_with.isMarked : typeof isMarked !== "undefined" ? isMarked : undefined, "options" in locals_for_with ? locals_for_with.options : typeof options !== "undefined" ? options : undefined, "toggle" in locals_for_with ? locals_for_with.toggle : typeof toggle !== "undefined" ? toggle : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],28:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, Loading, closeSelector, isChecked, isLocked, isOpen, openSelector, qTags, toggleTag) {
      tags.push(React.createElement.apply(React, [ "section", {
        className: "tag-selector tag-selector-body"
      } ].concat(function() {
        var tags = [];
        if (isOpen()) {
          tags.push(React.createElement("h1", {
            className: "tag-selector sub-title"
          }, React.createElement(Fa, {
            icon: "tags"
          }), "タグを選択"));
          tags.push(React.createElement("ul", {
            className: "tag-selector tag-list-body"
          }, function() {
            var tags = [];
            var $$obj = qTags;
            if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
              var tag = $$obj[$index];
              tag.has_question() && tags.push(React.createElement("li", {
                key: tag.id,
                className: "tag-selector tag-list-tag"
              }, React.createElement("label", {}, React.createElement("input", {
                type: "checkbox",
                checked: isChecked(tag.id),
                onChange: toggleTag.bind(null, tag.id),
                disabled: isLocked()
              }), React.createElement("span", {
                className: "name"
              }, tag.display), React.createElement("span", {
                className: "count"
              }, tag.countText))));
            } else {
              var $$l = 0;
              for (var $index in $$obj) {
                $$l++;
                var tag = $$obj[$index];
                tag.has_question() && tags.push(React.createElement("li", {
                  key: tag.id,
                  className: "tag-selector tag-list-tag"
                }, React.createElement("label", {}, React.createElement("input", {
                  type: "checkbox",
                  checked: isChecked(tag.id),
                  onChange: toggleTag.bind(null, tag.id),
                  disabled: isLocked()
                }), React.createElement("span", {
                  className: "name"
                }, tag.display), React.createElement("span", {
                  className: "count"
                }, tag.countText))));
              }
            }
            return tags;
          }.call(this)));
          tags.push(React.createElement("button", {
            onClick: closeSelector,
            className: "tag-selector tag-selector-opner"
          }, React.createElement(Fa, {
            icon: "chevron-up"
          }), "閉じる"));
          isLocked() && tags.push(React.createElement(Loading, {}));
        } else {
          tags.push(React.createElement("h1", {
            className: "tag-selector sub-title"
          }, React.createElement(Fa, {
            icon: "tags"
          }), "選択中のタグ"));
          tags.push(React.createElement("ul", {
            className: "tag-selector tag-list-body"
          }, function() {
            var tags = [];
            var $$obj = qTags;
            if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
              var tag = $$obj[$index];
              tag.has_question() && isChecked(tag.id) && tags.push(React.createElement("li", {
                key: tag.id,
                className: "tag-selector tag-list-tag"
              }, React.createElement(Fa, {
                icon: "tag"
              }), React.createElement("span", {
                className: "name"
              }, tag.display)));
            } else {
              var $$l = 0;
              for (var $index in $$obj) {
                $$l++;
                var tag = $$obj[$index];
                tag.has_question() && isChecked(tag.id) && tags.push(React.createElement("li", {
                  key: tag.id,
                  className: "tag-selector tag-list-tag"
                }, React.createElement(Fa, {
                  icon: "tag"
                }), React.createElement("span", {
                  className: "name"
                }, tag.display)));
              }
            }
            return tags;
          }.call(this)));
          tags.push(React.createElement("button", {
            onClick: openSelector,
            className: "tag-selector tag-selector-opner"
          }, React.createElement(Fa, {
            icon: "chevron-down"
          }), "タグを編集する"));
        }
        return tags;
      }.call(this))));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "Loading" in locals_for_with ? locals_for_with.Loading : typeof Loading !== "undefined" ? Loading : undefined, "closeSelector" in locals_for_with ? locals_for_with.closeSelector : typeof closeSelector !== "undefined" ? closeSelector : undefined, "isChecked" in locals_for_with ? locals_for_with.isChecked : typeof isChecked !== "undefined" ? isChecked : undefined, "isLocked" in locals_for_with ? locals_for_with.isLocked : typeof isLocked !== "undefined" ? isLocked : undefined, "isOpen" in locals_for_with ? locals_for_with.isOpen : typeof isOpen !== "undefined" ? isOpen : undefined, "openSelector" in locals_for_with ? locals_for_with.openSelector : typeof openSelector !== "undefined" ? openSelector : undefined, "qTags" in locals_for_with ? locals_for_with.qTags : typeof qTags !== "undefined" ? qTags : undefined, "toggleTag" in locals_for_with ? locals_for_with.toggleTag : typeof toggleTag !== "undefined" ? toggleTag : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],29:[function(require,module,exports){
var Lang;

module.exports = Lang = {
  portal: "QQAポータル"
};


},{}],30:[function(require,module,exports){
var ApiStriker;

module.exports = ApiStriker = (function() {
  function ApiStriker() {}

  ApiStriker._struck = {};

  ApiStriker.strike = function(linker, forceReload) {
    if (!forceReload && linker.isGet && this._struck[linker.paramsUri]) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return resolve(_this._struck[linker.paramsUri]);
        };
      })(this));
    }
    return (linker.isPost() ? $.ajax({
      url: '/api' + linker.uri,
      type: linker.method,
      dataType: 'json',
      contentType: 'application/json',
      data: JSON.stringify(linker.params)
    }) : $.ajax({
      url: '/api' + linker.uri,
      type: linker.method,
      dataType: 'json',
      data: linker.params
    })).then((function(_this) {
      return function(data, __, xhr) {
        var header;
        header = _this.pickHeaderParameters(xhr);
        if (linker.isGet) {
          _this._struck[linker.paramsUri] = {
            body: data,
            header: header
          };
        }
        return $.Deferred().resolve({
          body: data,
          header: header
        });
      };
    })(this));
  };

  ApiStriker.pickHeaderParameters = function(xhr) {
    var header, names, required;
    header = {};
    required = ['Total-Pages', 'Per-Page', 'Current-Page'];
    names = ['total', 'per', 'page'];
    _.each(required, (function(_this) {
      return function(value, index) {
        return header[names[index]] = xhr.getResponseHeader(value);
      };
    })(this));
    return header;
  };

  return ApiStriker;

})();


},{}],31:[function(require,module,exports){
var Cassette;

module.exports = Cassette = (function() {
  Cassette.root = null;

  function Cassette(component, props) {
    this.component = component;
    this.props = props;
  }

  Cassette.prototype.forPusher = function() {
    return [
      this.component, _.merge(this.props, {
        root: Cassette.root
      })
    ];
  };

  return Cassette;

})();


},{}],32:[function(require,module,exports){
var FromIndex;

module.exports = FromIndex = (function() {
  function FromIndex(uri, page) {
    this.uri = uri;
    this.page = page;
  }

  return FromIndex;

})();


},{}],33:[function(require,module,exports){
var Models;

module.exports = Models = {};

Models.ApiStriker = require('./api-striker');

Models.Cassette = require('./cassette');

Models.FromIndex = require('./from-index');

Models.Linker = require('./linker');

Models.Mark = require('./mark');

Models.Notice = require('./notice');

Models.PageLink = require('./page-link');

Models.Premise = require('./premise');

Models.QuestionState = require('./question-state');

Models.Question = require('./question');

Models.Router = require('./router');

Models.SourceLink = require('./sourceLink');

Models.TagSelectorState = require('./tag-selector-state');

Models.Tag = require('./tag');


},{"./api-striker":30,"./cassette":31,"./from-index":32,"./linker":34,"./mark":35,"./notice":36,"./page-link":37,"./premise":38,"./question":40,"./question-state":39,"./router":41,"./sourceLink":42,"./tag":44,"./tag-selector-state":43}],34:[function(require,module,exports){
var Linker;

module.exports = Linker = (function() {
  function Linker(method, uri1, params1) {
    var key, value;
    this.method = method;
    this.uri = uri1;
    this.params = params1;
    this._replacePlaceholder();
    this.key = this.uri + '::' + ((function() {
      var ref, results;
      ref = this.params;
      results = [];
      for (key in ref) {
        value = ref[key];
        results.push(key + ":" + value);
      }
      return results;
    }).call(this)).join('::');
    this.paramsUri = this.isGet && this.params ? this.uri + '?' + ((function() {
      var ref, results;
      ref = this.params;
      results = [];
      for (key in ref) {
        value = ref[key];
        results.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
      }
      return results;
    }).call(this)).join('&') : this.uri;
  }

  Linker.prototype._replacePlaceholder = function() {
    var results;
    results = [];
    while (this.uri.match(/(:([0-9_a-z]+))/)) {
      this.uri = this.uri.replace(RegExp.$1, this.params[RegExp.$2] || '-');
      results.push(delete this.params[RegExp.$2]);
    }
    return results;
  };

  Linker.prototype.isGet = function() {
    return this.method === 'get';
  };

  Linker.prototype.isPost = function() {
    return this.method === 'post';
  };

  Linker["delete"] = function(uri, params) {
    return new this('delete', uri, params);
  };

  Linker.get = function(uri, params) {
    return new this('get', uri, params);
  };

  Linker.patch = function(uri, params) {
    return new this('patch', uri, params);
  };

  Linker.post = function(uri, params) {
    return new this('post', uri, params);
  };

  Linker.put = function(uri, params) {
    return new this('put', uri, params);
  };

  return Linker;

})();


},{}],35:[function(require,module,exports){
var Mark;

module.exports = Mark = (function() {
  function Mark(mark1, options) {
    this.mark = mark1;
    this.options = options;
    this.resultText = Mark.detectResultText(this);
    this.answers = Mark.arralize(this.mark.correct_answer);
    this.correctAnswer = {
      __html: this.options.length ? _.map(this.answers, (function(_this) {
        return function(id) {
          return _.find(_this.options, function(option) {
            return option.id === id;
          }).marked.__html;
        };
      })(this)).join('<br>\n\n') : this.mark.correct_answer
    };
  }

  Mark.prototype.isCorrect = function() {
    return this.mark.mark;
  };

  Mark.arralize = function(value) {
    if (_.isArray(value)) {
      return value;
    } else {
      return [value];
    }
  };

  Mark.detectResultText = function(mark) {
    if (mark.isCorrect()) {
      return '正解!!';
    } else {
      return '不正解';
    }
  };

  return Mark;

})();


},{}],36:[function(require,module,exports){
var Notice;

module.exports = Notice = (function() {
  function Notice(type, title1, message1) {
    this.type = type;
    this.title = title1;
    this.message = message1;
  }

  Notice.danger = Notice.red = function(title, message) {
    return new this('danger', title, message);
  };

  Notice.success = Notice.green = function(title, message) {
    return new this('success', title, message);
  };

  Notice.information = Notice.yellow = function(title, message) {
    return new this('info', title, message);
  };

  Notice.primary = Notice.blue = function(title, message) {
    return new this('primary', title, message);
  };

  return Notice;

})();


},{}],37:[function(require,module,exports){
var PageLink;

module.exports = PageLink = (function() {
  function PageLink() {}

  return PageLink;

})();


},{}],38:[function(require,module,exports){
var Premise;

module.exports = Premise = (function() {
  function Premise(obj) {
    this.id = obj.id;
    this.text = obj.text || '';
    this.marked = {
      __html: marked(this.text)
    };
  }

  return Premise;

})();


},{}],39:[function(require,module,exports){
var QuestionState;

module.exports = QuestionState = (function() {
  function QuestionState() {}

  QuestionState.LOADING = 'loading';

  QuestionState.ASKING = 'asking';

  QuestionState.ASKED = 'asked';

  QuestionState.SUBMITTING = 'submitting';

  QuestionState.MARKED = 'marked';

  return QuestionState;

})();


},{}],40:[function(require,module,exports){
var Question;

module.exports = Question = (function() {
  function Question(obj) {
    this.id = obj.id;
    this.way = obj.way || '';
    this.text = obj.text || '';
    this.options = _.map(obj.options || [], (function(_this) {
      return function(option) {
        return {
          id: option.id,
          marked: _this.isInOrder() ? {
            __html: Question.trim(marked(option.text))
          } : {
            __html: marked(option.text)
          }
        };
      };
    })(this));
    this.answersNumber = obj.answers_number || -1;
    this.sourceLinkId = obj.source_link_id;
    this.premiseId = obj.premise_id;
    this.marked = {
      __html: marked(this.text)
    };
    this.description = Question.trim(this.marked.__html);
    this.wayText = Question.detectWayText(this);
    this.pleaseText = Question.detectPleaseText(this);
    this.index = obj.index;
    this.linker = App.Linker.get(App.Path.q, {
      id: this.id
    });
    this.uri = this.linker.paramsUri;
    this.children = obj.children ? _.map(obj.children, function(child, index) {
      child.index = index;
      return new Question(child);
    }) : void 0;
  }

  Question.prototype.hasChildren = function() {
    return this.children && this.children.length !== 0;
  };

  Question.prototype.hasSource = function() {
    return this.sourceLinkId !== null && this.sourceLinkId !== void 0;
  };

  Question.prototype.hasPremise = function() {
    return this.premiseId !== null && this.premiseId !== void 0;
  };

  Question.prototype.isMultipleQuestions = function() {
    return this.way === 'multiple_questions';
  };

  Question.prototype.isSingleChoice = function() {
    return this.way === 'single_choice';
  };

  Question.prototype.isMultipleChoices = function() {
    return this.way === 'multiple_choices';
  };

  Question.prototype.isFreeText = function() {
    return this.way === 'free_text';
  };

  Question.prototype.isInOrder = function() {
    return this.way === 'in_order';
  };

  Question.prototype.isOx = function() {
    return this.way === 'ox';
  };

  Question.trim = function(html) {
    return html.replace(/<.*?>/igm, '');
  };

  Question.detectPleaseText = function(q) {
    switch (false) {
      case !q.isSingleChoice():
        return 'ひとつ選んでください';
      case !q.isMultipleChoices():
        return '適切なものをすべて選んでください';
      case !q.isFreeText():
        return '答えを入力してください';
      case !q.isInOrder():
        return 'それぞれに対応するものを選んでください';
      case !q.isOx():
        return 'いずれかを選んでください';
      case !q.isMultipleQuestions():
        return 'すべての設問に回答してください';
      default:
        return '';
    }
  };

  Question.detectWayText = function(q) {
    switch (false) {
      case !q.isSingleChoice():
        return '一つだけ選択';
      case !q.isMultipleChoices():
        return '複数選択';
      case !q.isFreeText():
        return 'テキスト入力';
      case !q.isInOrder():
        return '順に並べる';
      case !q.isOx():
        return 'ox問題';
      case !q.isMultipleQuestions():
        return '複数の設問';
      default:
        return '';
    }
  };

  return Question;

})();


},{}],41:[function(require,module,exports){
var Router;

module.exports = Router = (function() {
  function Router() {
    this._map = {};
    this._mapped = {};
    this._normalized = {};
  }

  Router.prototype.add = function(url, app) {
    var i, name, normalized, now, ref;
    if (this._find(url)) {
      return false;
    }
    normalized = this._normalize(url);
    now = this._map;
    ref = normalized[0].split('/');
    for (i in ref) {
      name = ref[i];
      if (name === '') {
        continue;
      }
      if (now[name] == null) {
        now[name] = {};
      }
      now = now[name];
    }
    now._app = app;
    now._parameters = normalized[1].split(':');
    return this._mapped[normalized[0]] = true;
  };

  Router.prototype.execute = function(url) {
    var i, name, now, params, ref, ref1, store;
    store = [];
    now = this._map;
    ref = this._strip(url).split('/');
    for (i in ref) {
      name = ref[i];
      if (now[name]) {
        now = now[name];
      } else if (now[':']) {
        store.push(name);
        now = now[':'];
      }
    }
    params = {};
    ref1 = now._parameters;
    for (i in ref1) {
      name = ref1[i];
      params[name] = store[i];
    }
    return now._app(params);
  };

  Router.prototype._find = function(url) {
    var normalized;
    normalized = this._normalize(url);
    return this._mapped[normalized[0]];
  };

  Router.prototype._is_include_placeholder = function(url) {
    return url.match(/:[a-z_0-9]+/) != null;
  };

  Router.prototype._normalize = function(url) {
    if (this._normalized[url]) {
      return this._normalized[url];
    }
    if (!this._is_include_placeholder(url)) {
      return this._normalized[url] = [this._strip(url), ''];
    }
    return this._normalized[url] = this._pickHolder(url, []);
  };

  Router.prototype._pickHolder = function(url, holders) {
    var result;
    result = url.match(/(:[a-z_0-9]+)/);
    if (!result) {
      return [this._strip(url), holders.join(':')];
    }
    return this._pickHolder(url.replace(result[1], ':'), holders.concat(result[1].replace(':', '')));
  };

  Router.prototype._strip = function(url) {
    return url.replace(/\/$/ig, '').replace(/.+?:\/\/(.+?)\//, '/').replace(/\?.*/, '');
  };

  return Router;

})();


},{}],42:[function(require,module,exports){
var SourceLink;

module.exports = SourceLink = (function() {
  function SourceLink(obj) {
    this.id = obj.id;
    this.display = obj.display;
    this.url = obj.url;
  }

  return SourceLink;

})();


},{}],43:[function(require,module,exports){
var TagSelectorState;

module.exports = TagSelectorState = (function() {
  function TagSelectorState() {}

  TagSelectorState.TOGGLED = 'question loading';

  TagSelectorState.LOADING = 'loading tag';

  TagSelectorState.LOADED = 'loaded';

  return TagSelectorState;

})();


},{}],44:[function(require,module,exports){
var Tag;

module.exports = Tag = (function() {
  function Tag(obj) {
    this.id = obj.id;
    this.display = obj.display;
    this.count = obj.count;
    this.countText = "(" + this.count + ")";
    this.linker = App.Linker.get(App.Path.taggedIndex, {
      tags: this.id
    });
    this.uri = this.linker.paramsUri;
  }

  Tag.prototype.has_question = function() {
    return this.count > 0;
  };

  return Tag;

})();


},{}],45:[function(require,module,exports){
var Path;

module.exports = Path = {
  portal: '/',
  q: '/q/:id',
  qIndex: '/q',
  qTags: '/q/:id/tag',
  mark: '/marks',
  tags: '/tags',
  taggedTags: '/tags/tagged/:tags',
  taggedIndex: '/q/tagged/:tags',
  sources: '/src',
  source: '/src/:id',
  premise: '/premises/:id',
  render: function(path, values) {
    return _.reduce(values, function(a, value, key) {
      return a.replace("%{" + key + "}", value);
    }, Path[path]);
  }
};


},{}],46:[function(require,module,exports){
var Util,
  slice = [].slice;

module.exports = Util = {

  /*
  React.createElementを変形
  
  ce(object)
    object.$cn -> className
    object.$el -> タグ名
    object.$inc -> 末尾引数、あるいは可変長引数として渡される値
    object -> 引数はそのままpropsとして渡される
  
  普通
  
     ce {$el: 'div', $cn: 'short', $inc: 'text'}
  
     <div className="short">
       text
     </div>
  
  入れ子
  
     Item = ReactClass
       render: ->
         ce {$el: 'li', $inc: 'item'}
  
     ce {$el: 'ul', $inc: [Item, Item]}
  
     <ul>
       {Item}
       {Item}
     </ul>
   */
  ce: function(object) {
    var child, children, i, len, results;
    switch (true) {
      case object != null ? object.hasOwnProperty('$el') : void 0:
        object.className = object.$cn;
        children = this.ce(object.$inc);
        if (_.isArray(children)) {
          return React.createElement.apply(React, [object.$el, object].concat(slice.call(children)));
        } else {
          return React.createElement(object.$el, object, children);
        }
        break;
      case _.isArray(object):
        results = [];
        for (i = 0, len = object.length; i < len; i++) {
          child = object[i];
          results.push(this.ce(child));
        }
        return results;
        break;
      case _.isString(object):
        return object;
      case _.isNumber(object):
        return object;
      case _.isObject(object):
        return object;
      default:
        return '';
    }
  }
};


},{}],47:[function(require,module,exports){
var Fa;

module.exports = Fa = React.createClass({
  render: function() {
    var classes;
    classes = ['fa'];
    classes.push("fa-" + this.props.icon);
    if (this.props.scale != null) {
      classes.push("fa-" + this.props.scale + "x");
    }
    if ((this.props.fixedWidth == null) || this.props.fixedWidth === false) {
      classes.push('fa-fw');
    }
    if (this.props.list) {
      classes.push('fa-li');
    }
    if (this.props.border) {
      classes.push('fa-border');
    }
    if (this.props.pull != null) {
      classes.push("fa-pull-" + this.props.pull);
    }
    if (this.props.animation != null) {
      classes.push("fa-" + this.props.animation);
    }
    if (this.props.rotate != null) {
      classes.push("fa-rotate-" + this.props.rotate);
    }
    if (this.props.flip != null) {
      classes.push("fa-flip-" + this.props.animation);
    }
    return React.createElement('i', {
      className: classes.join(' ')
    });
  }
});


},{}],48:[function(require,module,exports){
var FreeText;

module.exports = FreeText = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.Q.freeText({
      Fa: App.View.Fa,
      options: this.props.options,
      answers: this.props.answers,
      isMarked: (function(_this) {
        return function() {
          return _this.props.result != null;
        };
      })(this),
      input: (function(_this) {
        return function(e) {
          return _this.dispatch('question:answer', e.target.value, _this.props.question.index);
        };
      })(this)
    });
  }
});


},{}],49:[function(require,module,exports){
var SingleChoice;

module.exports = SingleChoice = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    var q;
    q = this.props.question;
    return App.JSX.Q.inOrder({
      Fa: App.View.Fa,
      options: q.options,
      answersNumber: q.answersNumber,
      answers: this.props.answers,
      isActive: (function(_this) {
        return function(id) {
          return _this.props.answers === id;
        };
      })(this),
      isMarked: (function(_this) {
        return function() {
          return _this.props.result != null;
        };
      })(this),
      isCorrect: (function(_this) {
        return function(index, id) {
          return +_this.props.answers[index] === _this.props.result.answers[index];
        };
      })(this),
      select: (function(_this) {
        return function(e) {
          var new_answers, ref;
          new_answers = ((ref = _this.props.answers) != null ? ref.concat() : void 0) || [];
          new_answers[e.target.name] = e.target.value;
          return _this.dispatch('question:answer', new_answers, _this.props.question.index);
        };
      })(this),
      selected: (function(_this) {
        return function(index) {
          var ref, ref1;
          return ((ref = _this.props.answers) != null ? (ref1 = ref[index]) != null ? ref1.toString() : void 0 : void 0) || '';
        };
      })(this)
    });
  }
});


},{}],50:[function(require,module,exports){
var Views;

module.exports = Views = {};

Views.Fa = require('./fa');

Views.FreeText = require('./free-text');

Views.InOrder = require('./in-order');

Views.Loading = require('./loading');

Views.MultipleChoices = require('./multiple_choices');

Views.MultipleQuestions = require('./multiple_questions');

Views.Ox = require('./ox');

Views.Paginator = require('./paginator');

Views.SingleChoice = require('./single_choice');

Views.TagSelector = require('./tag-selector');


},{"./fa":47,"./free-text":48,"./in-order":49,"./loading":51,"./multiple_choices":52,"./multiple_questions":53,"./ox":54,"./paginator":55,"./single_choice":56,"./tag-selector":57}],51:[function(require,module,exports){
var Loading;

module.exports = Loading = React.createClass({
  render: function() {
    return App.JSX.loading({
      Fa: App.View.Fa
    });
  }
});


},{}],52:[function(require,module,exports){
var SingleChoice;

module.exports = SingleChoice = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.Q.singleChoice({
      Fa: App.View.Fa,
      options: this.props.options,
      isActive: (function(_this) {
        return function(id) {
          return _.include(_this.props.answers, id);
        };
      })(this),
      isMarked: (function(_this) {
        return function() {
          return _this.props.result != null;
        };
      })(this),
      isCorrect: (function(_this) {
        return function(id) {
          return _.include(_this.props.result.answers, id);
        };
      })(this),
      toggle: (function(_this) {
        return function(id) {
          var new_answers, ref;
          new_answers = ((ref = _this.props.answers) != null ? ref.concat() : void 0) || [];
          if (_.include(new_answers, id)) {
            new_answers = _.reject(new_answers, function(n) {
              return n === id;
            });
          } else {
            new_answers.push(id);
          }
          return _this.dispatch('question:answer', new_answers, _this.props.question.index);
        };
      })(this)
    });
  }
});


},{}],53:[function(require,module,exports){
var MultipleQuestions;

module.exports = MultipleQuestions = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    var q;
    q = this.props.question;
    return App.JSX.Q.multipleQuestions({
      Fa: App.View.Fa,
      SingleChoice: App.View.SingleChoice,
      MultipleChoices: App.View.MultipleChoices,
      FreeText: App.View.FreeText,
      Ox: App.View.Ox,
      InOrder: App.View.InOrder,
      QuestionState: App.QuestionState,
      Loading: App.View.Loading,
      children: this.props.question.children,
      answers: this.props.answers || [],
      result: this.props.result || []
    });
  }
});


},{}],54:[function(require,module,exports){
var Ox;

module.exports = Ox = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.Q.ox({
      Fa: App.View.Fa,
      options: this.props.options,
      isFalse: (function(_this) {
        return function() {
          if (_this.props.answers === 0) {
            return 'active';
          }
        };
      })(this),
      isTrue: (function(_this) {
        return function() {
          if (_this.props.answers === 1) {
            return 'active';
          }
        };
      })(this),
      isMarked: (function(_this) {
        return function() {
          return _this.props.result != null;
        };
      })(this),
      toggle: (function(_this) {
        return function(boolean) {
          return _this.dispatch('question:answer', boolean, _this.props.question.index);
        };
      })(this)
    });
  }
});


},{}],55:[function(require,module,exports){
var Paginator;

module.exports = Paginator = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.paginator({
      links: this.links(),
      paginate: (function(_this) {
        return function(page) {
          return _this.dispatch('question:index:paginate', page);
        };
      })(this)
    });
  },
  links: function() {
    var i, ref, results;
    return _.map((function() {
      results = [];
      for (var i = 1, ref = this.props.header.total; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this), (function(_this) {
      return function(n) {
        return {
          isCurrent: +_this.props.header.page === n,
          page: n
        };
      };
    })(this));
  }
});


},{}],56:[function(require,module,exports){
var SingleChoice;

module.exports = SingleChoice = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.Q.singleChoice({
      Fa: App.View.Fa,
      options: this.props.options,
      isActive: (function(_this) {
        return function(id) {
          return _this.props.answers === id;
        };
      })(this),
      isCorrect: (function(_this) {
        return function(id) {
          return _this.props.result.answers[0] === id;
        };
      })(this),
      isMarked: (function(_this) {
        return function() {
          return _this.props.result != null;
        };
      })(this),
      toggle: (function(_this) {
        return function(index) {
          return _this.dispatch('question:answer', index, _this.props.question.index);
        };
      })(this)
    });
  }
});


},{}],57:[function(require,module,exports){
var TagSelector;

module.exports = TagSelector = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.Q.tagSelector({
      Fa: App.View.Fa,
      qTags: this.props.qTags,
      Loading: App.View.Loading,
      toggleTag: (function(_this) {
        return function(id) {
          return _this.dispatch('question:tag:toggle', id);
        };
      })(this),
      isChecked: (function(_this) {
        return function(id) {
          return _.include(_this.props.selectedTags, id);
        };
      })(this),
      isLocked: (function(_this) {
        return function() {
          return _this.props.tagSelectorState !== App.TagSelectorState.LOADED;
        };
      })(this),
      isOpen: (function(_this) {
        return function() {
          return _this.props.selectorOpened;
        };
      })(this),
      openSelector: (function(_this) {
        return function() {
          return _this.dispatch('question:tagSelector:toggle');
        };
      })(this),
      closeSelector: (function(_this) {
        return function() {
          return _this.dispatch('question:tagSelector:toggle');
        };
      })(this)
    });
  }
});


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
