(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
var App;

console.log('loading app');

module.exports = App = {};

if (typeof window !== "undefined" && window !== null) {
  window.App = App;
} else {
  global.App = App;
}

console.log('loading module');

_.merge(App, require('./models'));

App.JSX = require('./jsx/jsx');

App.Util = require('./util');

App.View = require('./views');

App.Lang = require('./lang');

App.Path = require('./path');

App.Constant = require('./constant');

App.BaseContext = require('./contexts/base-context');

_.merge(App, require('./contexts'));

console.log('loaded app', App);

App.start = function(node) {
  var router;
  router = new Arda.Router(Arda.DefaultLayout, node);
  return router.pushContext(App.MainContext);
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./constant":2,"./contexts":5,"./contexts/base-context":3,"./jsx/jsx":15,"./lang":23,"./models":26,"./path":33,"./util":34,"./views":37}],2:[function(require,module,exports){
var Constant;

module.exports = Constant = {
  classes: {
    challengeResultBox: 'col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2',
    textInput: 'form-control size-h3',
    submitButton: 'btn btn-lg btn-success size-h4 wide',
    blueButton: 'btn btn-md btn-primary size-h4',
    greenButton: 'btn btn-md btn-success size-h4',
    indexTable: 'table table-striped table-condensed table-bordered',
    editButton: 'btn btn-md btn-primary size-h6',
    smallBox: 'col-sm-6 col-sm-offset-3 col-md-4 col-md-offset-4',
    workbookChallengeBox: 'col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2',
    questionBox: 'col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2',
    join: function(base, added) {
      return [Constant.classes[base], added].join(' ');
    }
  },
  render: {
    levelLabel: function(value) {
      return _.find(Constant.levels, (function(_this) {
        return function(obj) {
          return obj.value === value;
        };
      })(this)).label;
    },
    evalType: function(value) {
      return _.find(Constant.evalTypes, (function(_this) {
        return function(obj) {
          return obj.value === value;
        };
      })(this)).label;
    },
    answerType: function(value) {
      return _.find(Constant.answerTypes, (function(_this) {
        return function(obj) {
          return obj.value === value;
        };
      })(this)).label;
    }
  },
  swal: {
    "delete": {
      title: "削除します",
      text: "この処理は取り消すことができません",
      type: "warning",
      showCancelButton: true,
      confirmButtonColor: "#e51c23",
      confirmButtonText: "削除する",
      closeOnConfirm: true,
      cancelButtonText: 'キャンセル',
      allowOutsideClick: true
    }
  },
  codeMirror: {
    configuration: {
      lineNumbers: true,
      mode: "xml",
      htmlMode: true,
      lineWrapping: true
    }
  }
};


},{}],3:[function(require,module,exports){
var BaseContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = BaseContext = (function(superClass) {
  extend(BaseContext, superClass);

  function BaseContext() {
    return BaseContext.__super__.constructor.apply(this, arguments);
  }

  BaseContext.prototype.delegate = function(subscribe) {
    BaseContext.__super__.delegate.apply(this, arguments);
    subscribe('context:created', function() {
      return this.root = this.props.root;
    });
    return subscribe('inform:rendered', function() {
      return this.root.emit('inform:rendered');
    });
  };

  BaseContext.prototype.strikeApi = function(linker) {
    return this.root.strikeApi(linker);
  };

  return BaseContext;

})(Arda.Context);


},{}],4:[function(require,module,exports){
var BlankContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = BlankContext = (function(superClass) {
  extend(BlankContext, superClass);

  function BlankContext() {
    return BlankContext.__super__.constructor.apply(this, arguments);
  }

  BlankContext.prototype.initState = function(props) {
    return props;
  };

  BlankContext.prototype.component = React.createClass({
    render: function() {
      return React.createElement('div.container', {}, "Now loading " + this.props.name + "...");
    }
  });

  return BlankContext;

})(Arda.Context);


},{}],5:[function(require,module,exports){
var Contexts;

module.exports = Contexts = {};

Contexts.BaseContext = require('./base-context');

Contexts.BlankContext = require('./blank-context');

Contexts.MainContext = require('./main-context');

Contexts.Menu = require('./menu');

Contexts.Notifier = require('./notifier');

Contexts.PortalContext = require('./portal-context');

Contexts.Q = require('./q');


},{"./base-context":3,"./blank-context":4,"./main-context":6,"./menu":8,"./notifier":10,"./portal-context":11,"./q":13}],6:[function(require,module,exports){
var MainContext,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = MainContext = (function(superClass) {
  var _feature, _history, _now;

  extend(MainContext, superClass);

  function MainContext() {
    this._forward = bind(this._forward, this);
    this._backward = bind(this._backward, this);
    return MainContext.__super__.constructor.apply(this, arguments);
  }

  MainContext.prototype.component = React.createClass({
    mixins: [Arda.mixin],
    render: function() {
      return App.JSX.main();
    },
    componentDidMount: function() {
      var routers;
      routers = {
        content: new Arda.Router(Arda.DefaultLayout, React.findDOMNode(this.refs.content)),
        notifier: new Arda.Router(Arda.DefaultLayout, React.findDOMNode(this.refs.notifier)),
        menu: new Arda.Router(Arda.DefaultLayout, React.findDOMNode(this.refs.menu))
      };
      console.log('Display mounted', routers);
      return this.dispatch('display:initialized', routers);
    }
  });

  _history = [];

  _feature = [];

  _now = 0;

  MainContext.prototype.initState = function(props) {
    return props;
  };

  MainContext.prototype.expandComponentProps = function(props, state) {
    return props;
  };

  MainContext.prototype.delegate = function(subscribe) {
    MainContext.__super__.delegate.apply(this, arguments);
    subscribe('context:created', function() {
      this._initializeValuables();
      this._initializeRouter();
      return this._initializeEventWatcher();
    });
    subscribe('display:initialized', this._initializeDisplay);
    subscribe('scene:replace', this._replaceScene);
    subscribe('notify:success', (function(_this) {
      return function(title, message) {};
    })(this));
    subscribe('notify:fail', (function(_this) {
      return function(title, message) {};
    })(this));
    subscribe('reload', (function(_this) {
      return function() {
        return _this.update(function(state) {
          return state;
        });
      };
    })(this));
    subscribe('question:show', function(q) {
      return this._replaceScene(App.Linker.get(App.Path.q, {
        id: q.id
      }));
    });
    return subscribe('inform:rendered', function(q) {
      return MathJax.Hub.Typeset();
    });
  };

  MainContext.prototype.strikeApi = function(linker, forceReload) {
    return App.ApiStriker.strike(linker, forceReload);
  };

  MainContext.prototype._initializeEventWatcher = function() {
    HistoryWard.startBrutally();
    $(window).on(HistoryWard.BACKWARD, this._backward);
    return $(window).on(HistoryWard.FORWARD, this._forward);
  };

  MainContext.prototype._initializeDisplay = function(routers) {
    this.content = routers.content;
    this.notifier = routers.notifier;
    this.menu = routers.menu;
    this.content.pushContext(App.BlankContext, {
      name: 'Content'
    }).done((function(_this) {
      return function() {
        return _this._initializeScene();
      };
    })(this));
    this.notifier.pushContext(App.BlankContext, {
      name: 'Notifier'
    }).done((function(_this) {
      return function() {
        return _this.notifier.replaceContext(App.Notifier.GodContext, {
          root: _this
        });
      };
    })(this));
    return this.menu.pushContext(App.BlankContext, {
      name: 'Menu'
    }).done((function(_this) {
      return function() {
        return _this.menu.replaceContext(App.Menu.GlobalContext, {
          root: _this
        });
      };
    })(this));
  };

  MainContext.prototype._initializeRouter = function() {
    App.Cassette.root = this;
    this.router = new App.Router();
    this.router.add('/', function(params) {
      return new App.Cassette(App.Q.IndexContext, params);
    });
    this.router.add('/q', function(params) {
      return new App.Cassette(App.Q.IndexContext, params);
    });
    return this.router.add('/q/:id', function(params) {
      return new App.Cassette(App.Q.QuestionContext, params);
    });
  };

  MainContext.prototype._initializeScene = function() {
    var ref;
    return (ref = this.content).pushContext.apply(ref, this._detectCassette().forPusher());
  };

  MainContext.prototype._initializeValuables = function() {};

  MainContext.prototype._backward = function(e) {
    var ref;
    return (ref = this.content).pushContext.apply(ref, this._detectCassette().forPusher());
  };

  MainContext.prototype._forward = function(e) {
    var ref;
    return (ref = this.content).pushContext.apply(ref, this._detectCassette().forPusher());
  };

  MainContext.prototype._detectCassette = function() {
    return this.router.execute(this._strippedPath());
  };

  MainContext.prototype._pickHeaderParameters = function(xhr) {
    var required;
    required = ['Total-Pages', 'Per-Page', 'Current-Page', 'Paginate-Path', 'Access-Level'];
    return _.reduce(required, function(a, req) {
      console.log(req);
      a[req] = xhr.getResponseHeader(req);
      return a;
    }, {});
  };

  MainContext.prototype._strippedPath = function() {
    return location.href.replace(/.+?:\/\/(.+?)\//, '/');
  };

  MainContext.prototype._isCrossDomain = function(url) {
    var e, error, originAnchor, urlAnchor;
    originAnchor = document.createElement("a");
    originAnchor.href = location.href;
    urlAnchor = document.createElement("a");
    try {
      urlAnchor.href = url;
      urlAnchor.href = urlAnchor.href;
      return !urlAnchor.protocol || !urlAnchor.host || (originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host);
    } catch (error) {
      e = error;
      return true;
    }
  };

  MainContext.prototype._replaceScene = function(linker) {
    var ref;
    history.pushState({}, null, linker.uri);
    return (ref = this.content).pushContext.apply(ref, this._detectCassette().forPusher()).then((function(_this) {
      return function() {
        return MathJax.Hub.Typeset();
      };
    })(this));
  };

  return MainContext;

})(Arda.Context);


},{}],7:[function(require,module,exports){
var GlobalContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = GlobalContext = (function(superClass) {
  extend(GlobalContext, superClass);

  function GlobalContext() {
    return GlobalContext.__super__.constructor.apply(this, arguments);
  }

  GlobalContext.prototype.initState = function(props) {
    return props;
  };

  GlobalContext.prototype.component = React.createClass({
    render: function() {
      return React.createElement('div', {});
    }
  });

  return GlobalContext;

})(App.BaseContext);


},{}],8:[function(require,module,exports){
var Menu;

module.exports = Menu = {};

Menu.GlobalContext = require('./global-context');


},{"./global-context":7}],9:[function(require,module,exports){
var GodContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = GodContext = (function(superClass) {
  extend(GodContext, superClass);

  function GodContext() {
    return GodContext.__super__.constructor.apply(this, arguments);
  }

  GodContext.prototype.initState = function(props) {
    return props;
  };

  GodContext.prototype.component = React.createClass({
    render: function() {
      return React.createElement('div', {});
    }
  });

  return GodContext;

})(App.BaseContext);


},{}],10:[function(require,module,exports){
var Notifier;

module.exports = Notifier = {};

Notifier.GodContext = require('./god-context');


},{"./god-context":9}],11:[function(require,module,exports){
var BlankContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = BlankContext = (function(superClass) {
  var Portal;

  extend(BlankContext, superClass);

  function BlankContext() {
    return BlankContext.__super__.constructor.apply(this, arguments);
  }

  BlankContext.prototype.component = module.exports = Portal = React.createClass({
    mixins: [Arda.mixin],
    render: function() {
      return App.JSX.portal();
    },
    componentDidMount: function() {
      return console.log(this);
    }
  });

  BlankContext.prototype.initState = function(props) {
    return props;
  };

  return BlankContext;

})(App.BaseContext);


},{}],12:[function(require,module,exports){
var IndexContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = IndexContext = (function(superClass) {
  extend(IndexContext, superClass);

  function IndexContext() {
    return IndexContext.__super__.constructor.apply(this, arguments);
  }

  IndexContext.prototype.initState = function(props) {
    return {
      index: []
    };
  };

  IndexContext.prototype.expandComponentProps = function(props, state) {
    return state;
  };

  IndexContext.prototype.component = React.createClass({
    mixins: [Arda.mixin],
    render: function() {
      var q;
      console.log(this.props);
      return App.JSX.Q.indexPage({
        index: (function() {
          var i, len, ref, results;
          ref = this.props.index;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            q = ref[i];
            results.push(new App.Question(q));
          }
          return results;
        }).call(this),
        showQuestion: (function(_this) {
          return function(e) {
            return _this.dispatch('question:show', e);
          };
        })(this)
      });
    },
    componentDidMount: function() {},
    componentDidUpdate: function() {
      return this.dispatch('inform:rendered');
    }
  });

  IndexContext.prototype.delegate = function(subscribe) {
    IndexContext.__super__.delegate.apply(this, arguments);
    subscribe('context:started', function() {
      return this._initializeIndex();
    });
    return subscribe('question:show', function(q) {
      return this.root.emit('question:show', q);
    });
  };

  IndexContext.prototype._initializeIndex = function() {
    return this.strikeApi(App.Linker.get(App.Path.qIndex, {
      par: 100
    })).then((function(_this) {
      return function(data) {
        console.log(data);
        return _this.update(function(s) {
          return {
            index: data
          };
        });
      };
    })(this));
  };

  return IndexContext;

})(App.BaseContext);


},{}],13:[function(require,module,exports){
var Q;

module.exports = Q = {};

Q.IndexContext = require('./index-context');

Q.QuestionContext = require('./question-context');


},{"./index-context":12,"./question-context":14}],14:[function(require,module,exports){
var QuestionContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = QuestionContext = (function(superClass) {
  extend(QuestionContext, superClass);

  function QuestionContext() {
    return QuestionContext.__super__.constructor.apply(this, arguments);
  }

  QuestionContext.prototype.component = React.createClass({
    mixins: [Arda.mixin],
    render: function() {
      console.log(this.props);
      if (this.props.state === App.QuestionState.LOADING) {
        return React.createElement('div', {});
      }
      return App.JSX.Q.question({
        Fa: App.View.Fa,
        SingleChoice: App.View.SingleChoice,
        MultipleChoices: App.View.MultipleChoices,
        FreeText: App.View.FreeText,
        Ox: App.View.Ox,
        QuestionState: App.QuestionState,
        state: this.props.state,
        question: this.props.question,
        answers: this.props.answers,
        result: this.props.result,
        submit: (function(_this) {
          return function() {
            return _this.dispatch('question:submit');
          };
        })(this)
      });
    },
    componentDidMount: function() {},
    componentDidUpdate: function() {
      return this.dispatch('inform:rendered');
    }
  });

  QuestionContext.prototype.initState = function(props) {
    return {
      id: props.id,
      question: null,
      answers: null,
      state: App.QuestionState.LOADING,
      result: null
    };
  };

  QuestionContext.prototype.expandComponentProps = function(props, state) {
    return state;
  };

  QuestionContext.prototype.is_answerable = function() {
    return this.state.state === App.QuestionState.ASKING || this.state.state === App.QuestionState.ASKED;
  };

  QuestionContext.prototype.is_submittable = function() {
    return this.state.state === App.QuestionState.ASKED;
  };

  QuestionContext.prototype.delegate = function(subscribe) {
    QuestionContext.__super__.delegate.apply(this, arguments);
    subscribe('context:started', function() {
      return this._initializeQuestion();
    });
    subscribe('question:show', function(q) {
      return this.root.emit('question:show', q);
    });
    subscribe('question:answer', function(answer) {
      if (!this.is_answerable()) {
        return;
      }
      return this.update(function(s) {
        if (s.state === App.QuestionState.ASKING) {
          s.state = App.QuestionState.ASKED;
        }
        s.answers = answer;
        return s;
      });
    });
    return subscribe('question:submit', function() {
      if (!this.is_submittable()) {
        return;
      }
      this.update(function(s) {
        return _.merge(s, {
          state: App.QuestionState.SUBMITTING
        });
      });
      return this.strikeApi(App.Linker.post(App.Path.mark, {
        id: this.state.question.id,
        answers: this.state.answers
      })).then((function(_this) {
        return function(data) {
          return _this.update(function(s) {
            return _.merge(s, {
              result: new App.Mark(data, s.question.options),
              state: App.QuestionState.MARKED
            });
          });
        };
      })(this));
    });
  };

  QuestionContext.prototype._initializeQuestion = function() {
    return this.strikeApi(App.Linker.get(App.Path.q, {
      id: this.props.id
    })).then((function(_this) {
      return function(data) {
        return _this.update(function(s) {
          return _.merge(s, {
            question: new App.Question(data),
            state: App.QuestionState.ASKING
          });
        });
      };
    })(this));
  };

  return QuestionContext;

})(App.BaseContext);


},{}],15:[function(require,module,exports){
var JSX;

module.exports = JSX = {
  main: require('./main.js'),
  portal: require('./portal.js'),
  Q: {
    freeText: require('./q/free-text.js'),
    indexPage: require('./q/index-page.js'),
    ox: require('./q/ox.js'),
    question: require('./q/question.js'),
    singleChoice: require('./q/single-choice.js')
  }
};


},{"./main.js":16,"./portal.js":17,"./q/free-text.js":18,"./q/index-page.js":19,"./q/ox.js":20,"./q/question.js":21,"./q/single-choice.js":22}],16:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    tags.push(React.createElement("article", {
      id: "notifier",
      ref: "notifier"
    }));
    tags.push(React.createElement("article", {
      id: "menu",
      ref: "menu"
    }));
    tags.push(React.createElement("article", {
      id: "content",
      ref: "content"
    }));
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],17:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    tags.push(React.createElement("h1", {}, "Portal"));
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],18:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    tags.push(React.createElement("h1", {}, "free text"));
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],19:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(index, showQuestion) {
      tags.push(React.createElement("section", {
        className: "question-index index"
      }, React.createElement("table", {
        className: "question-index list"
      }, React.createElement("tbody", {}, function() {
        var tags = [];
        var $$obj = index;
        if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
          var question = $$obj[$index];
          tags.push(React.createElement("tr", {}, React.createElement("th", {
            className: "id"
          }, question.id), React.createElement("td", {
            className: "description"
          }, React.createElement("a", {
            onClick: showQuestion.bind(null, question),
            props: question
          }, question.description)), React.createElement("td", {
            className: "way"
          }, question.wayText)));
        } else {
          var $$l = 0;
          for (var $index in $$obj) {
            $$l++;
            var question = $$obj[$index];
            tags.push(React.createElement("tr", {}, React.createElement("th", {
              className: "id"
            }, question.id), React.createElement("td", {
              className: "description"
            }, React.createElement("a", {
              onClick: showQuestion.bind(null, question),
              props: question
            }, question.description)), React.createElement("td", {
              className: "way"
            }, question.wayText)));
          }
        }
        return tags;
      }.call(this)))));
    }).call(this, "index" in locals_for_with ? locals_for_with.index : typeof index !== "undefined" ? index : undefined, "showQuestion" in locals_for_with ? locals_for_with.showQuestion : typeof showQuestion !== "undefined" ? showQuestion : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],20:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, Object, is_false, is_true, toggle) {
      function jade_join_classes(val) {
        return (Array.isArray(val) ? val.map(jade_join_classes) : val && "object" == typeof val ? Object.keys(val).filter(function(key) {
          return val[key];
        }) : [ val ]).filter(function(val) {
          return null != val && "" !== val;
        }).join(" ");
      }
      tags.push(React.createElement("section", {
        className: "question-q ox-control"
      }, React.createElement("div", {
        onClick: toggle.bind(null, 1),
        className: jade_join_classes([ "question-q", "ox-button", "o", is_true() ])
      }, React.createElement(Fa, {
        icon: "circle-o"
      })), React.createElement("div", {
        onClick: toggle.bind(null, 0),
        className: jade_join_classes([ "question-q", "ox-button", "x", is_false() ])
      }, React.createElement(Fa, {
        icon: "times"
      }))));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "Object" in locals_for_with ? locals_for_with.Object : typeof Object !== "undefined" ? Object : undefined, "is_false" in locals_for_with ? locals_for_with.is_false : typeof is_false !== "undefined" ? is_false : undefined, "is_true" in locals_for_with ? locals_for_with.is_true : typeof is_true !== "undefined" ? is_true : undefined, "toggle" in locals_for_with ? locals_for_with.toggle : typeof toggle !== "undefined" ? toggle : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],21:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, FreeText, MultipleChoices, Ox, QuestionState, SingleChoice, answers, question, result, state, submit) {
      tags.push(React.createElement.apply(React, [ "section", {
        className: "question-q body"
      } ].concat(function() {
        var tags = [];
        tags.push(React.createElement("section", {
          className: "question-q text"
        }, React.createElement("h1", {
          className: "question-q q"
        }, React.createElement(Fa, {
          icon: "question-circle"
        }), "問題")));
        tags.push(React.createElement("section", {
          className: "question-q question-area"
        }, React.createElement("div", {
          dangerouslySetInnerHTML: question.marked,
          className: "question-q q-text"
        })));
        tags.push(React.createElement.apply(React, [ "section", {
          className: "question-q answer"
        } ].concat(function() {
          var tags = [];
          tags.push(React.createElement("h1", {
            className: "question-q a"
          }, React.createElement(Fa, {
            icon: "exclamation-circle"
          }), question.pleaseText));
          tags.push(React.createElement("section", {
            className: "question-q answer-area"
          }));
          "free_text" == question.way ? tags.push(React.createElement(FreeText, {
            options: question.options,
            answers: answers,
            result: result
          })) : "ox" == question.way ? tags.push(React.createElement(Ox, {
            options: question.options,
            answers: answers,
            result: result
          })) : "single_choice" == question.way ? tags.push(React.createElement(SingleChoice, {
            options: question.options,
            answers: answers,
            result: result
          })) : "multiple_choices" == question.way ? tags.push(React.createElement(MultipleChoices, {
            options: question.options,
            answers: answers,
            result: result
          })) : "in_order" == question.way;
          return tags;
        }.call(this))));
        state == QuestionState.MARKED ? tags.push(React.createElement("section", {
          className: "question-q result-area"
        }, React.createElement.apply(React, [ "div", {
          className: "question-q mark-area"
        } ].concat(function() {
          var tags = [];
          result.is_correct() ? tags.push(React.createElement("h1", {
            className: "question-q mark correct"
          }, React.createElement(Fa, {
            icon: "thumbs-o-up"
          }), result.resultText)) : tags.push(React.createElement("h1", {
            className: "question-q mark incorrect"
          }, React.createElement(Fa, {
            icon: "hand-stop-o"
          }), result.resultText));
          return tags;
        }.call(this))), React.createElement("h1", {
          className: "question-q correct-answer"
        }, React.createElement(Fa, {
          icon: "graduation-cap"
        }), "正解は..."), React.createElement("div", {
          dangerouslySetInnerHTML: result.correctAnswer,
          className: "question-q answer-area"
        }))) : tags.push(React.createElement.apply(React, [ "section", {
          className: "question-q control"
        } ].concat(function() {
          var tags = [];
          state == QuestionState.ASKING ? tags.push(React.createElement("button", {
            disabled: !0,
            className: "question-q button submit disabled"
          }, React.createElement(Fa, {
            icon: "graduation-cap"
          }), " ", question.pleaseText)) : state == QuestionState.ASKED ? tags.push(React.createElement("button", {
            onClick: submit,
            className: "question-q button submit"
          }, React.createElement(Fa, {
            icon: "graduation-cap"
          }), " ", "正解を確認する")) : state == QuestionState.SUBMITTING && tags.push(React.createElement("button", {
            disabled: !0,
            className: "question-q button submit disabled"
          }, React.createElement(Fa, {
            icon: "spinner",
            animation: "pulse"
          }), " ", "確認中..."));
          return tags;
        }.call(this))));
        return tags;
      }.call(this))));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "FreeText" in locals_for_with ? locals_for_with.FreeText : typeof FreeText !== "undefined" ? FreeText : undefined, "MultipleChoices" in locals_for_with ? locals_for_with.MultipleChoices : typeof MultipleChoices !== "undefined" ? MultipleChoices : undefined, "Ox" in locals_for_with ? locals_for_with.Ox : typeof Ox !== "undefined" ? Ox : undefined, "QuestionState" in locals_for_with ? locals_for_with.QuestionState : typeof QuestionState !== "undefined" ? QuestionState : undefined, "SingleChoice" in locals_for_with ? locals_for_with.SingleChoice : typeof SingleChoice !== "undefined" ? SingleChoice : undefined, "answers" in locals_for_with ? locals_for_with.answers : typeof answers !== "undefined" ? answers : undefined, "question" in locals_for_with ? locals_for_with.question : typeof question !== "undefined" ? question : undefined, "result" in locals_for_with ? locals_for_with.result : typeof result !== "undefined" ? result : undefined, "state" in locals_for_with ? locals_for_with.state : typeof state !== "undefined" ? state : undefined, "submit" in locals_for_with ? locals_for_with.submit : typeof submit !== "undefined" ? submit : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],22:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, is_active, is_correct, is_marked, options, toggle) {
      tags.push(React.createElement("ul", {
        className: "question-q options"
      }, function() {
        var tags = [];
        var $$obj = options;
        if ("number" == typeof $$obj.length) for (var index = 0, $$l = $$obj.length; $$l > index; index++) {
          var option = $$obj[index];
          tags.push(React.createElement("li", {
            onClick: toggle.bind(null, option.id),
            className: "question-q option"
          }, React.createElement.apply(React, [ "div", {
            className: "question-q checker"
          } ].concat(function() {
            var tags = [];
            is_marked() && (is_correct(option.id) ? tags.push(React.createElement("span", {
              className: "question-q mark-on-check correct"
            }, React.createElement(Fa, {
              icon: "circle-o"
            }))) : tags.push(React.createElement("span", {
              className: "question-q mark-on-check incorrect"
            }, React.createElement(Fa, {
              icon: "times"
            }))));
            is_active(option.id) ? tags.push(React.createElement("span", {
              className: "question-q check active"
            }, React.createElement(Fa, {
              icon: "check",
              scale: 2
            }))) : tags.push(React.createElement("span", {
              className: "question-q check"
            }, React.createElement(Fa, {
              icon: "check",
              scale: 2
            })));
            return tags;
          }.call(this))), React.createElement("div", {
            dangerouslySetInnerHTML: option.marked,
            className: "question-q a-text"
          })));
        } else {
          var $$l = 0;
          for (var index in $$obj) {
            $$l++;
            var option = $$obj[index];
            tags.push(React.createElement("li", {
              onClick: toggle.bind(null, option.id),
              className: "question-q option"
            }, React.createElement.apply(React, [ "div", {
              className: "question-q checker"
            } ].concat(function() {
              var tags = [];
              is_marked() && (is_correct(option.id) ? tags.push(React.createElement("span", {
                className: "question-q mark-on-check correct"
              }, React.createElement(Fa, {
                icon: "circle-o"
              }))) : tags.push(React.createElement("span", {
                className: "question-q mark-on-check incorrect"
              }, React.createElement(Fa, {
                icon: "times"
              }))));
              is_active(option.id) ? tags.push(React.createElement("span", {
                className: "question-q check active"
              }, React.createElement(Fa, {
                icon: "check",
                scale: 2
              }))) : tags.push(React.createElement("span", {
                className: "question-q check"
              }, React.createElement(Fa, {
                icon: "check",
                scale: 2
              })));
              return tags;
            }.call(this))), React.createElement("div", {
              dangerouslySetInnerHTML: option.marked,
              className: "question-q a-text"
            })));
          }
        }
        return tags;
      }.call(this)));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "is_active" in locals_for_with ? locals_for_with.is_active : typeof is_active !== "undefined" ? is_active : undefined, "is_correct" in locals_for_with ? locals_for_with.is_correct : typeof is_correct !== "undefined" ? is_correct : undefined, "is_marked" in locals_for_with ? locals_for_with.is_marked : typeof is_marked !== "undefined" ? is_marked : undefined, "options" in locals_for_with ? locals_for_with.options : typeof options !== "undefined" ? options : undefined, "toggle" in locals_for_with ? locals_for_with.toggle : typeof toggle !== "undefined" ? toggle : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],23:[function(require,module,exports){
var Lang;

module.exports = Lang = {
  portal: "QQAポータル"
};


},{}],24:[function(require,module,exports){
var ApiStriker;

module.exports = ApiStriker = (function() {
  function ApiStriker() {}

  ApiStriker._struck = {};

  ApiStriker.strike = function(linker, forceReload) {
    if (!forceReload && linker.is_get && this._struck[linker.key]) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return resolve(_this._struck[linker.key]);
        };
      })(this));
    }
    return $.ajax({
      url: '/api' + linker.uri,
      type: linker.method,
      dataType: 'json',
      data: linker.params
    }).then((function(_this) {
      return function(data) {
        if (linker.is_get) {
          return _this._struck[linker.key] = data;
        }
      };
    })(this));
  };

  return ApiStriker;

})();


},{}],25:[function(require,module,exports){
var Cassette;

module.exports = Cassette = (function() {
  Cassette.root = null;

  function Cassette(component, props) {
    this.component = component;
    this.props = props;
  }

  Cassette.prototype.forPusher = function(root) {
    return [
      this.component, _.merge(this.props, {
        root: App.Cassette.root
      })
    ];
  };

  return Cassette;

})();


},{}],26:[function(require,module,exports){
var Models;

module.exports = Models = {};

Models.ApiStriker = require('./api-striker');

Models.Cassette = require('./cassette');

Models.Linker = require('./linker');

Models.Mark = require('./mark');

Models.Notice = require('./notice');

Models.QuestionState = require('./question-state');

Models.Question = require('./question');

Models.Router = require('./router');


},{"./api-striker":24,"./cassette":25,"./linker":27,"./mark":28,"./notice":29,"./question":31,"./question-state":30,"./router":32}],27:[function(require,module,exports){
var Linker;

module.exports = Linker = (function() {
  function Linker(method, uri1, params1) {
    var key, value;
    this.method = method;
    this.uri = uri1;
    this.params = params1;
    this._replacePlaceholder();
    this.key = this.uri + '::' + ((function() {
      var ref, results;
      ref = this.params;
      results = [];
      for (key in ref) {
        value = ref[key];
        results.push(key + ":" + value);
      }
      return results;
    }).call(this)).join('::');
  }

  Linker.prototype._replacePlaceholder = function() {
    var results;
    results = [];
    while (this.uri.match(/(:([0-9_a-z]+))/)) {
      this.uri = this.uri.replace(RegExp.$1, this.params[RegExp.$2] || '-');
      results.push(delete this.params[RegExp.$2]);
    }
    return results;
  };

  Linker.prototype.is_get = function() {
    return this.methd === 'get';
  };

  Linker["delete"] = function(uri, params) {
    return new this('delete', uri, params);
  };

  Linker.get = function(uri, params) {
    return new this('get', uri, params);
  };

  Linker.patch = function(uri, params) {
    return new this('patch', uri, params);
  };

  Linker.post = function(uri, params) {
    return new this('post', uri, params);
  };

  Linker.put = function(uri, params) {
    return new this('put', uri, params);
  };

  return Linker;

})();


},{}],28:[function(require,module,exports){
var Mark;

module.exports = Mark = (function() {
  function Mark(mark, options) {
    this.mark = mark;
    this.options = options;
    this.resultText = this.mark.mark ? '正解!!' : '不正解';
    this.answers = _.flatten([this.mark.correct_answer]);
    this.correctAnswer = {
      __html: this.options.length ? _.map(this.answers, (function(_this) {
        return function(id) {
          return _.find(_this.options, function(option) {
            return option.id === id;
          }).marked.__html;
        };
      })(this)).join('\n\n') : this.mark.correct_answer
    };
  }

  Mark.prototype.is_correct = function() {
    return this.mark.mark;
  };

  return Mark;

})();


},{}],29:[function(require,module,exports){
var Notice;

module.exports = Notice = (function() {
  function Notice(type, title1, message1) {
    this.type = type;
    this.title = title1;
    this.message = message1;
  }

  Notice.danger = Notice.red = function(title, message) {
    return new this('danger', title, message);
  };

  Notice.success = Notice.green = function(title, message) {
    return new this('success', title, message);
  };

  Notice.information = Notice.yellow = function(title, message) {
    return new this('info', title, message);
  };

  Notice.primary = Notice.blue = function(title, message) {
    return new this('primary', title, message);
  };

  return Notice;

})();


},{}],30:[function(require,module,exports){
var QuestionState;

module.exports = QuestionState = (function() {
  function QuestionState() {}

  QuestionState.LOADING = 'loading';

  QuestionState.ASKING = 'asking';

  QuestionState.ASKED = 'asked';

  QuestionState.SUBMITTING = 'submitting';

  QuestionState.MARKED = 'marked';

  return QuestionState;

})();


},{}],31:[function(require,module,exports){
var Question;

module.exports = Question = (function() {
  function Question(obj) {
    var option;
    this.id = obj.id;
    this.text = obj.text || '';
    this.options = (function() {
      var i, len, ref, results;
      ref = obj.options || [];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        option = ref[i];
        results.push({
          id: option.id,
          marked: {
            __html: marked(option.text)
          }
        });
      }
      return results;
    })();
    this.marked = {
      __html: marked(this.text)
    };
    this.description = App.Question.trim(this.marked.__html).slice(0, 40);
    this.way = obj.way || '';
    this.wayText = App.Question.detectWayText(this.way);
    this.pleaseText = App.Question.detectPleaseText(this.way);
  }

  Question.trim = function(html) {
    return html.replace(/<.*?>/igm, '');
  };

  Question.detectPleaseText = function(way) {
    switch (way) {
      case 'single_choice':
        return 'ひとつ選んでください';
      case 'multiple_choices':
        return 'すべて選んでください';
      case 'free_text':
        return '答えを入力してください';
      case 'in_order':
        return 'すべて選択してください';
      case 'ox':
        return 'いずれかを選んでください';
      default:
        return '';
    }
  };

  Question.detectWayText = function(way) {
    switch (way) {
      case 'single_choice':
        return '一つだけ選択';
      case 'multiple_choices':
        return '複数選択';
      case 'free_text':
        return 'テキスト入力';
      case 'in_order':
        return '順に並べる';
      case 'ox':
        return 'ox問題';
      default:
        return '';
    }
  };

  return Question;

})();


},{}],32:[function(require,module,exports){
var Router;

module.exports = Router = (function() {
  function Router() {
    this._map = {};
    this._mapped = {};
    this._normalized = {};
  }

  Router.prototype.add = function(url, app) {
    var i, name, normalized, now, ref;
    if (this._find(url)) {
      return false;
    }
    normalized = this._normalize(url);
    now = this._map;
    ref = normalized[0].split('/');
    for (i in ref) {
      name = ref[i];
      if (name === '') {
        continue;
      }
      if (now[name] == null) {
        now[name] = {};
      }
      now = now[name];
    }
    now._app = app;
    now._parameters = normalized[1].split(':');
    return this._mapped[normalized[0]] = true;
  };

  Router.prototype.execute = function(url) {
    var i, name, now, params, ref, ref1, store;
    store = [];
    now = this._map;
    ref = this._strip(url).split('/');
    for (i in ref) {
      name = ref[i];
      if (now[name]) {
        now = now[name];
      } else if (now[':']) {
        store.push(name);
        now = now[':'];
      }
    }
    params = {};
    ref1 = now._parameters;
    for (i in ref1) {
      name = ref1[i];
      params[name] = store[i];
    }
    return now._app(params);
  };

  Router.prototype._find = function(url) {
    var normalized;
    normalized = this._normalize(url);
    return this._mapped[normalized[0]];
  };

  Router.prototype._is_include_placeholder = function(url) {
    return url.match(/:[a-z_0-9]+/) != null;
  };

  Router.prototype._normalize = function(url) {
    if (this._normalized[url]) {
      return this._normalized[url];
    }
    if (!this._is_include_placeholder(url)) {
      return this._normalized[url] = [this._strip(url), ''];
    }
    return this._normalized[url] = this._pickHolder(url, []);
  };

  Router.prototype._pickHolder = function(url, holders) {
    var result;
    result = url.match(/(:[a-z_0-9]+)/);
    if (!result) {
      return [this._strip(url), holders.join(':')];
    }
    return this._pickHolder(url.replace(result[1], ':'), holders.concat(result[1].replace(':', '')));
  };

  Router.prototype._strip = function(url) {
    return url.replace(/\/$/ig, '').replace(/.+?:\/\/(.+?)\//, '/');
  };

  return Router;

})();


},{}],33:[function(require,module,exports){
var Path;

module.exports = Path = {
  portal: '/',
  q: '/q/:id',
  qIndex: '/q',
  mark: '/marks',
  render: function(path, values) {
    return _.reduce(values, function(a, value, key) {
      return a.replace("%{" + key + "}", value);
    }, Path[path]);
  }
};


},{}],34:[function(require,module,exports){
var Util,
  slice = [].slice;

module.exports = Util = {

  /*
  React.createElementを変形
  
  ce(object)
    object.$cn -> className
    object.$el -> タグ名
    object.$inc -> 末尾引数、あるいは可変長引数として渡される値
    object -> 引数はそのままpropsとして渡される
  
  普通
  
     ce {$el: 'div', $cn: 'short', $inc: 'text'}
  
     <div className="short">
       text
     </div>
  
  入れ子
  
     Item = ReactClass
       render: ->
         ce {$el: 'li', $inc: 'item'}
  
     ce {$el: 'ul', $inc: [Item, Item]}
  
     <ul>
       {Item}
       {Item}
     </ul>
   */
  ce: function(object) {
    var child, children, i, len, results;
    switch (true) {
      case object != null ? object.hasOwnProperty('$el') : void 0:
        object.className = object.$cn;
        children = this.ce(object.$inc);
        if (_.isArray(children)) {
          return React.createElement.apply(React, [object.$el, object].concat(slice.call(children)));
        } else {
          return React.createElement(object.$el, object, children);
        }
        break;
      case _.isArray(object):
        results = [];
        for (i = 0, len = object.length; i < len; i++) {
          child = object[i];
          results.push(this.ce(child));
        }
        return results;
        break;
      case _.isString(object):
        return object;
      case _.isNumber(object):
        return object;
      case _.isObject(object):
        return object;
      default:
        return '';
    }
  }
};


},{}],35:[function(require,module,exports){
var Fa;

module.exports = Fa = React.createClass({
  render: function() {
    var classes;
    classes = ['fa'];
    classes.push("fa-" + this.props.icon);
    if (this.props.scale != null) {
      classes.push("fa-" + this.props.scale + "x");
    }
    if ((this.props.fixedWidth == null) || this.props.fixedWidth === false) {
      classes.push('fa-fw');
    }
    if (this.props.list) {
      classes.push('fa-li');
    }
    if (this.props.border) {
      classes.push('fa-border');
    }
    if (this.props.pull != null) {
      classes.push("fa-pull-" + this.props.pull);
    }
    if (this.props.animation != null) {
      classes.push("fa-" + this.props.animation);
    }
    if (this.props.rotate != null) {
      classes.push("fa-rotate-" + this.props.rotate);
    }
    if (this.props.flip != null) {
      classes.push("fa-flip-" + this.props.animation);
    }
    return React.createElement('i', {
      className: classes.join(' ')
    });
  }
});


},{}],36:[function(require,module,exports){
var FreeText;

module.exports = FreeText = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.Q.freeText({
      options: this.props.options,
      Fa: App.View.Fa,
      is_active: (function(_this) {
        return function(id) {
          return _this.props.answers === id;
        };
      })(this),
      is_marked: (function(_this) {
        return function() {
          return _this.props.result != null;
        };
      })(this),
      is_correct: (function(_this) {
        return function(id) {
          return _this.props.result.answers[0] === id;
        };
      })(this),
      toggle: (function(_this) {
        return function(index) {
          return _this.dispatch('question:answer', index);
        };
      })(this)
    });
  }
});


},{}],37:[function(require,module,exports){
var Views;

module.exports = Views = {};

Views.Fa = require('./fa');

Views.FreeText = require('./free-text');

Views.MultipleChoices = require('./multiple_choices');

Views.Ox = require('./ox');

Views.SingleChoice = require('./single_choice');


},{"./fa":35,"./free-text":36,"./multiple_choices":38,"./ox":39,"./single_choice":40}],38:[function(require,module,exports){
var SingleChoice;

module.exports = SingleChoice = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    console.log(this.props.answers);
    return App.JSX.Q.singleChoice({
      options: this.props.options,
      Fa: App.View.Fa,
      is_active: (function(_this) {
        return function(id) {
          return _.include(_this.props.answers, id);
        };
      })(this),
      is_marked: (function(_this) {
        return function() {
          return _this.props.result != null;
        };
      })(this),
      is_correct: (function(_this) {
        return function(id) {
          return _.include(_this.props.result.answers, id);
        };
      })(this),
      toggle: (function(_this) {
        return function(id) {
          var new_answers, ref;
          new_answers = ((ref = _this.props.answers) != null ? ref.concat() : void 0) || [];
          if (_.include(new_answers, id)) {
            new_answers = _.reject(new_answers, function(n) {
              return n === id;
            });
          } else {
            new_answers.push(id);
          }
          return _this.dispatch('question:answer', new_answers);
        };
      })(this)
    });
  }
});


},{}],39:[function(require,module,exports){
var Ox;

module.exports = Ox = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.Q.ox({
      options: this.props.options,
      Fa: App.View.Fa,
      is_true: (function(_this) {
        return function() {
          if (_this.props.answers === 1) {
            return 'active';
          }
        };
      })(this),
      is_false: (function(_this) {
        return function() {
          if (_this.props.answers === 0) {
            return 'active';
          }
        };
      })(this),
      is_marked: (function(_this) {
        return function() {
          return _this.props.result != null;
        };
      })(this),
      toggle: (function(_this) {
        return function(boolean) {
          return _this.dispatch('question:answer', boolean);
        };
      })(this)
    });
  }
});


},{}],40:[function(require,module,exports){
var SingleChoice;

module.exports = SingleChoice = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.Q.singleChoice({
      options: this.props.options,
      Fa: App.View.Fa,
      is_active: (function(_this) {
        return function(id) {
          return _this.props.answers === id;
        };
      })(this),
      is_marked: (function(_this) {
        return function() {
          return _this.props.result != null;
        };
      })(this),
      is_correct: (function(_this) {
        return function(id) {
          return _this.props.result.answers[0] === id;
        };
      })(this),
      toggle: (function(_this) {
        return function(index) {
          return _this.dispatch('question:answer', index);
        };
      })(this)
    });
  }
});


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
