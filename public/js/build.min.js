(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
var App;

if (!global) {
  console.log('loading app');
}

module.exports = App = {};

if (typeof window !== "undefined" && window !== null) {
  window.App = App;
}

if (typeof global !== "undefined" && global !== null) {
  global.App = App;
}

if (!global) {
  console.log('loading module');
}

_.merge(App, require('./models'));

App.JSX = require('./jsx/jsx');

App.Util = require('./util');

App.View = require('./views');

App.Lang = require('./lang');

App.Path = require('./path');

App.Constant = require('./constant');

App.BaseContext = require('./contexts/base-context');

_.merge(App, require('./contexts'));

App.start = function(node) {
  var router;
  router = new Arda.Router(Arda.DefaultLayout, node);
  return router.pushContext(App.MainContext);
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./constant":2,"./contexts":5,"./contexts/base-context":3,"./jsx/jsx":15,"./lang":28,"./models":31,"./path":42,"./util":43,"./views":47}],2:[function(require,module,exports){
var Constant;

module.exports = Constant = {
  classes: {
    challengeResultBox: 'col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2',
    textInput: 'form-control size-h3',
    submitButton: 'btn btn-lg btn-success size-h4 wide',
    blueButton: 'btn btn-md btn-primary size-h4',
    greenButton: 'btn btn-md btn-success size-h4',
    indexTable: 'table table-striped table-condensed table-bordered',
    editButton: 'btn btn-md btn-primary size-h6',
    smallBox: 'col-sm-6 col-sm-offset-3 col-md-4 col-md-offset-4',
    workbookChallengeBox: 'col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2',
    questionBox: 'col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2',
    join: function(base, added) {
      return [Constant.classes[base], added].join(' ');
    }
  },
  render: {
    levelLabel: function(value) {
      return _.find(Constant.levels, (function(_this) {
        return function(obj) {
          return obj.value === value;
        };
      })(this)).label;
    },
    evalType: function(value) {
      return _.find(Constant.evalTypes, (function(_this) {
        return function(obj) {
          return obj.value === value;
        };
      })(this)).label;
    },
    answerType: function(value) {
      return _.find(Constant.answerTypes, (function(_this) {
        return function(obj) {
          return obj.value === value;
        };
      })(this)).label;
    }
  },
  swal: {
    "delete": {
      title: "削除します",
      text: "この処理は取り消すことができません",
      type: "warning",
      showCancelButton: true,
      confirmButtonColor: "#e51c23",
      confirmButtonText: "削除する",
      closeOnConfirm: true,
      cancelButtonText: 'キャンセル',
      allowOutsideClick: true
    }
  },
  codeMirror: {
    configuration: {
      lineNumbers: true,
      mode: "xml",
      htmlMode: true,
      lineWrapping: true
    }
  }
};


},{}],3:[function(require,module,exports){
var BaseContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = BaseContext = (function(superClass) {
  extend(BaseContext, superClass);

  function BaseContext() {
    return BaseContext.__super__.constructor.apply(this, arguments);
  }

  BaseContext.prototype.delegate = function(subscribe) {
    BaseContext.__super__.delegate.apply(this, arguments);
    subscribe('context:created', function() {
      return this.root = this.props.root;
    });
    return subscribe('inform:rendered', function() {
      return this.root.emit('inform:rendered');
    });
  };

  BaseContext.prototype.strikeApi = function(linker) {
    return this.root.strikeApi(linker);
  };

  BaseContext.prototype._strippedPath = function() {
    return this.root._strippedPath();
  };

  BaseContext.prototype._choppedPath = function() {
    return this.root._choppedPath();
  };

  return BaseContext;

})(Arda.Context);


},{}],4:[function(require,module,exports){
var BlankContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = BlankContext = (function(superClass) {
  extend(BlankContext, superClass);

  function BlankContext() {
    return BlankContext.__super__.constructor.apply(this, arguments);
  }

  BlankContext.prototype.initState = function(props) {
    return props;
  };

  BlankContext.prototype.component = React.createClass({
    render: function() {
      return React.createElement('div.container', {}, "Now loading " + this.props.name + "...");
    }
  });

  return BlankContext;

})(Arda.Context);


},{}],5:[function(require,module,exports){
var Contexts;

module.exports = Contexts = {};

Contexts.BaseContext = require('./base-context');

Contexts.BlankContext = require('./blank-context');

Contexts.MainContext = require('./main-context');

Contexts.Menu = require('./menu');

Contexts.Notifier = require('./notifier');

Contexts.PortalContext = require('./portal-context');

Contexts.Q = require('./q');


},{"./base-context":3,"./blank-context":4,"./main-context":6,"./menu":8,"./notifier":10,"./portal-context":11,"./q":13}],6:[function(require,module,exports){
var MainContext,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = MainContext = (function(superClass) {
  var _feature, _history, _now;

  extend(MainContext, superClass);

  function MainContext() {
    this._forward = bind(this._forward, this);
    this._backward = bind(this._backward, this);
    return MainContext.__super__.constructor.apply(this, arguments);
  }

  MainContext.prototype.component = React.createClass({
    mixins: [Arda.mixin],
    render: function() {
      return App.JSX.main();
    },
    componentDidMount: function() {
      var routers;
      routers = {
        content: new Arda.Router(Arda.DefaultLayout, React.findDOMNode(this.refs.content)),
        notifier: new Arda.Router(Arda.DefaultLayout, React.findDOMNode(this.refs.notifier)),
        menu: new Arda.Router(Arda.DefaultLayout, React.findDOMNode(this.refs.menu))
      };
      console.log('Display mounted', routers);
      return this.dispatch('display:initialized', routers);
    }
  });

  _history = [];

  _feature = [];

  _now = 0;

  MainContext.prototype.initState = function(props) {
    return props;
  };

  MainContext.prototype.expandComponentProps = function(props, state) {
    return props;
  };

  MainContext.prototype.delegate = function(subscribe) {
    MainContext.__super__.delegate.apply(this, arguments);
    subscribe('context:created', function() {
      this._initializeValuables();
      this._initializeRouter();
      return this._initializeEventWatcher();
    });
    subscribe('display:initialized', this._initializeDisplay);
    subscribe('scene:replace', this._replaceScene);
    subscribe('notify:success', (function(_this) {
      return function(title, message) {};
    })(this));
    subscribe('window:top', function() {
      return window.scrollTo(0, 0);
    });
    subscribe('app:home', function() {
      return this._replaceScene(App.Linker.get(App.Path.portal));
    });
    subscribe('notify:fail', (function(_this) {
      return function(title, message) {};
    })(this));
    subscribe('history:push', (function(_this) {
      return function(linker) {
        return history.pushState({}, null, linker.paramsUri);
      };
    })(this));
    subscribe('reload', (function(_this) {
      return function() {
        return _this.update(function(state) {
          return state;
        });
      };
    })(this));
    subscribe('question:show', function(q) {
      return this._replaceScene(App.Linker.get(App.Path.q, {
        id: q.id
      }));
    });
    subscribe('inform:rendered', function(q) {
      return MathJax.Hub.Typeset();
    });
    return subscribe('question:tagged:index', function(id) {
      return this._replaceScene(App.Linker.get(App.Path.taggedIndex, {
        tags: [id]
      }));
    });
  };

  MainContext.prototype.strikeApi = function(linker, forceReload) {
    return App.ApiStriker.strike(linker, forceReload);
  };

  MainContext.prototype._initializeEventWatcher = function() {
    HistoryWard.startBrutally();
    $(window).on(HistoryWard.BACKWARD, this._backward);
    return $(window).on(HistoryWard.FORWARD, this._forward);
  };

  MainContext.prototype._initializeDisplay = function(routers) {
    this.content = routers.content;
    this.notifier = routers.notifier;
    this.menu = routers.menu;
    this.content.pushContext(App.BlankContext, {
      name: 'Content'
    }).done((function(_this) {
      return function() {
        return _this._initializeScene();
      };
    })(this));
    this.notifier.pushContext(App.BlankContext, {
      name: 'Notifier'
    }).done((function(_this) {
      return function() {
        return _this.notifier.replaceContext(App.Notifier.GodContext, {
          root: _this
        });
      };
    })(this));
    return this.menu.pushContext(App.BlankContext, {
      name: 'Menu'
    }).done((function(_this) {
      return function() {
        return _this.menu.replaceContext(App.Menu.GlobalContext, {
          root: _this
        });
      };
    })(this));
  };

  MainContext.prototype._initializeRouter = function() {
    App.Cassette.root = this;
    this.router = new App.Router();
    this.router.add('/', function(params) {
      return new App.Cassette(App.PortalContext, params);
    });
    this.router.add('/q', function(params) {
      return new App.Cassette(App.Q.IndexContext, params);
    });
    this.router.add('/q/tagged/:tags', function(params) {
      return new App.Cassette(App.Q.IndexContext, params);
    });
    this.router.add('/q/tagged/', function(params) {
      return new App.Cassette(App.Q.IndexContext, params);
    });
    return this.router.add('/q/:id', function(params) {
      return new App.Cassette(App.Q.QuestionContext, params);
    });
  };

  MainContext.prototype._initializeScene = function() {
    var ref;
    return (ref = this.content).pushContext.apply(ref, this._detectCassette().forPusher());
  };

  MainContext.prototype._initializeValuables = function() {};

  MainContext.prototype._backward = function(e) {
    var ref;
    return (ref = this.content).pushContext.apply(ref, this._detectCassette().forPusher());
  };

  MainContext.prototype._forward = function(e) {
    var ref;
    return (ref = this.content).pushContext.apply(ref, this._detectCassette().forPusher());
  };

  MainContext.prototype._detectCassette = function() {
    return this.router.execute(this._strippedPath());
  };

  MainContext.prototype._pickHeaderParameters = function(xhr) {
    var required;
    required = ['Total-Pages', 'Per-Page', 'Current-Page', 'Paginate-Path', 'Access-Level'];
    return _.reduce(required, function(a, req) {
      console.log(req);
      a[req] = xhr.getResponseHeader(req);
      return a;
    }, {});
  };

  MainContext.prototype._strippedPath = function() {
    return location.href.replace(/.+?:\/\/(.+?)\//, '/');
  };

  MainContext.prototype._choppedPath = function() {
    return location.href.replace(/.+?:\/\/(.+?)\//, '/').replace(/\?.*/, '');
  };

  MainContext.prototype._isCrossDomain = function(url) {
    var e, error, originAnchor, urlAnchor;
    originAnchor = document.createElement("a");
    originAnchor.href = location.href;
    urlAnchor = document.createElement("a");
    try {
      urlAnchor.href = url;
      urlAnchor.href = urlAnchor.href;
      return !urlAnchor.protocol || !urlAnchor.host || (originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host);
    } catch (error) {
      e = error;
      return true;
    }
  };

  MainContext.prototype._replaceScene = function(linker) {
    var ref;
    history.pushState({}, null, linker.uri);
    return (ref = this.content).pushContext.apply(ref, this._detectCassette().forPusher()).then((function(_this) {
      return function() {
        return MathJax.Hub.Typeset();
      };
    })(this));
  };

  return MainContext;

})(Arda.Context);


},{}],7:[function(require,module,exports){
var GlobalContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = GlobalContext = (function(superClass) {
  extend(GlobalContext, superClass);

  function GlobalContext() {
    return GlobalContext.__super__.constructor.apply(this, arguments);
  }

  GlobalContext.prototype.component = React.createClass({
    mixins: [Arda.mixin],
    render: function() {
      return App.JSX.Menu.menu({
        Fa: App.View.Fa,
        goHome: (function(_this) {
          return function() {
            return _this.dispatch('app:home');
          };
        })(this)
      });
    }
  });

  GlobalContext.prototype.initState = function(props) {
    return props;
  };

  GlobalContext.prototype.delegate = function(subscribe) {
    GlobalContext.__super__.delegate.apply(this, arguments);
    return subscribe('app:home', function(id) {
      return this.root.emit('app:home');
    });
  };

  return GlobalContext;

})(App.BaseContext);


},{}],8:[function(require,module,exports){
var Menu;

module.exports = Menu = {};

Menu.GlobalContext = require('./global-context');


},{"./global-context":7}],9:[function(require,module,exports){
var GodContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = GodContext = (function(superClass) {
  extend(GodContext, superClass);

  function GodContext() {
    return GodContext.__super__.constructor.apply(this, arguments);
  }

  GodContext.prototype.initState = function(props) {
    return props;
  };

  GodContext.prototype.component = React.createClass({
    render: function() {
      return React.createElement('div', {});
    }
  });

  return GodContext;

})(App.BaseContext);


},{}],10:[function(require,module,exports){
var Notifier;

module.exports = Notifier = {};

Notifier.GodContext = require('./god-context');


},{"./god-context":9}],11:[function(require,module,exports){
var BlankContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = BlankContext = (function(superClass) {
  var Portal;

  extend(BlankContext, superClass);

  function BlankContext() {
    return BlankContext.__super__.constructor.apply(this, arguments);
  }

  BlankContext.prototype.component = Portal = React.createClass({
    mixins: [Arda.mixin],
    render: function() {
      var q;
      return App.JSX.portal({
        Fa: App.View.Fa,
        Loading: App.View.Loading,
        qTags: (function() {
          var i, len, ref, results;
          ref = this.props.tags;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            q = ref[i];
            results.push(new App.Tag(q));
          }
          return results;
        }).call(this),
        sources: this.props.sources,
        showTaggedIndex: (function(_this) {
          return function(id) {
            return _this.dispatch('question:tagged:index', id);
          };
        })(this),
        isSourcesLoaded: (function(_this) {
          return function() {
            return _this.props.sources.length !== 0;
          };
        })(this),
        isTagsLoaded: (function(_this) {
          return function() {
            return _this.props.tags.length !== 0;
          };
        })(this)
      });
    }
  });

  BlankContext.prototype.initState = function(props) {
    return {
      tags: [],
      sources: []
    };
  };

  BlankContext.prototype.expandComponentProps = function(props, state) {
    return state;
  };

  BlankContext.prototype.delegate = function(subscribe) {
    BlankContext.__super__.delegate.apply(this, arguments);
    subscribe('context:started', function() {
      return this._initializeTags();
    });
    subscribe('context:started', function() {
      return this._initializeSources();
    });
    subscribe('question:show', function(q) {
      return this.root.emit('question:show', q);
    });
    return subscribe('question:tagged:index', function(id) {
      return this.root.emit('question:tagged:index', [id]);
    });
  };

  BlankContext.prototype._initializeTags = function() {
    return this.strikeApi(App.Linker.get(App.Path.tags)).then((function(_this) {
      return function(data) {
        return _this.update(function(s) {
          return _.merge(s, {
            tags: data.body
          });
        });
      };
    })(this));
  };

  BlankContext.prototype._initializeSources = function() {
    return this.strikeApi(App.Linker.get(App.Path.sources)).then((function(_this) {
      return function(data) {
        return _this.update(function(s) {
          return _.merge(s, {
            sources: data.body
          });
        });
      };
    })(this));
  };

  return BlankContext;

})(App.BaseContext);


},{}],12:[function(require,module,exports){
var IndexContext,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = IndexContext = (function(superClass) {
  extend(IndexContext, superClass);

  function IndexContext() {
    this.toggleTag = bind(this.toggleTag, this);
    return IndexContext.__super__.constructor.apply(this, arguments);
  }

  IndexContext.prototype.initState = function(props) {
    return {
      index: [],
      header: {},
      qTags: [],
      tagSelectorState: App.TagSelectorState.LOADING,
      selectorOpened: false,
      selectedTags: !this.props.tags ? [] : _.map(this.props.tags.split(','), (function(_this) {
        return function(n) {
          return +n;
        };
      })(this)),
      basePath: ''
    };
  };

  IndexContext.prototype.expandComponentProps = function(props, state) {
    return state;
  };

  IndexContext.prototype.component = React.createClass({
    mixins: [Arda.mixin],
    getInitialState: function() {
      return {
        old: null
      };
    },
    render: function() {
      var q, tag;
      return App.JSX.Q.indexPage({
        Paginator: App.View.Paginator,
        TagSelector: App.View.TagSelector,
        Loading: App.View.Loading,
        index: (function() {
          var i, len, ref, results;
          ref = this.props.index;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            q = ref[i];
            results.push(new App.Question(q));
          }
          return results;
        }).call(this),
        header: this.props.header,
        selectedTags: this.props.selectedTags,
        tagSelectorState: this.props.tagSelectorState,
        selectorOpened: this.props.selectorOpened,
        qTags: (function() {
          var i, len, ref, results;
          ref = this.props.qTags;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            tag = ref[i];
            results.push(new App.Tag(tag));
          }
          return results;
        }).call(this),
        showQuestion: (function(_this) {
          return function(e) {
            return _this.dispatch('question:show', e);
          };
        })(this)
      });
    },
    componentDidUpdate: function() {
      if (this.state.old !== this.props.index) {
        this.dispatch('inform:rendered');
        return this.state.old = this.props.index;
      }
    }
  });

  IndexContext.prototype.delegate = function(subscribe) {
    IndexContext.__super__.delegate.apply(this, arguments);
    subscribe('context:started', function() {
      return this._initializeIndex();
    });
    subscribe('question:show', function(q) {
      return this.root.emit('question:show', q);
    });
    subscribe('question:index:paginate', this.paginate);
    subscribe('question:tag:toggle', this.toggleTag);
    return subscribe('question:tagSelector:toggle', function() {
      return this.update(function(s) {
        s.selectorOpened = !s.selectorOpened;
        return s;
      });
    });
  };

  IndexContext.prototype.generateId = function() {
    if (this.id == null) {
      this.id = 0;
    }
    this.id++;
    return this.id;
  };

  IndexContext.prototype.currentId = function() {
    return this.id != null ? this.id : this.id = 0;
  };

  IndexContext.prototype.generateTagId = function() {
    if (this.tagId == null) {
      this.tagId = 0;
    }
    this.tagId++;
    return this.tagId;
  };

  IndexContext.prototype.currentTagId = function() {
    return this.tagId != null ? this.tagId : this.tagId = 0;
  };

  IndexContext.prototype.paginate = function(page) {
    var linker, myId;
    linker = App.Linker.get(this.state.basePath, {
      page: page
    });
    myId = this.generateId();
    return this.strikeApi(linker).then((function(_this) {
      return function(data) {
        if (myId !== _this.currentId()) {
          throw 'older';
        }
        return _this.update(function(s) {
          s.index = data.body;
          s.header = data.header;
          return s;
        });
      };
    })(this)).then((function(_this) {
      return function() {
        _this.root.emit('history:push', linker);
        return _this.root.emit('window:top');
      };
    })(this));
  };

  IndexContext.prototype.toggleTag = function(id) {
    var linker, myId, newTags, tags;
    tags = _.include(this.state.selectedTags, id) ? _.remove(this.state.selectedTags.concat(), (function(_this) {
      return function(n) {
        return n !== id;
      };
    })(this)) : (newTags = this.state.selectedTags.concat(), newTags.push(id), newTags);
    tags = _.sortBy(tags);
    linker = App.Linker.get(App.Path.taggedIndex, {
      tags: tags.join(',')
    });
    myId = this.generateTagId();
    this.generateId();
    this.update((function(_this) {
      return function(s) {
        s.tagSelectorState = App.TagSelectorState.TOGGLED;
        s.selectedTags = tags;
        s.index = [];
        return s;
      };
    })(this));
    return this.strikeApi(linker).then((function(_this) {
      return function(data) {
        if (myId !== _this.currentTagId()) {
          throw 'older';
        }
        return _this.update(function(s) {
          s.index = data.body;
          s.header = data.header;
          return s;
        });
      };
    })(this)).then((function(_this) {
      return function() {
        _this.root.emit('history:push', linker);
        return _this.update(function(s) {
          s.basePath = _this._choppedPath();
          return s;
        });
      };
    })(this)).then((function(_this) {
      return function() {
        return _this.update(function(s) {
          s.tagSelectorState = App.TagSelectorState.LOADING;
          return s;
        });
      };
    })(this)).then((function(_this) {
      return function() {
        return _this.strikeApi(App.Linker.get(App.Path.taggedTags, {
          tags: tags
        })).then(function(data) {
          return _this.update(function(s) {
            s.tagSelectorState = App.TagSelectorState.LOADED;
            s.qTags = data.body;
            return s;
          });
        });
      };
    })(this));
  };

  IndexContext.prototype._initializeIndex = function() {
    return this.strikeApi(App.Linker.get(this._strippedPath())).then((function(_this) {
      return function(data) {
        return _this.update(function(s) {
          s.basePath = _this._choppedPath();
          s.index = data.body;
          s.header = data.header;
          return s;
        }).then(function() {
          return _this._initializeTags();
        });
      };
    })(this));
  };

  IndexContext.prototype._initializeTags = function() {
    return this.strikeApi(App.Linker.get(App.Path.taggedTags, {
      tags: this.props.tags
    })).then((function(_this) {
      return function(data) {
        return _this.update(function(s) {
          s.tagSelectorState = App.TagSelectorState.LOADED;
          s.qTags = data.body;
          return s;
        });
      };
    })(this));
  };

  return IndexContext;

})(App.BaseContext);


},{}],13:[function(require,module,exports){
var Q;

module.exports = Q = {};

Q.IndexContext = require('./index-context');

Q.QuestionContext = require('./question-context');


},{"./index-context":12,"./question-context":14}],14:[function(require,module,exports){
var QuestionContext,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

module.exports = QuestionContext = (function(superClass) {
  extend(QuestionContext, superClass);

  function QuestionContext() {
    return QuestionContext.__super__.constructor.apply(this, arguments);
  }

  QuestionContext.prototype.component = React.createClass({
    mixins: [Arda.mixin],
    getInitialState: function() {
      return {
        informed: false
      };
    },
    render: function() {
      if (this.props.state === App.QuestionState.LOADING) {
        return App.JSX.loading({
          Fa: App.View.Fa
        });
      }
      return App.JSX.Q.question({
        Fa: App.View.Fa,
        SingleChoice: App.View.SingleChoice,
        MultipleChoices: App.View.MultipleChoices,
        FreeText: App.View.FreeText,
        Ox: App.View.Ox,
        InOrder: App.View.InOrder,
        QuestionState: App.QuestionState,
        Loading: App.View.Loading,
        sourceLink: this.props.sourceLink,
        state: this.props.state,
        question: this.props.question,
        answers: this.props.answers,
        result: this.props.result,
        qTags: this.props.qTags,
        submit: (function(_this) {
          return function() {
            return _this.dispatch('question:submit');
          };
        })(this),
        showTaggedIndex: (function(_this) {
          return function(id) {
            return _this.dispatch('question:tagged:index', id);
          };
        })(this)
      });
    },
    componentDidUpdate: function() {
      if (!(this.state.informed && this.props.question)) {
        this.dispatch('inform:rendered');
        return this.state.informed = true;
      }
    }
  });

  QuestionContext.prototype.initState = function(props) {
    return {
      id: props.id,
      question: null,
      answers: null,
      state: App.QuestionState.LOADING,
      result: null,
      sourceLink: null,
      qTags: null
    };
  };

  QuestionContext.prototype.expandComponentProps = function(props, state) {
    return state;
  };

  QuestionContext.prototype.isAnswerable = function() {
    return this.state.state === App.QuestionState.ASKING || this.state.state === App.QuestionState.ASKED;
  };

  QuestionContext.prototype.isSubmittable = function() {
    return this.state.state === App.QuestionState.ASKED;
  };

  QuestionContext.prototype.isInOrder = function() {
    return this.state.question.isInOrder();
  };

  QuestionContext.prototype.isAnswersFullFilled = function() {
    if (this.isInOrder()) {
      return !_.include(this.state.answers, '') && !_.include(this.state.answers, null) && !_.include(this.state.answers, void 0);
    } else {
      return !_.isNull(this.state.answers) && (this.state.answers.length > 0 || _.isNumber(this.state.answers));
    }
  };

  QuestionContext.prototype.delegate = function(subscribe) {
    QuestionContext.__super__.delegate.apply(this, arguments);
    subscribe('context:started', function() {
      return this._initializeQuestion();
    });
    subscribe('question:show', function(q) {
      return this.root.emit('question:show', q);
    });
    subscribe('question:answer', function(answer) {
      if (!this.isAnswerable()) {
        return;
      }
      return this.update(function(s) {
        s.answers = answer;
        return s;
      }).then((function(_this) {
        return function() {
          if (_this.isAnswersFullFilled()) {
            return _this.update(function(s) {
              return _.merge(s, {
                state: App.QuestionState.ASKED
              });
            });
          } else {
            return _this.update(function(s) {
              return _.merge(s, {
                state: App.QuestionState.ASKING
              });
            });
          }
        };
      })(this));
    });
    subscribe('question:submit', function() {
      if (!this.isSubmittable()) {
        return;
      }
      this.update(function(s) {
        return _.merge(s, {
          state: App.QuestionState.SUBMITTING
        });
      });
      return this.strikeApi(App.Linker.post(App.Path.mark, {
        id: this.state.question.id,
        answers: this.state.answers
      })).then((function(_this) {
        return function(data) {
          return _this.update(function(s) {
            return _.merge(s, {
              result: new App.Mark(data.body, s.question.options),
              state: App.QuestionState.MARKED
            });
          });
        };
      })(this));
    });
    return subscribe('question:tagged:index', function(id) {
      return this.root.emit('question:tagged:index', [id]);
    });
  };

  QuestionContext.prototype._initializeQuestion = function() {
    return this.strikeApi(App.Linker.get(App.Path.q, {
      id: this.props.id
    })).then((function(_this) {
      return function(data) {
        return _this.update(function(s) {
          return _.merge(s, {
            question: new App.Question(data.body),
            state: App.QuestionState.ASKING
          });
        }).then(function() {
          if (_this.isInOrder()) {
            return _this.update(function(s) {
              return _.merge(s, {
                answers: new Array(s.question.answersNumber)
              });
            });
          }
        }).then(function() {
          if (_this.state.question.hasSource) {
            _this.strikeApi(App.Linker.get(App.Path.source, {
              id: _this.state.question.sourceLinkId
            })).then(function(data) {
              return _this.update(function(s) {
                s.sourceLink = new App.SourceLink(data.body);
                return s;
              });
            });
            return _this.strikeApi(App.Linker.get(App.Path.qTags, {
              id: _this.props.id
            })).then(function(data) {
              return _this.update(function(s) {
                s.qTags = _.map(data.body, (function(_this) {
                  return function(tag) {
                    return new App.Tag(tag);
                  };
                })(this));
                return s;
              });
            });
          }
        });
      };
    })(this));
  };

  return QuestionContext;

})(App.BaseContext);


},{}],15:[function(require,module,exports){
var JSX;

module.exports = JSX = {
  loading: require('./loading.js'),
  main: require('./main.js'),
  Menu: {
    menu: require('./menu/menu.js')
  },
  paginator: require('./paginator.js'),
  portal: require('./portal.js'),
  Q: {
    freeText: require('./q/free-text.js'),
    inOrder: require('./q/in-order.js'),
    indexPage: require('./q/index-page.js'),
    ox: require('./q/ox.js'),
    question: require('./q/question.js'),
    singleChoice: require('./q/single-choice.js'),
    tagSelector: require('./q/tag-selector.js')
  }
};


},{"./loading.js":16,"./main.js":17,"./menu/menu.js":18,"./paginator.js":19,"./portal.js":20,"./q/free-text.js":21,"./q/in-order.js":22,"./q/index-page.js":23,"./q/ox.js":24,"./q/question.js":25,"./q/single-choice.js":26,"./q/tag-selector.js":27}],16:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa) {
      tags.push(React.createElement("section", {
        className: "common-loading"
      }, React.createElement(Fa, {
        icon: "spinner",
        animation: "pulse"
      }), " ", "Now loading..."));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],17:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    tags.push(React.createElement("article", {
      id: "notifier",
      ref: "notifier"
    }));
    tags.push(React.createElement("article", {
      id: "menu",
      ref: "menu"
    }));
    tags.push(React.createElement("article", {
      id: "content",
      ref: "content"
    }));
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],18:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, goHome) {
      tags.push(React.createElement("section", {
        className: "global-menu menu-area"
      }, React.createElement("div", {
        className: "global-menu menu-body"
      }, React.createElement("button", {
        onClick: goHome,
        className: "global-menu go-home"
      }, React.createElement(Fa, {
        icon: "home",
        scale: 2
      })))));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "goHome" in locals_for_with ? locals_for_with.goHome : typeof goHome !== "undefined" ? goHome : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],19:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(links, paginate) {
      tags.push(React.createElement("section", {
        className: "question-index paginator area"
      }, React.createElement("ul", {
        className: "question-index paginator list"
      }, function() {
        var tags = [];
        var $$obj = links;
        if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
          var link = $$obj[$index];
          tags.push(React.createElement.apply(React, [ "li", {
            key: link.page,
            className: "question-index paginator body"
          } ].concat(function() {
            var tags = [];
            link.isCurrent ? tags.push(React.createElement("a", {
              onClick: paginate.bind(null, link.page),
              className: "question-index paginator anchor now"
            }, link.page)) : tags.push(React.createElement("a", {
              onClick: paginate.bind(null, link.page),
              className: "question-index paginator anchor ready"
            }, link.page));
            return tags;
          }.call(this))));
        } else {
          var $$l = 0;
          for (var $index in $$obj) {
            $$l++;
            var link = $$obj[$index];
            tags.push(React.createElement.apply(React, [ "li", {
              key: link.page,
              className: "question-index paginator body"
            } ].concat(function() {
              var tags = [];
              link.isCurrent ? tags.push(React.createElement("a", {
                onClick: paginate.bind(null, link.page),
                className: "question-index paginator anchor now"
              }, link.page)) : tags.push(React.createElement("a", {
                onClick: paginate.bind(null, link.page),
                className: "question-index paginator anchor ready"
              }, link.page));
              return tags;
            }.call(this))));
          }
        }
        return tags;
      }.call(this))));
    }).call(this, "links" in locals_for_with ? locals_for_with.links : typeof links !== "undefined" ? links : undefined, "paginate" in locals_for_with ? locals_for_with.paginate : typeof paginate !== "undefined" ? paginate : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],20:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, Loading, isSourcesLoaded, isTagsLoaded, qTags, showTaggedIndex, sources) {
      tags.push(React.createElement("section", {
        className: "portal portal-body"
      }, React.createElement.apply(React, [ "section", {
        className: "portal tag-list area"
      } ].concat(function() {
        var tags = [];
        tags.push(React.createElement("h1", {
          className: "portal sub-title"
        }, React.createElement(Fa, {
          icon: "tags"
        }), "タグリスト"));
        isTagsLoaded() ? tags.push(React.createElement("ul", {
          className: "portal tag-list-body"
        }, function() {
          var tags = [];
          var $$obj = qTags;
          if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
            var tag = $$obj[$index];
            tag.has_question() ? tags.push(React.createElement("li", {
              key: tag.id,
              className: "portal tag-list-tag"
            }, React.createElement(Fa, {
              icon: "tag"
            }), React.createElement("a", {
              onClick: showTaggedIndex.bind(null, tag.id)
            }, React.createElement("span", {
              className: "name"
            }, tag.display), React.createElement("span", {
              className: "count"
            }, tag.countText)))) : tags.push(React.createElement("li", {
              key: tag.id,
              className: "portal tag-list-tag disabled"
            }, React.createElement(Fa, {
              icon: "tag"
            }), React.createElement("span", {}, React.createElement("span", {
              className: "name"
            }, tag.display), React.createElement("span", {
              className: "count"
            }, tag.countText))));
          } else {
            var $$l = 0;
            for (var $index in $$obj) {
              $$l++;
              var tag = $$obj[$index];
              tag.has_question() ? tags.push(React.createElement("li", {
                key: tag.id,
                className: "portal tag-list-tag"
              }, React.createElement(Fa, {
                icon: "tag"
              }), React.createElement("a", {
                onClick: showTaggedIndex.bind(null, tag.id)
              }, React.createElement("span", {
                className: "name"
              }, tag.display), React.createElement("span", {
                className: "count"
              }, tag.countText)))) : tags.push(React.createElement("li", {
                key: tag.id,
                className: "portal tag-list-tag disabled"
              }, React.createElement(Fa, {
                icon: "tag"
              }), React.createElement("span", {}, React.createElement("span", {
                className: "name"
              }, tag.display), React.createElement("span", {
                className: "count"
              }, tag.countText))));
            }
          }
          return tags;
        }.call(this))) : tags.push(React.createElement(Loading, {}));
        return tags;
      }.call(this))), React.createElement.apply(React, [ "section", {
        className: "portal source area"
      } ].concat(function() {
        var tags = [];
        tags.push(React.createElement("h1", {
          className: "portal sub-title"
        }, React.createElement(Fa, {
          icon: "link"
        }), "出典リスト（予定含む）"));
        isSourcesLoaded() ? tags.push(React.createElement("ul", {
          className: "portal source-list-body"
        }, function() {
          var tags = [];
          var $$obj = sources;
          if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
            var source = $$obj[$index];
            tags.push(React.createElement("li", {
              key: source.id,
              className: "portal source-list-source"
            }, React.createElement(Fa, {
              icon: "link"
            }), React.createElement("a", {
              href: source.url
            }, source.display)));
          } else {
            var $$l = 0;
            for (var $index in $$obj) {
              $$l++;
              var source = $$obj[$index];
              tags.push(React.createElement("li", {
                key: source.id,
                className: "portal source-list-source"
              }, React.createElement(Fa, {
                icon: "link"
              }), React.createElement("a", {
                href: source.url
              }, source.display)));
            }
          }
          return tags;
        }.call(this))) : tags.push(React.createElement(Loading, {}));
        return tags;
      }.call(this)))));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "Loading" in locals_for_with ? locals_for_with.Loading : typeof Loading !== "undefined" ? Loading : undefined, "isSourcesLoaded" in locals_for_with ? locals_for_with.isSourcesLoaded : typeof isSourcesLoaded !== "undefined" ? isSourcesLoaded : undefined, "isTagsLoaded" in locals_for_with ? locals_for_with.isTagsLoaded : typeof isTagsLoaded !== "undefined" ? isTagsLoaded : undefined, "qTags" in locals_for_with ? locals_for_with.qTags : typeof qTags !== "undefined" ? qTags : undefined, "showTaggedIndex" in locals_for_with ? locals_for_with.showTaggedIndex : typeof showTaggedIndex !== "undefined" ? showTaggedIndex : undefined, "sources" in locals_for_with ? locals_for_with.sources : typeof sources !== "undefined" ? sources : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],21:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(answers, input, isMarked) {
      tags.push(React.createElement("div", {
        className: "question-q text"
      }, React.createElement("input", {
        placeholder: "入力欄",
        disabled: isMarked(),
        value: answers,
        onChange: input,
        className: "question-q free-text"
      })));
    }).call(this, "answers" in locals_for_with ? locals_for_with.answers : typeof answers !== "undefined" ? answers : undefined, "input" in locals_for_with ? locals_for_with.input : typeof input !== "undefined" ? input : undefined, "isMarked" in locals_for_with ? locals_for_with.isMarked : typeof isMarked !== "undefined" ? isMarked : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],22:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, answersNumber, isCorrect, isMarked, options, select, selected) {
      var n = 0;
      for (;n < answersNumber; ) {
        tags.push(React.createElement("section", {
          key: n
        }, React.createElement.apply(React, [ "div", {
          className: "question-q order number"
        } ].concat(function() {
          var tags = [];
          isMarked() && (isCorrect(n) ? tags.push(React.createElement("span", {
            className: "question-q mark-on-check correct"
          }, React.createElement(Fa, {
            icon: "circle-o"
          }))) : tags.push(React.createElement("span", {
            className: "question-q mark-on-check incorrect"
          }, React.createElement(Fa, {
            icon: "times"
          }))));
          tags.push(React.createElement("span", {
            className: "number-circle"
          }, n + 1));
          return tags;
        }.call(this))), React.createElement("div", {
          className: "question-q order select"
        }, React.createElement("select", {
          onChange: select,
          name: n,
          disabled: isMarked(),
          value: selected(n),
          className: "question-q order selector"
        }, React.createElement("option", {
          value: ""
        }, "未選択"), function() {
          var tags = [];
          var $$obj = options;
          if ("number" == typeof $$obj.length) for (var index = 0, $$l = $$obj.length; $$l > index; index++) {
            var opt = $$obj[index];
            tags.push(React.createElement("option", {
              value: opt.id,
              key: opt.id
            }, opt.marked.__html));
          } else {
            var $$l = 0;
            for (var index in $$obj) {
              $$l++;
              var opt = $$obj[index];
              tags.push(React.createElement("option", {
                value: opt.id,
                key: opt.id
              }, opt.marked.__html));
            }
          }
          return tags;
        }.call(this)))));
        n++;
      }
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "answersNumber" in locals_for_with ? locals_for_with.answersNumber : typeof answersNumber !== "undefined" ? answersNumber : undefined, "isCorrect" in locals_for_with ? locals_for_with.isCorrect : typeof isCorrect !== "undefined" ? isCorrect : undefined, "isMarked" in locals_for_with ? locals_for_with.isMarked : typeof isMarked !== "undefined" ? isMarked : undefined, "options" in locals_for_with ? locals_for_with.options : typeof options !== "undefined" ? options : undefined, "select" in locals_for_with ? locals_for_with.select : typeof select !== "undefined" ? select : undefined, "selected" in locals_for_with ? locals_for_with.selected : typeof selected !== "undefined" ? selected : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],23:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Loading, Paginator, TagSelector, header, index, qTags, selectedTags, selectorOpened, showQuestion, tagSelectorState) {
      tags.push(React.createElement(TagSelector, {
        qTags: qTags,
        selectedTags: selectedTags,
        selectorOpened: selectorOpened,
        tagSelectorState: tagSelectorState
      }));
      if (0 == index.length) tags.push(React.createElement(Loading, {})); else {
        tags.push(React.createElement(Paginator, {
          header: header
        }));
        tags.push(React.createElement("section", {
          className: "question-index index"
        }, React.createElement("table", {
          className: "question-index list"
        }, React.createElement("tbody", {}, function() {
          var tags = [];
          var $$obj = index;
          if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
            var question = $$obj[$index];
            tags.push(React.createElement("tr", {
              key: question.id
            }, React.createElement("th", {
              className: "id"
            }, question.id), React.createElement("td", {
              className: "description"
            }, React.createElement("a", {
              onClick: showQuestion.bind(null, question),
              props: question
            }, question.description)), React.createElement("td", {
              className: "way"
            }, question.wayText)));
          } else {
            var $$l = 0;
            for (var $index in $$obj) {
              $$l++;
              var question = $$obj[$index];
              tags.push(React.createElement("tr", {
                key: question.id
              }, React.createElement("th", {
                className: "id"
              }, question.id), React.createElement("td", {
                className: "description"
              }, React.createElement("a", {
                onClick: showQuestion.bind(null, question),
                props: question
              }, question.description)), React.createElement("td", {
                className: "way"
              }, question.wayText)));
            }
          }
          return tags;
        }.call(this)))));
        tags.push(React.createElement(Paginator, {
          header: header
        }));
      }
    }).call(this, "Loading" in locals_for_with ? locals_for_with.Loading : typeof Loading !== "undefined" ? Loading : undefined, "Paginator" in locals_for_with ? locals_for_with.Paginator : typeof Paginator !== "undefined" ? Paginator : undefined, "TagSelector" in locals_for_with ? locals_for_with.TagSelector : typeof TagSelector !== "undefined" ? TagSelector : undefined, "header" in locals_for_with ? locals_for_with.header : typeof header !== "undefined" ? header : undefined, "index" in locals_for_with ? locals_for_with.index : typeof index !== "undefined" ? index : undefined, "qTags" in locals_for_with ? locals_for_with.qTags : typeof qTags !== "undefined" ? qTags : undefined, "selectedTags" in locals_for_with ? locals_for_with.selectedTags : typeof selectedTags !== "undefined" ? selectedTags : undefined, "selectorOpened" in locals_for_with ? locals_for_with.selectorOpened : typeof selectorOpened !== "undefined" ? selectorOpened : undefined, "showQuestion" in locals_for_with ? locals_for_with.showQuestion : typeof showQuestion !== "undefined" ? showQuestion : undefined, "tagSelectorState" in locals_for_with ? locals_for_with.tagSelectorState : typeof tagSelectorState !== "undefined" ? tagSelectorState : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],24:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, Object, isFalse, isTrue, toggle) {
      function jade_join_classes(val) {
        return (Array.isArray(val) ? val.map(jade_join_classes) : val && "object" == typeof val ? Object.keys(val).filter(function(key) {
          return val[key];
        }) : [ val ]).filter(function(val) {
          return null != val && "" !== val;
        }).join(" ");
      }
      tags.push(React.createElement("section", {
        className: "question-q ox-control"
      }, React.createElement("div", {
        onClick: toggle.bind(null, 1),
        className: jade_join_classes([ "question-q", "ox-button", "o", isTrue() ])
      }, React.createElement(Fa, {
        icon: "circle-o"
      })), React.createElement("div", {
        onClick: toggle.bind(null, 0),
        className: jade_join_classes([ "question-q", "ox-button", "x", isFalse() ])
      }, React.createElement(Fa, {
        icon: "times"
      }))));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "Object" in locals_for_with ? locals_for_with.Object : typeof Object !== "undefined" ? Object : undefined, "isFalse" in locals_for_with ? locals_for_with.isFalse : typeof isFalse !== "undefined" ? isFalse : undefined, "isTrue" in locals_for_with ? locals_for_with.isTrue : typeof isTrue !== "undefined" ? isTrue : undefined, "toggle" in locals_for_with ? locals_for_with.toggle : typeof toggle !== "undefined" ? toggle : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],25:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, FreeText, InOrder, Loading, MultipleChoices, Ox, QuestionState, SingleChoice, answers, qTags, question, result, showTaggedIndex, sourceLink, state, submit) {
      tags.push(React.createElement.apply(React, [ "section", {
        className: "question-q body"
      } ].concat(function() {
        var tags = [];
        tags.push(React.createElement("section", {
          className: "question-q text"
        }, React.createElement("h1", {
          className: "question-q q"
        }, React.createElement(Fa, {
          icon: "question-circle"
        }), "問題")));
        tags.push(React.createElement("section", {
          className: "question-q question-area"
        }, React.createElement("div", {
          dangerouslySetInnerHTML: question.marked,
          className: "question-q q-text"
        })));
        tags.push(React.createElement.apply(React, [ "section", {
          className: "question-q answer"
        } ].concat(function() {
          var tags = [];
          tags.push(React.createElement("h1", {
            className: "question-q a"
          }, React.createElement(Fa, {
            icon: "exclamation-circle"
          }), question.pleaseText));
          tags.push(React.createElement("section", {
            className: "question-q answer-area"
          }));
          "free_text" == question.way ? tags.push(React.createElement(FreeText, {
            options: question.options,
            answers: answers,
            result: result
          })) : "ox" == question.way ? tags.push(React.createElement(Ox, {
            options: question.options,
            answers: answers,
            result: result
          })) : "single_choice" == question.way ? tags.push(React.createElement(SingleChoice, {
            options: question.options,
            answers: answers,
            result: result
          })) : "multiple_choices" == question.way ? tags.push(React.createElement(MultipleChoices, {
            options: question.options,
            answers: answers,
            result: result
          })) : "in_order" == question.way && tags.push(React.createElement(InOrder, {
            question: question,
            answers: answers,
            result: result
          }));
          return tags;
        }.call(this))));
        state == QuestionState.MARKED ? tags.push(React.createElement("section", {
          className: "question-q result-area"
        }, React.createElement.apply(React, [ "div", {
          className: "question-q mark-area"
        } ].concat(function() {
          var tags = [];
          result.isCorrect() ? tags.push(React.createElement("h1", {
            className: "question-q mark correct"
          }, React.createElement(Fa, {
            icon: "thumbs-o-up"
          }), result.resultText)) : tags.push(React.createElement("h1", {
            className: "question-q mark incorrect"
          }, React.createElement(Fa, {
            icon: "hand-stop-o"
          }), result.resultText));
          return tags;
        }.call(this))), React.createElement("h1", {
          className: "question-q correct-answer"
        }, React.createElement(Fa, {
          icon: "graduation-cap"
        }), "正解は..."), React.createElement("div", {
          dangerouslySetInnerHTML: result.correctAnswer,
          className: "question-q answer-area"
        }))) : tags.push(React.createElement.apply(React, [ "section", {
          className: "question-q control"
        } ].concat(function() {
          var tags = [];
          state == QuestionState.ASKING ? tags.push(React.createElement("button", {
            disabled: !0,
            className: "question-q button submit disabled"
          }, React.createElement(Fa, {
            icon: "graduation-cap"
          }), " ", question.pleaseText)) : state == QuestionState.ASKED ? tags.push(React.createElement("button", {
            onClick: submit,
            className: "question-q button submit"
          }, React.createElement(Fa, {
            icon: "graduation-cap"
          }), " ", "正解を確認する")) : state == QuestionState.SUBMITTING && tags.push(React.createElement("button", {
            disabled: !0,
            className: "question-q button submit disabled"
          }, React.createElement(Fa, {
            icon: "spinner",
            animation: "pulse"
          }), " ", "確認中..."));
          return tags;
        }.call(this))));
        tags.push(React.createElement.apply(React, [ "section", {
          className: "question-q tagged-tag-area"
        } ].concat(function() {
          var tags = [];
          tags.push(React.createElement("h1", {
            className: "question-q tagged-tag-title"
          }, React.createElement(Fa, {
            icon: "tags"
          }), "タグ"));
          qTags ? tags.push(React.createElement("ul", {
            className: "question-q tagged-tag-body"
          }, function() {
            var tags = [];
            var $$obj = qTags;
            if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
              var tag = $$obj[$index];
              tags.push(React.createElement("li", {
                key: tag.id,
                className: "question-q tagged-tag-tag"
              }, React.createElement(Fa, {
                icon: "tag"
              }), React.createElement("a", {
                onClick: showTaggedIndex.bind(null, tag.id)
              }, React.createElement("span", {
                className: "name"
              }, tag.display))));
            } else {
              var $$l = 0;
              for (var $index in $$obj) {
                $$l++;
                var tag = $$obj[$index];
                tags.push(React.createElement("li", {
                  key: tag.id,
                  className: "question-q tagged-tag-tag"
                }, React.createElement(Fa, {
                  icon: "tag"
                }), React.createElement("a", {
                  onClick: showTaggedIndex.bind(null, tag.id)
                }, React.createElement("span", {
                  className: "name"
                }, tag.display))));
              }
            }
            return tags;
          }.call(this))) : tags.push(React.createElement(Loading, {}));
          return tags;
        }.call(this))));
        question.hasSource() && sourceLink && tags.push(React.createElement("section", {
          className: "question-q source-link-area"
        }, React.createElement("h1", {
          className: "question-q source-link-title"
        }, React.createElement(Fa, {
          icon: "link"
        }), "出典"), React.createElement("p", {}, React.createElement(Fa, {
          icon: "link"
        }), React.createElement("a", {
          href: sourceLink.url
        }, sourceLink.display))));
        return tags;
      }.call(this))));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "FreeText" in locals_for_with ? locals_for_with.FreeText : typeof FreeText !== "undefined" ? FreeText : undefined, "InOrder" in locals_for_with ? locals_for_with.InOrder : typeof InOrder !== "undefined" ? InOrder : undefined, "Loading" in locals_for_with ? locals_for_with.Loading : typeof Loading !== "undefined" ? Loading : undefined, "MultipleChoices" in locals_for_with ? locals_for_with.MultipleChoices : typeof MultipleChoices !== "undefined" ? MultipleChoices : undefined, "Ox" in locals_for_with ? locals_for_with.Ox : typeof Ox !== "undefined" ? Ox : undefined, "QuestionState" in locals_for_with ? locals_for_with.QuestionState : typeof QuestionState !== "undefined" ? QuestionState : undefined, "SingleChoice" in locals_for_with ? locals_for_with.SingleChoice : typeof SingleChoice !== "undefined" ? SingleChoice : undefined, "answers" in locals_for_with ? locals_for_with.answers : typeof answers !== "undefined" ? answers : undefined, "qTags" in locals_for_with ? locals_for_with.qTags : typeof qTags !== "undefined" ? qTags : undefined, "question" in locals_for_with ? locals_for_with.question : typeof question !== "undefined" ? question : undefined, "result" in locals_for_with ? locals_for_with.result : typeof result !== "undefined" ? result : undefined, "showTaggedIndex" in locals_for_with ? locals_for_with.showTaggedIndex : typeof showTaggedIndex !== "undefined" ? showTaggedIndex : undefined, "sourceLink" in locals_for_with ? locals_for_with.sourceLink : typeof sourceLink !== "undefined" ? sourceLink : undefined, "state" in locals_for_with ? locals_for_with.state : typeof state !== "undefined" ? state : undefined, "submit" in locals_for_with ? locals_for_with.submit : typeof submit !== "undefined" ? submit : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],26:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, isActive, isCorrect, isMarked, options, toggle) {
      tags.push(React.createElement("ul", {
        className: "question-q options"
      }, function() {
        var tags = [];
        var $$obj = options;
        if ("number" == typeof $$obj.length) for (var index = 0, $$l = $$obj.length; $$l > index; index++) {
          var option = $$obj[index];
          tags.push(React.createElement("li", {
            onClick: toggle.bind(null, option.id),
            key: option.id,
            className: "question-q option"
          }, React.createElement.apply(React, [ "div", {
            className: "question-q checker"
          } ].concat(function() {
            var tags = [];
            isMarked() && (isCorrect(option.id) ? tags.push(React.createElement("span", {
              className: "question-q mark-on-check correct"
            }, React.createElement(Fa, {
              icon: "circle-o"
            }))) : tags.push(React.createElement("span", {
              className: "question-q mark-on-check incorrect"
            }, React.createElement(Fa, {
              icon: "times"
            }))));
            isActive(option.id) ? tags.push(React.createElement("span", {
              className: "question-q check active"
            }, React.createElement(Fa, {
              icon: "check",
              scale: 2
            }))) : tags.push(React.createElement("span", {
              className: "question-q check"
            }, React.createElement(Fa, {
              icon: "check",
              scale: 2
            })));
            return tags;
          }.call(this))), React.createElement("div", {
            dangerouslySetInnerHTML: option.marked,
            className: "question-q a-text"
          })));
        } else {
          var $$l = 0;
          for (var index in $$obj) {
            $$l++;
            var option = $$obj[index];
            tags.push(React.createElement("li", {
              onClick: toggle.bind(null, option.id),
              key: option.id,
              className: "question-q option"
            }, React.createElement.apply(React, [ "div", {
              className: "question-q checker"
            } ].concat(function() {
              var tags = [];
              isMarked() && (isCorrect(option.id) ? tags.push(React.createElement("span", {
                className: "question-q mark-on-check correct"
              }, React.createElement(Fa, {
                icon: "circle-o"
              }))) : tags.push(React.createElement("span", {
                className: "question-q mark-on-check incorrect"
              }, React.createElement(Fa, {
                icon: "times"
              }))));
              isActive(option.id) ? tags.push(React.createElement("span", {
                className: "question-q check active"
              }, React.createElement(Fa, {
                icon: "check",
                scale: 2
              }))) : tags.push(React.createElement("span", {
                className: "question-q check"
              }, React.createElement(Fa, {
                icon: "check",
                scale: 2
              })));
              return tags;
            }.call(this))), React.createElement("div", {
              dangerouslySetInnerHTML: option.marked,
              className: "question-q a-text"
            })));
          }
        }
        return tags;
      }.call(this)));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "isActive" in locals_for_with ? locals_for_with.isActive : typeof isActive !== "undefined" ? isActive : undefined, "isCorrect" in locals_for_with ? locals_for_with.isCorrect : typeof isCorrect !== "undefined" ? isCorrect : undefined, "isMarked" in locals_for_with ? locals_for_with.isMarked : typeof isMarked !== "undefined" ? isMarked : undefined, "options" in locals_for_with ? locals_for_with.options : typeof options !== "undefined" ? options : undefined, "toggle" in locals_for_with ? locals_for_with.toggle : typeof toggle !== "undefined" ? toggle : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],27:[function(require,module,exports){
module.exports = (function (React) {
  var fn = function(locals) {
    var tags = [];
    var locals_for_with = locals || {};
    (function(Fa, Loading, closeSelector, isChecked, isLocked, isOpen, openSelector, qTags, toggleTag) {
      tags.push(React.createElement.apply(React, [ "section", {
        className: "tag-selector tag-selector-body"
      } ].concat(function() {
        var tags = [];
        if (isOpen()) {
          tags.push(React.createElement("h1", {
            className: "tag-selector sub-title"
          }, React.createElement(Fa, {
            icon: "tags"
          }), "タグを選択"));
          tags.push(React.createElement("ul", {
            className: "tag-selector tag-list-body"
          }, function() {
            var tags = [];
            var $$obj = qTags;
            if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
              var tag = $$obj[$index];
              tag.has_question() && tags.push(React.createElement("li", {
                key: tag.id,
                className: "tag-selector tag-list-tag"
              }, React.createElement("label", {}, React.createElement("input", {
                type: "checkbox",
                checked: isChecked(tag.id),
                onChange: toggleTag.bind(null, tag.id),
                disabled: isLocked()
              }), React.createElement("span", {
                className: "name"
              }, tag.display), React.createElement("span", {
                className: "count"
              }, tag.countText))));
            } else {
              var $$l = 0;
              for (var $index in $$obj) {
                $$l++;
                var tag = $$obj[$index];
                tag.has_question() && tags.push(React.createElement("li", {
                  key: tag.id,
                  className: "tag-selector tag-list-tag"
                }, React.createElement("label", {}, React.createElement("input", {
                  type: "checkbox",
                  checked: isChecked(tag.id),
                  onChange: toggleTag.bind(null, tag.id),
                  disabled: isLocked()
                }), React.createElement("span", {
                  className: "name"
                }, tag.display), React.createElement("span", {
                  className: "count"
                }, tag.countText))));
              }
            }
            return tags;
          }.call(this)));
          tags.push(React.createElement("button", {
            onClick: closeSelector,
            className: "tag-selector tag-selector-opner"
          }, React.createElement(Fa, {
            icon: "chevron-up"
          }), "閉じる"));
          isLocked() && tags.push(React.createElement(Loading, {}));
        } else {
          tags.push(React.createElement("h1", {
            className: "tag-selector sub-title"
          }, React.createElement(Fa, {
            icon: "tags"
          }), "選択中のタグ"));
          tags.push(React.createElement("ul", {
            className: "tag-selector tag-list-body"
          }, function() {
            var tags = [];
            var $$obj = qTags;
            if ("number" == typeof $$obj.length) for (var $index = 0, $$l = $$obj.length; $$l > $index; $index++) {
              var tag = $$obj[$index];
              tag.has_question() && isChecked(tag.id) && tags.push(React.createElement("li", {
                key: tag.id,
                className: "tag-selector tag-list-tag"
              }, React.createElement(Fa, {
                icon: "tag"
              }), React.createElement("span", {
                className: "name"
              }, tag.display)));
            } else {
              var $$l = 0;
              for (var $index in $$obj) {
                $$l++;
                var tag = $$obj[$index];
                tag.has_question() && isChecked(tag.id) && tags.push(React.createElement("li", {
                  key: tag.id,
                  className: "tag-selector tag-list-tag"
                }, React.createElement(Fa, {
                  icon: "tag"
                }), React.createElement("span", {
                  className: "name"
                }, tag.display)));
              }
            }
            return tags;
          }.call(this)));
          tags.push(React.createElement("button", {
            onClick: openSelector,
            className: "tag-selector tag-selector-opner"
          }, React.createElement(Fa, {
            icon: "chevron-down"
          }), "タグを編集する"));
        }
        return tags;
      }.call(this))));
    }).call(this, "Fa" in locals_for_with ? locals_for_with.Fa : typeof Fa !== "undefined" ? Fa : undefined, "Loading" in locals_for_with ? locals_for_with.Loading : typeof Loading !== "undefined" ? Loading : undefined, "closeSelector" in locals_for_with ? locals_for_with.closeSelector : typeof closeSelector !== "undefined" ? closeSelector : undefined, "isChecked" in locals_for_with ? locals_for_with.isChecked : typeof isChecked !== "undefined" ? isChecked : undefined, "isLocked" in locals_for_with ? locals_for_with.isLocked : typeof isLocked !== "undefined" ? isLocked : undefined, "isOpen" in locals_for_with ? locals_for_with.isOpen : typeof isOpen !== "undefined" ? isOpen : undefined, "openSelector" in locals_for_with ? locals_for_with.openSelector : typeof openSelector !== "undefined" ? openSelector : undefined, "qTags" in locals_for_with ? locals_for_with.qTags : typeof qTags !== "undefined" ? qTags : undefined, "toggleTag" in locals_for_with ? locals_for_with.toggleTag : typeof toggleTag !== "undefined" ? toggleTag : undefined);
    if (tags.length === 1 && !Array.isArray(tags[0])) {
      return tags.pop();
    }
    tags.unshift("div", null);
    return React.createElement.apply(React, tags);
  };
  
  fn.locals = function setLocals(locals) {
    var render = this;
    function newRender(additionalLocals) {
      var newLocals = {};
      for (var key in locals) {
        newLocals[key] = locals[key];
      }
      if (additionalLocals) {
        for (var key in additionalLocals) {
          newLocals[key] = additionalLocals[key];
        }
      }
      return render.call(this, newLocals);
    }
    newRender.locals = setLocals;
    return newRender;
  };;
  return fn;
}(React))
},{}],28:[function(require,module,exports){
var Lang;

module.exports = Lang = {
  portal: "QQAポータル"
};


},{}],29:[function(require,module,exports){
var ApiStriker;

module.exports = ApiStriker = (function() {
  function ApiStriker() {}

  ApiStriker._struck = {};

  ApiStriker.strike = function(linker, forceReload) {
    if (!forceReload && linker.isGet && this._struck[linker.paramsUri]) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return resolve(_this._struck[linker.paramsUri]);
        };
      })(this));
    }
    return $.ajax({
      url: '/api' + linker.uri,
      type: linker.method,
      dataType: 'json',
      data: linker.params
    }).then((function(_this) {
      return function(data, __, xhr) {
        var header;
        header = _this.pickHeaderParameters(xhr);
        if (linker.isGet) {
          _this._struck[linker.paramsUri] = {
            body: data,
            header: header
          };
        }
        return $.Deferred().resolve({
          body: data,
          header: header
        });
      };
    })(this));
  };

  ApiStriker.pickHeaderParameters = function(xhr) {
    var header, names, required;
    header = {};
    required = ['Total-Pages', 'Per-Page', 'Current-Page'];
    names = ['total', 'per', 'page'];
    _.each(required, (function(_this) {
      return function(value, index) {
        return header[names[index]] = xhr.getResponseHeader(value);
      };
    })(this));
    return header;
  };

  return ApiStriker;

})();


},{}],30:[function(require,module,exports){
var Cassette;

module.exports = Cassette = (function() {
  Cassette.root = null;

  function Cassette(component, props) {
    this.component = component;
    this.props = props;
  }

  Cassette.prototype.forPusher = function() {
    return [
      this.component, _.merge(this.props, {
        root: Cassette.root
      })
    ];
  };

  return Cassette;

})();


},{}],31:[function(require,module,exports){
var Models;

module.exports = Models = {};

Models.ApiStriker = require('./api-striker');

Models.Cassette = require('./cassette');

Models.Linker = require('./linker');

Models.Mark = require('./mark');

Models.Notice = require('./notice');

Models.PageLink = require('./page-link');

Models.QuestionState = require('./question-state');

Models.Question = require('./question');

Models.Router = require('./router');

Models.SourceLink = require('./sourceLink');

Models.TagSelectorState = require('./tag-selector-state');

Models.Tag = require('./tag');


},{"./api-striker":29,"./cassette":30,"./linker":32,"./mark":33,"./notice":34,"./page-link":35,"./question":37,"./question-state":36,"./router":38,"./sourceLink":39,"./tag":41,"./tag-selector-state":40}],32:[function(require,module,exports){
var Linker;

module.exports = Linker = (function() {
  function Linker(method, uri1, params1) {
    var key, value;
    this.method = method;
    this.uri = uri1;
    this.params = params1;
    this._replacePlaceholder();
    this.key = this.uri + '::' + ((function() {
      var ref, results;
      ref = this.params;
      results = [];
      for (key in ref) {
        value = ref[key];
        results.push(key + ":" + value);
      }
      return results;
    }).call(this)).join('::');
    this.paramsUri = this.isGet && this.params ? this.uri + '?' + ((function() {
      var ref, results;
      ref = this.params;
      results = [];
      for (key in ref) {
        value = ref[key];
        results.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
      }
      return results;
    }).call(this)).join('&') : this.uri;
  }

  Linker.prototype._replacePlaceholder = function() {
    var results;
    results = [];
    while (this.uri.match(/(:([0-9_a-z]+))/)) {
      this.uri = this.uri.replace(RegExp.$1, this.params[RegExp.$2] || '');
      results.push(delete this.params[RegExp.$2]);
    }
    return results;
  };

  Linker.prototype.isGet = function() {
    return this.method === 'get';
  };

  Linker["delete"] = function(uri, params) {
    return new this('delete', uri, params);
  };

  Linker.get = function(uri, params) {
    return new this('get', uri, params);
  };

  Linker.patch = function(uri, params) {
    return new this('patch', uri, params);
  };

  Linker.post = function(uri, params) {
    return new this('post', uri, params);
  };

  Linker.put = function(uri, params) {
    return new this('put', uri, params);
  };

  return Linker;

})();


},{}],33:[function(require,module,exports){
var Mark;

module.exports = Mark = (function() {
  function Mark(mark1, options) {
    this.mark = mark1;
    this.options = options;
    this.resultText = Mark.detectResultText(this);
    this.answers = Mark.arralize(this.mark.correct_answer);
    this.correctAnswer = {
      __html: this.options.length ? _.map(this.answers, (function(_this) {
        return function(id) {
          return _.find(_this.options, function(option) {
            return option.id === id;
          }).marked.__html;
        };
      })(this)).join('\n\n') : this.mark.correct_answer
    };
  }

  Mark.prototype.isCorrect = function() {
    return this.mark.mark;
  };

  Mark.arralize = function(value) {
    if (_.isArray(value)) {
      return value;
    } else {
      return [value];
    }
  };

  Mark.detectResultText = function(mark) {
    if (mark.isCorrect()) {
      return '正解!!';
    } else {
      return '不正解';
    }
  };

  return Mark;

})();


},{}],34:[function(require,module,exports){
var Notice;

module.exports = Notice = (function() {
  function Notice(type, title1, message1) {
    this.type = type;
    this.title = title1;
    this.message = message1;
  }

  Notice.danger = Notice.red = function(title, message) {
    return new this('danger', title, message);
  };

  Notice.success = Notice.green = function(title, message) {
    return new this('success', title, message);
  };

  Notice.information = Notice.yellow = function(title, message) {
    return new this('info', title, message);
  };

  Notice.primary = Notice.blue = function(title, message) {
    return new this('primary', title, message);
  };

  return Notice;

})();


},{}],35:[function(require,module,exports){
var PageLink;

module.exports = PageLink = (function() {
  function PageLink() {}

  return PageLink;

})();


},{}],36:[function(require,module,exports){
var QuestionState;

module.exports = QuestionState = (function() {
  function QuestionState() {}

  QuestionState.LOADING = 'loading';

  QuestionState.ASKING = 'asking';

  QuestionState.ASKED = 'asked';

  QuestionState.SUBMITTING = 'submitting';

  QuestionState.MARKED = 'marked';

  return QuestionState;

})();


},{}],37:[function(require,module,exports){
var Question;

module.exports = Question = (function() {
  function Question(obj) {
    this.id = obj.id;
    this.way = obj.way || '';
    this.text = obj.text || '';
    this.options = _.map(obj.options || [], (function(_this) {
      return function(option) {
        return {
          id: option.id,
          marked: _this.isInOrder() ? {
            __html: Question.trim(marked(option.text))
          } : {
            __html: marked(option.text)
          }
        };
      };
    })(this));
    this.answersNumber = obj.answers_number || -1;
    this.sourceLinkId = obj.source_link_id;
    this.marked = {
      __html: marked(this.text)
    };
    this.description = Question.trim(this.marked.__html).slice(0, 40);
    this.wayText = Question.detectWayText(this);
    this.pleaseText = Question.detectPleaseText(this);
  }

  Question.prototype.hasSource = function() {
    return this.sourceLinkId !== null && this.sourceLinkId !== void 0;
  };

  Question.prototype.isSingleChoice = function() {
    return this.way === 'single_choice';
  };

  Question.prototype.isMultipleChoices = function() {
    return this.way === 'multiple_choices';
  };

  Question.prototype.isFreeText = function() {
    return this.way === 'free_text';
  };

  Question.prototype.isInOrder = function() {
    return this.way === 'in_order';
  };

  Question.prototype.isOx = function() {
    return this.way === 'ox';
  };

  Question.trim = function(html) {
    return html.replace(/<.*?>/igm, '');
  };

  Question.detectPleaseText = function(q) {
    switch (false) {
      case !q.isSingleChoice():
        return 'ひとつ選んでください';
      case !q.isMultipleChoices():
        return '適切なものをすべて選んでください';
      case !q.isFreeText():
        return '答えを入力してください';
      case !q.isInOrder():
        return 'それぞれに対応するものを選んでください';
      case !q.isOx():
        return 'いずれかを選んでください';
      default:
        return '';
    }
  };

  Question.detectWayText = function(q) {
    switch (false) {
      case !q.isSingleChoice():
        return '一つだけ選択';
      case !q.isMultipleChoices():
        return '複数選択';
      case !q.isFreeText():
        return 'テキスト入力';
      case !q.isInOrder():
        return '順に並べる';
      case !q.isOx():
        return 'ox問題';
      default:
        return '';
    }
  };

  return Question;

})();


},{}],38:[function(require,module,exports){
var Router;

module.exports = Router = (function() {
  function Router() {
    this._map = {};
    this._mapped = {};
    this._normalized = {};
  }

  Router.prototype.add = function(url, app) {
    var i, name, normalized, now, ref;
    if (this._find(url)) {
      return false;
    }
    normalized = this._normalize(url);
    now = this._map;
    ref = normalized[0].split('/');
    for (i in ref) {
      name = ref[i];
      if (name === '') {
        continue;
      }
      if (now[name] == null) {
        now[name] = {};
      }
      now = now[name];
    }
    now._app = app;
    now._parameters = normalized[1].split(':');
    return this._mapped[normalized[0]] = true;
  };

  Router.prototype.execute = function(url) {
    var i, name, now, params, ref, ref1, store;
    store = [];
    now = this._map;
    ref = this._strip(url).split('/');
    for (i in ref) {
      name = ref[i];
      if (now[name]) {
        now = now[name];
      } else if (now[':']) {
        store.push(name);
        now = now[':'];
      }
    }
    params = {};
    ref1 = now._parameters;
    for (i in ref1) {
      name = ref1[i];
      params[name] = store[i];
    }
    return now._app(params);
  };

  Router.prototype._find = function(url) {
    var normalized;
    normalized = this._normalize(url);
    return this._mapped[normalized[0]];
  };

  Router.prototype._is_include_placeholder = function(url) {
    return url.match(/:[a-z_0-9]+/) != null;
  };

  Router.prototype._normalize = function(url) {
    if (this._normalized[url]) {
      return this._normalized[url];
    }
    if (!this._is_include_placeholder(url)) {
      return this._normalized[url] = [this._strip(url), ''];
    }
    return this._normalized[url] = this._pickHolder(url, []);
  };

  Router.prototype._pickHolder = function(url, holders) {
    var result;
    result = url.match(/(:[a-z_0-9]+)/);
    if (!result) {
      return [this._strip(url), holders.join(':')];
    }
    return this._pickHolder(url.replace(result[1], ':'), holders.concat(result[1].replace(':', '')));
  };

  Router.prototype._strip = function(url) {
    return url.replace(/\/$/ig, '').replace(/.+?:\/\/(.+?)\//, '/').replace(/\?.*/, '');
  };

  return Router;

})();


},{}],39:[function(require,module,exports){
var SourceLink;

module.exports = SourceLink = (function() {
  function SourceLink(obj) {
    this.id = obj.id;
    this.display = obj.display;
    this.url = obj.url;
  }

  return SourceLink;

})();


},{}],40:[function(require,module,exports){
var TagSelectorState;

module.exports = TagSelectorState = (function() {
  function TagSelectorState() {}

  TagSelectorState.TOGGLED = 'question loading';

  TagSelectorState.LOADING = 'loading tag';

  TagSelectorState.LOADED = 'loaded';

  return TagSelectorState;

})();


},{}],41:[function(require,module,exports){
var Tag;

module.exports = Tag = (function() {
  function Tag(obj) {
    this.id = obj.id;
    this.display = obj.display;
    this.count = obj.count;
    this.countText = "(" + this.count + ")";
  }

  Tag.prototype.has_question = function() {
    return this.count > 0;
  };

  return Tag;

})();


},{}],42:[function(require,module,exports){
var Path;

module.exports = Path = {
  portal: '/',
  q: '/q/:id',
  qIndex: '/q',
  qTags: '/q/:id/tag',
  mark: '/marks',
  tags: '/tags',
  taggedTags: '/tags/tagged/:tags',
  taggedIndex: '/q/tagged/:tags',
  sources: '/src',
  source: '/src/:id',
  render: function(path, values) {
    return _.reduce(values, function(a, value, key) {
      return a.replace("%{" + key + "}", value);
    }, Path[path]);
  }
};


},{}],43:[function(require,module,exports){
var Util,
  slice = [].slice;

module.exports = Util = {

  /*
  React.createElementを変形
  
  ce(object)
    object.$cn -> className
    object.$el -> タグ名
    object.$inc -> 末尾引数、あるいは可変長引数として渡される値
    object -> 引数はそのままpropsとして渡される
  
  普通
  
     ce {$el: 'div', $cn: 'short', $inc: 'text'}
  
     <div className="short">
       text
     </div>
  
  入れ子
  
     Item = ReactClass
       render: ->
         ce {$el: 'li', $inc: 'item'}
  
     ce {$el: 'ul', $inc: [Item, Item]}
  
     <ul>
       {Item}
       {Item}
     </ul>
   */
  ce: function(object) {
    var child, children, i, len, results;
    switch (true) {
      case object != null ? object.hasOwnProperty('$el') : void 0:
        object.className = object.$cn;
        children = this.ce(object.$inc);
        if (_.isArray(children)) {
          return React.createElement.apply(React, [object.$el, object].concat(slice.call(children)));
        } else {
          return React.createElement(object.$el, object, children);
        }
        break;
      case _.isArray(object):
        results = [];
        for (i = 0, len = object.length; i < len; i++) {
          child = object[i];
          results.push(this.ce(child));
        }
        return results;
        break;
      case _.isString(object):
        return object;
      case _.isNumber(object):
        return object;
      case _.isObject(object):
        return object;
      default:
        return '';
    }
  }
};


},{}],44:[function(require,module,exports){
var Fa;

module.exports = Fa = React.createClass({
  render: function() {
    var classes;
    classes = ['fa'];
    classes.push("fa-" + this.props.icon);
    if (this.props.scale != null) {
      classes.push("fa-" + this.props.scale + "x");
    }
    if ((this.props.fixedWidth == null) || this.props.fixedWidth === false) {
      classes.push('fa-fw');
    }
    if (this.props.list) {
      classes.push('fa-li');
    }
    if (this.props.border) {
      classes.push('fa-border');
    }
    if (this.props.pull != null) {
      classes.push("fa-pull-" + this.props.pull);
    }
    if (this.props.animation != null) {
      classes.push("fa-" + this.props.animation);
    }
    if (this.props.rotate != null) {
      classes.push("fa-rotate-" + this.props.rotate);
    }
    if (this.props.flip != null) {
      classes.push("fa-flip-" + this.props.animation);
    }
    return React.createElement('i', {
      className: classes.join(' ')
    });
  }
});


},{}],45:[function(require,module,exports){
var FreeText;

module.exports = FreeText = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.Q.freeText({
      Fa: App.View.Fa,
      options: this.props.options,
      answers: this.props.answers,
      isMarked: (function(_this) {
        return function() {
          return _this.props.result != null;
        };
      })(this),
      input: (function(_this) {
        return function(e) {
          return _this.dispatch('question:answer', e.target.value);
        };
      })(this)
    });
  }
});


},{}],46:[function(require,module,exports){
var SingleChoice;

module.exports = SingleChoice = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    var q;
    q = this.props.question;
    return App.JSX.Q.inOrder({
      Fa: App.View.Fa,
      options: q.options,
      answersNumber: q.answersNumber,
      answers: this.props.answers,
      isActive: (function(_this) {
        return function(id) {
          return _this.props.answers === id;
        };
      })(this),
      isMarked: (function(_this) {
        return function() {
          return _this.props.result != null;
        };
      })(this),
      isCorrect: (function(_this) {
        return function(index, id) {
          return +_this.props.answers[index] === _this.props.result.answers[index];
        };
      })(this),
      select: (function(_this) {
        return function(e) {
          var new_answers, ref;
          new_answers = ((ref = _this.props.answers) != null ? ref.concat() : void 0) || [];
          new_answers[e.target.name] = e.target.value;
          return _this.dispatch('question:answer', new_answers);
        };
      })(this),
      selected: (function(_this) {
        return function(index) {
          var ref, ref1;
          return ((ref = _this.props.answers) != null ? (ref1 = ref[index]) != null ? ref1.toString() : void 0 : void 0) || '';
        };
      })(this)
    });
  }
});


},{}],47:[function(require,module,exports){
var Views;

module.exports = Views = {};

Views.Fa = require('./fa');

Views.FreeText = require('./free-text');

Views.InOrder = require('./in-order');

Views.Loading = require('./loading');

Views.MultipleChoices = require('./multiple_choices');

Views.Ox = require('./ox');

Views.Paginator = require('./paginator');

Views.SingleChoice = require('./single_choice');

Views.TagSelector = require('./tag-selector');


},{"./fa":44,"./free-text":45,"./in-order":46,"./loading":48,"./multiple_choices":49,"./ox":50,"./paginator":51,"./single_choice":52,"./tag-selector":53}],48:[function(require,module,exports){
var Loading;

module.exports = Loading = React.createClass({
  render: function() {
    return App.JSX.loading({
      Fa: App.View.Fa
    });
  }
});


},{}],49:[function(require,module,exports){
var SingleChoice;

module.exports = SingleChoice = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.Q.singleChoice({
      Fa: App.View.Fa,
      options: this.props.options,
      isActive: (function(_this) {
        return function(id) {
          return _.include(_this.props.answers, id);
        };
      })(this),
      isMarked: (function(_this) {
        return function() {
          return _this.props.result != null;
        };
      })(this),
      isCorrect: (function(_this) {
        return function(id) {
          return _.include(_this.props.result.answers, id);
        };
      })(this),
      toggle: (function(_this) {
        return function(id) {
          var new_answers, ref;
          new_answers = ((ref = _this.props.answers) != null ? ref.concat() : void 0) || [];
          if (_.include(new_answers, id)) {
            new_answers = _.reject(new_answers, function(n) {
              return n === id;
            });
          } else {
            new_answers.push(id);
          }
          return _this.dispatch('question:answer', new_answers);
        };
      })(this)
    });
  }
});


},{}],50:[function(require,module,exports){
var Ox;

module.exports = Ox = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.Q.ox({
      Fa: App.View.Fa,
      options: this.props.options,
      isFalse: (function(_this) {
        return function() {
          if (_this.props.answers === 0) {
            return 'active';
          }
        };
      })(this),
      isTrue: (function(_this) {
        return function() {
          if (_this.props.answers === 1) {
            return 'active';
          }
        };
      })(this),
      isMarked: (function(_this) {
        return function() {
          return _this.props.result != null;
        };
      })(this),
      toggle: (function(_this) {
        return function(boolean) {
          return _this.dispatch('question:answer', boolean);
        };
      })(this)
    });
  }
});


},{}],51:[function(require,module,exports){
var Paginator;

module.exports = Paginator = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.paginator({
      links: this.links(),
      paginate: (function(_this) {
        return function(page) {
          return _this.dispatch('question:index:paginate', page);
        };
      })(this)
    });
  },
  links: function() {
    var i, ref, results;
    return _.map((function() {
      results = [];
      for (var i = 1, ref = this.props.header.total; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this), (function(_this) {
      return function(n) {
        return {
          isCurrent: +_this.props.header.page === n,
          page: n
        };
      };
    })(this));
  }
});


},{}],52:[function(require,module,exports){
var SingleChoice;

module.exports = SingleChoice = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    return App.JSX.Q.singleChoice({
      Fa: App.View.Fa,
      options: this.props.options,
      isActive: (function(_this) {
        return function(id) {
          return _this.props.answers === id;
        };
      })(this),
      isCorrect: (function(_this) {
        return function(id) {
          return _this.props.result.answers[0] === id;
        };
      })(this),
      isMarked: (function(_this) {
        return function() {
          return _this.props.result != null;
        };
      })(this),
      toggle: (function(_this) {
        return function(index) {
          return _this.dispatch('question:answer', index);
        };
      })(this)
    });
  }
});


},{}],53:[function(require,module,exports){
var TagSelector;

module.exports = TagSelector = React.createClass({
  mixins: [Arda.mixin],
  render: function() {
    console.log(this.props);
    return App.JSX.Q.tagSelector({
      Fa: App.View.Fa,
      qTags: this.props.qTags,
      Loading: App.View.Loading,
      toggleTag: (function(_this) {
        return function(id) {
          return _this.dispatch('question:tag:toggle', id);
        };
      })(this),
      isChecked: (function(_this) {
        return function(id) {
          return _.include(_this.props.selectedTags, id);
        };
      })(this),
      isLocked: (function(_this) {
        return function() {
          return _this.props.tagSelectorState !== App.TagSelectorState.LOADED;
        };
      })(this),
      isOpen: (function(_this) {
        return function() {
          return _this.props.selectorOpened;
        };
      })(this),
      openSelector: (function(_this) {
        return function() {
          return _this.dispatch('question:tagSelector:toggle');
        };
      })(this),
      closeSelector: (function(_this) {
        return function() {
          return _this.dispatch('question:tagSelector:toggle');
        };
      })(this)
    });
  }
});


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvYXBwLmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC9jb25zdGFudC5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvY29udGV4dHMvYmFzZS1jb250ZXh0LmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC9jb250ZXh0cy9ibGFuay1jb250ZXh0LmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC9jb250ZXh0cy9pbmRleC5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvY29udGV4dHMvbWFpbi1jb250ZXh0LmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC9jb250ZXh0cy9tZW51L2dsb2JhbC1jb250ZXh0LmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC9jb250ZXh0cy9tZW51L2luZGV4LmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC9jb250ZXh0cy9ub3RpZmllci9nb2QtY29udGV4dC5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvY29udGV4dHMvbm90aWZpZXIvaW5kZXguY29mZmVlIiwiL2hvbWUvdGVuL3J1YnlfcHJvamVjdC9xdWlja19xL2xpYi9yZWFjdC9zcmMvYXBwL2NvbnRleHRzL3BvcnRhbC1jb250ZXh0LmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC9jb250ZXh0cy9xL2luZGV4LWNvbnRleHQuY29mZmVlIiwiL2hvbWUvdGVuL3J1YnlfcHJvamVjdC9xdWlja19xL2xpYi9yZWFjdC9zcmMvYXBwL2NvbnRleHRzL3EvaW5kZXguY29mZmVlIiwiL2hvbWUvdGVuL3J1YnlfcHJvamVjdC9xdWlja19xL2xpYi9yZWFjdC9zcmMvYXBwL2NvbnRleHRzL3EvcXVlc3Rpb24tY29udGV4dC5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvanN4L2pzeC5jb2ZmZWUiLCJzcmMvYXBwL2pzeC9sb2FkaW5nLmpzIiwic3JjL2FwcC9qc3gvbWFpbi5qcyIsInNyYy9hcHAvanN4L21lbnUvbWVudS5qcyIsInNyYy9hcHAvanN4L3BhZ2luYXRvci5qcyIsInNyYy9hcHAvanN4L3BvcnRhbC5qcyIsInNyYy9hcHAvanN4L3EvZnJlZS10ZXh0LmpzIiwic3JjL2FwcC9qc3gvcS9pbi1vcmRlci5qcyIsInNyYy9hcHAvanN4L3EvaW5kZXgtcGFnZS5qcyIsInNyYy9hcHAvanN4L3Evb3guanMiLCJzcmMvYXBwL2pzeC9xL3F1ZXN0aW9uLmpzIiwic3JjL2FwcC9qc3gvcS9zaW5nbGUtY2hvaWNlLmpzIiwic3JjL2FwcC9qc3gvcS90YWctc2VsZWN0b3IuanMiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvbGFuZy5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvbW9kZWxzL2FwaS1zdHJpa2VyLmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC9tb2RlbHMvY2Fzc2V0dGUuY29mZmVlIiwiL2hvbWUvdGVuL3J1YnlfcHJvamVjdC9xdWlja19xL2xpYi9yZWFjdC9zcmMvYXBwL21vZGVscy9pbmRleC5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvbW9kZWxzL2xpbmtlci5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvbW9kZWxzL21hcmsuY29mZmVlIiwiL2hvbWUvdGVuL3J1YnlfcHJvamVjdC9xdWlja19xL2xpYi9yZWFjdC9zcmMvYXBwL21vZGVscy9ub3RpY2UuY29mZmVlIiwiL2hvbWUvdGVuL3J1YnlfcHJvamVjdC9xdWlja19xL2xpYi9yZWFjdC9zcmMvYXBwL21vZGVscy9wYWdlLWxpbmsuY29mZmVlIiwiL2hvbWUvdGVuL3J1YnlfcHJvamVjdC9xdWlja19xL2xpYi9yZWFjdC9zcmMvYXBwL21vZGVscy9xdWVzdGlvbi1zdGF0ZS5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvbW9kZWxzL3F1ZXN0aW9uLmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC9tb2RlbHMvcm91dGVyLmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC9tb2RlbHMvc291cmNlTGluay5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvbW9kZWxzL3RhZy1zZWxlY3Rvci1zdGF0ZS5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvbW9kZWxzL3RhZy5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvcGF0aC5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvdXRpbC5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvdmlld3MvZmEuY29mZmVlIiwiL2hvbWUvdGVuL3J1YnlfcHJvamVjdC9xdWlja19xL2xpYi9yZWFjdC9zcmMvYXBwL3ZpZXdzL2ZyZWUtdGV4dC5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvdmlld3MvaW4tb3JkZXIuY29mZmVlIiwiL2hvbWUvdGVuL3J1YnlfcHJvamVjdC9xdWlja19xL2xpYi9yZWFjdC9zcmMvYXBwL3ZpZXdzL2luZGV4LmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC92aWV3cy9sb2FkaW5nLmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC92aWV3cy9tdWx0aXBsZV9jaG9pY2VzLmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC92aWV3cy9veC5jb2ZmZWUiLCIvaG9tZS90ZW4vcnVieV9wcm9qZWN0L3F1aWNrX3EvbGliL3JlYWN0L3NyYy9hcHAvdmlld3MvcGFnaW5hdG9yLmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC92aWV3cy9zaW5nbGVfY2hvaWNlLmNvZmZlZSIsIi9ob21lL3Rlbi9ydWJ5X3Byb2plY3QvcXVpY2tfcS9saWIvcmVhY3Qvc3JjL2FwcC92aWV3cy90YWctc2VsZWN0b3IuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0FBLElBQUE7O0FBQUEsSUFBQSxDQUFpQyxNQUFqQztFQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksYUFBWixFQUFBOzs7QUFFQSxNQUFNLENBQUMsT0FBUCxHQUFpQixHQUFBLEdBQU07O0FBR3ZCLElBQUcsZ0RBQUg7RUFDRSxNQUFNLENBQUMsR0FBUCxHQUFhLElBRGY7OztBQUVBLElBQUcsZ0RBQUg7RUFDRSxNQUFNLENBQUMsR0FBUCxHQUFhLElBRGY7OztBQUdBLElBQUEsQ0FBb0MsTUFBcEM7RUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLGdCQUFaLEVBQUE7OztBQUdBLENBQUMsQ0FBQyxLQUFGLENBQVEsR0FBUixFQUFhLE9BQUEsQ0FBUSxVQUFSLENBQWI7O0FBRUEsR0FBRyxDQUFDLEdBQUosR0FBVSxPQUFBLENBQVEsV0FBUjs7QUFDVixHQUFHLENBQUMsSUFBSixHQUFXLE9BQUEsQ0FBUSxRQUFSOztBQUNYLEdBQUcsQ0FBQyxJQUFKLEdBQVcsT0FBQSxDQUFRLFNBQVI7O0FBQ1gsR0FBRyxDQUFDLElBQUosR0FBVyxPQUFBLENBQVEsUUFBUjs7QUFDWCxHQUFHLENBQUMsSUFBSixHQUFXLE9BQUEsQ0FBUSxRQUFSOztBQUNYLEdBQUcsQ0FBQyxRQUFKLEdBQWUsT0FBQSxDQUFRLFlBQVI7O0FBQ2YsR0FBRyxDQUFDLFdBQUosR0FBa0IsT0FBQSxDQUFRLHlCQUFSOztBQUdsQixDQUFDLENBQUMsS0FBRixDQUFRLEdBQVIsRUFBYSxPQUFBLENBQVEsWUFBUixDQUFiOztBQUVBLEdBQUcsQ0FBQyxLQUFKLEdBQVksU0FBQyxJQUFEO0FBQ1YsTUFBQTtFQUFBLE1BQUEsR0FBYSxJQUFBLElBQUksQ0FBQyxNQUFMLENBQVksSUFBSSxDQUFDLGFBQWpCLEVBQWdDLElBQWhDO1NBQ2IsTUFBTSxDQUFDLFdBQVAsQ0FBbUIsR0FBRyxDQUFDLFdBQXZCO0FBRlU7Ozs7OztBQzFCWixJQUFBOztBQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFFBQUEsR0FDZjtFQUFBLE9BQUEsRUFDRTtJQUFBLGtCQUFBLEVBQW9CLG9EQUFwQjtJQUNBLFNBQUEsRUFBVyxzQkFEWDtJQUVBLFlBQUEsRUFBYyxxQ0FGZDtJQUdBLFVBQUEsRUFBWSxnQ0FIWjtJQUlBLFdBQUEsRUFBYSxnQ0FKYjtJQUtBLFVBQUEsRUFBWSxvREFMWjtJQU1BLFVBQUEsRUFBWSxnQ0FOWjtJQU9BLFFBQUEsRUFBVSxtREFQVjtJQVFBLG9CQUFBLEVBQXNCLG9EQVJ0QjtJQVNBLFdBQUEsRUFBYSxvREFUYjtJQVVBLElBQUEsRUFBTSxTQUFDLElBQUQsRUFBTyxLQUFQO2FBQ0osQ0FBQyxRQUFRLENBQUMsT0FBUSxDQUFBLElBQUEsQ0FBbEIsRUFBeUIsS0FBekIsQ0FBK0IsQ0FBQyxJQUFoQyxDQUFxQyxHQUFyQztJQURJLENBVk47R0FERjtFQWFBLE1BQUEsRUFDRTtJQUFBLFVBQUEsRUFBWSxTQUFDLEtBQUQ7YUFDVixDQUFDLENBQUMsSUFBRixDQUFPLFFBQVEsQ0FBQyxNQUFoQixFQUF3QixDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsR0FBRDtpQkFBUSxHQUFHLENBQUMsS0FBSixLQUFhO1FBQXJCO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF4QixDQUFtRCxDQUFDO0lBRDFDLENBQVo7SUFFQSxRQUFBLEVBQVUsU0FBQyxLQUFEO2FBQ1IsQ0FBQyxDQUFDLElBQUYsQ0FBTyxRQUFRLENBQUMsU0FBaEIsRUFBMkIsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFDLEdBQUQ7aUJBQVEsR0FBRyxDQUFDLEtBQUosS0FBYTtRQUFyQjtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBM0IsQ0FBc0QsQ0FBQztJQUQvQyxDQUZWO0lBSUEsVUFBQSxFQUFZLFNBQUMsS0FBRDthQUNWLENBQUMsQ0FBQyxJQUFGLENBQU8sUUFBUSxDQUFDLFdBQWhCLEVBQTZCLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxHQUFEO2lCQUFRLEdBQUcsQ0FBQyxLQUFKLEtBQWE7UUFBckI7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTdCLENBQXdELENBQUM7SUFEL0MsQ0FKWjtHQWRGO0VBb0JBLElBQUEsRUFDRTtJQUFBLFFBQUEsRUFDRTtNQUFBLEtBQUEsRUFBTyxPQUFQO01BQ0EsSUFBQSxFQUFNLG1CQUROO01BRUEsSUFBQSxFQUFNLFNBRk47TUFHQSxnQkFBQSxFQUFrQixJQUhsQjtNQUlBLGtCQUFBLEVBQW9CLFNBSnBCO01BS0EsaUJBQUEsRUFBbUIsTUFMbkI7TUFNQSxjQUFBLEVBQWdCLElBTmhCO01BT0EsZ0JBQUEsRUFBa0IsT0FQbEI7TUFRQSxpQkFBQSxFQUFtQixJQVJuQjtLQURGO0dBckJGO0VBK0JBLFVBQUEsRUFDRTtJQUFBLGFBQUEsRUFDRTtNQUFBLFdBQUEsRUFBYSxJQUFiO01BQ0EsSUFBQSxFQUFNLEtBRE47TUFFQSxRQUFBLEVBQVUsSUFGVjtNQUdBLFlBQUEsRUFBYyxJQUhkO0tBREY7R0FoQ0Y7Ozs7O0FDREYsSUFBQSxXQUFBO0VBQUE7OztBQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQXVCOzs7Ozs7O3dCQUNyQixRQUFBLEdBQVUsU0FBQyxTQUFEO0lBQ1IsMkNBQUEsU0FBQTtJQUVBLFNBQUEsQ0FBVSxpQkFBVixFQUE2QixTQUFBO2FBQzNCLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBQyxDQUFBLEtBQUssQ0FBQztJQURZLENBQTdCO1dBR0EsU0FBQSxDQUFVLGlCQUFWLEVBQTZCLFNBQUE7YUFDM0IsSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFOLENBQVcsaUJBQVg7SUFEMkIsQ0FBN0I7RUFOUTs7d0JBU1YsU0FBQSxHQUFXLFNBQUMsTUFBRDtXQUNULElBQUMsQ0FBQSxJQUFJLENBQUMsU0FBTixDQUFnQixNQUFoQjtFQURTOzt3QkFHWCxhQUFBLEdBQWUsU0FBQTtXQUNiLElBQUMsQ0FBQSxJQUFJLENBQUMsYUFBTixDQUFBO0VBRGE7O3dCQUdmLFlBQUEsR0FBYyxTQUFBO1dBQ1osSUFBQyxDQUFBLElBQUksQ0FBQyxZQUFOLENBQUE7RUFEWTs7OztHQWhCMkIsSUFBSSxDQUFDOzs7O0FDR2hELElBQUEsWUFBQTtFQUFBOzs7QUFBQSxNQUFNLENBQUMsT0FBUCxHQUF1Qjs7Ozs7Ozt5QkFDckIsU0FBQSxHQUFXLFNBQUMsS0FBRDtXQUFXO0VBQVg7O3lCQUVYLFNBQUEsR0FBVyxLQUFLLENBQUMsV0FBTixDQUNUO0lBQUEsTUFBQSxFQUFRLFNBQUE7YUFDTixLQUFLLENBQUMsYUFBTixDQUFvQixlQUFwQixFQUFxQyxFQUFyQyxFQUF5QyxjQUFBLEdBQWUsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUF0QixHQUEyQixLQUFwRTtJQURNLENBQVI7R0FEUzs7OztHQUgrQixJQUFJLENBQUM7Ozs7QUNIakQsSUFBQTs7QUFBQSxNQUFNLENBQUMsT0FBUCxHQUFpQixRQUFBLEdBQVc7O0FBQzVCLFFBQVEsQ0FBQyxXQUFULEdBQXVCLE9BQUEsQ0FBUSxnQkFBUjs7QUFDdkIsUUFBUSxDQUFDLFlBQVQsR0FBd0IsT0FBQSxDQUFRLGlCQUFSOztBQUN4QixRQUFRLENBQUMsV0FBVCxHQUF1QixPQUFBLENBQVEsZ0JBQVI7O0FBQ3ZCLFFBQVEsQ0FBQyxJQUFULEdBQWdCLE9BQUEsQ0FBUSxRQUFSOztBQUNoQixRQUFRLENBQUMsUUFBVCxHQUFvQixPQUFBLENBQVEsWUFBUjs7QUFDcEIsUUFBUSxDQUFDLGFBQVQsR0FBeUIsT0FBQSxDQUFRLGtCQUFSOztBQUN6QixRQUFRLENBQUMsQ0FBVCxHQUFhLE9BQUEsQ0FBUSxLQUFSOzs7O0FDRWIsSUFBQSxXQUFBO0VBQUE7Ozs7QUFBQSxNQUFNLENBQUMsT0FBUCxHQUF1QjtBQUNyQixNQUFBOzs7Ozs7Ozs7O3dCQUFBLFNBQUEsR0FBVyxLQUFLLENBQUMsV0FBTixDQUNUO0lBQUEsTUFBQSxFQUFRLENBQUMsSUFBSSxDQUFDLEtBQU4sQ0FBUjtJQUNBLE1BQUEsRUFBUSxTQUFBO2FBQ04sR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFSLENBQUE7SUFETSxDQURSO0lBSUEsaUJBQUEsRUFBbUIsU0FBQTtBQUNqQixVQUFBO01BQUEsT0FBQSxHQUFVO1FBQ1IsT0FBQSxFQUFhLElBQUEsSUFBSSxDQUFDLE1BQUwsQ0FBWSxJQUFJLENBQUMsYUFBakIsRUFBZ0MsS0FBSyxDQUFDLFdBQU4sQ0FBa0IsSUFBQyxDQUFBLElBQUksQ0FBQyxPQUF4QixDQUFoQyxDQURMO1FBRVIsUUFBQSxFQUFjLElBQUEsSUFBSSxDQUFDLE1BQUwsQ0FBWSxJQUFJLENBQUMsYUFBakIsRUFBZ0MsS0FBSyxDQUFDLFdBQU4sQ0FBa0IsSUFBQyxDQUFBLElBQUksQ0FBQyxRQUF4QixDQUFoQyxDQUZOO1FBR1IsSUFBQSxFQUFVLElBQUEsSUFBSSxDQUFDLE1BQUwsQ0FBWSxJQUFJLENBQUMsYUFBakIsRUFBZ0MsS0FBSyxDQUFDLFdBQU4sQ0FBa0IsSUFBQyxDQUFBLElBQUksQ0FBQyxJQUF4QixDQUFoQyxDQUhGOztNQUtWLE9BQU8sQ0FBQyxHQUFSLENBQVksaUJBQVosRUFBK0IsT0FBL0I7YUFDQSxJQUFDLENBQUEsUUFBRCxDQUFVLHFCQUFWLEVBQWlDLE9BQWpDO0lBUGlCLENBSm5CO0dBRFM7O0VBZVgsUUFBQSxHQUFXOztFQUNYLFFBQUEsR0FBVzs7RUFDWCxJQUFBLEdBQU87O3dCQUVQLFNBQUEsR0FBVyxTQUFDLEtBQUQ7V0FBVztFQUFYOzt3QkFFWCxvQkFBQSxHQUFzQixTQUFDLEtBQUQsRUFBUSxLQUFSO1dBQWtCO0VBQWxCOzt3QkFFdEIsUUFBQSxHQUFVLFNBQUMsU0FBRDtJQUNSLDJDQUFBLFNBQUE7SUFFQSxTQUFBLENBQVUsaUJBQVYsRUFBNkIsU0FBQTtNQUMzQixJQUFDLENBQUEsb0JBQUQsQ0FBQTtNQUNBLElBQUMsQ0FBQSxpQkFBRCxDQUFBO2FBQ0EsSUFBQyxDQUFBLHVCQUFELENBQUE7SUFIMkIsQ0FBN0I7SUFLQSxTQUFBLENBQVUscUJBQVYsRUFBaUMsSUFBQyxDQUFBLGtCQUFsQztJQUNBLFNBQUEsQ0FBVSxlQUFWLEVBQTJCLElBQUMsQ0FBQSxhQUE1QjtJQUVBLFNBQUEsQ0FBVSxnQkFBVixFQUE0QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsS0FBRCxFQUFRLE9BQVIsR0FBQTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBNUI7SUFDQSxTQUFBLENBQVUsWUFBVixFQUF3QixTQUFBO2FBQUcsTUFBTSxDQUFDLFFBQVAsQ0FBZ0IsQ0FBaEIsRUFBbUIsQ0FBbkI7SUFBSCxDQUF4QjtJQUNBLFNBQUEsQ0FBVSxVQUFWLEVBQXNCLFNBQUE7YUFDcEIsSUFBQyxDQUFBLGFBQUQsQ0FBZSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQVgsQ0FBZSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQXhCLENBQWY7SUFEb0IsQ0FBdEI7SUFHQSxTQUFBLENBQVUsYUFBVixFQUF5QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsS0FBRCxFQUFRLE9BQVIsR0FBQTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBekI7SUFDQSxTQUFBLENBQVUsY0FBVixFQUEwQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsTUFBRDtlQUFXLE9BQU8sQ0FBQyxTQUFSLENBQWtCLEVBQWxCLEVBQXNCLElBQXRCLEVBQTRCLE1BQU0sQ0FBQyxTQUFuQztNQUFYO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUExQjtJQUVBLFNBQUEsQ0FBVSxRQUFWLEVBQW9CLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUNsQixLQUFDLENBQUEsTUFBRCxDQUFRLFNBQUMsS0FBRDtpQkFBVztRQUFYLENBQVI7TUFEa0I7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXBCO0lBR0EsU0FBQSxDQUFVLGVBQVYsRUFBMkIsU0FBQyxDQUFEO2FBQ3pCLElBQUMsQ0FBQSxhQUFELENBQWUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFYLENBQWUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUF4QixFQUEyQjtRQUFBLEVBQUEsRUFBSSxDQUFDLENBQUMsRUFBTjtPQUEzQixDQUFmO0lBRHlCLENBQTNCO0lBR0EsU0FBQSxDQUFVLGlCQUFWLEVBQTZCLFNBQUMsQ0FBRDthQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQVosQ0FBQTtJQUQyQixDQUE3QjtXQUdBLFNBQUEsQ0FBVSx1QkFBVixFQUFtQyxTQUFDLEVBQUQ7YUFDakMsSUFBQyxDQUFBLGFBQUQsQ0FBZSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQVgsQ0FBZSxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQXhCLEVBQXFDO1FBQUEsSUFBQSxFQUFNLENBQUMsRUFBRCxDQUFOO09BQXJDLENBQWY7SUFEaUMsQ0FBbkM7RUE1QlE7O3dCQW9DVixTQUFBLEdBQVcsU0FBQyxNQUFELEVBQVMsV0FBVDtXQUNULEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBZixDQUFzQixNQUF0QixFQUE4QixXQUE5QjtFQURTOzt3QkFPWCx1QkFBQSxHQUF5QixTQUFBO0lBQ3ZCLFdBQVcsQ0FBQyxhQUFaLENBQUE7SUFDQSxDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsRUFBVixDQUFhLFdBQVcsQ0FBQyxRQUF6QixFQUFtQyxJQUFDLENBQUEsU0FBcEM7V0FDQSxDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsRUFBVixDQUFhLFdBQVcsQ0FBQyxPQUF6QixFQUFrQyxJQUFDLENBQUEsUUFBbkM7RUFIdUI7O3dCQUt6QixrQkFBQSxHQUFvQixTQUFDLE9BQUQ7SUFFbEIsSUFBQyxDQUFBLE9BQUQsR0FBVyxPQUFPLENBQUM7SUFDbkIsSUFBQyxDQUFBLFFBQUQsR0FBWSxPQUFPLENBQUM7SUFDcEIsSUFBQyxDQUFBLElBQUQsR0FBUSxPQUFPLENBQUM7SUFHaEIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxXQUFULENBQXFCLEdBQUcsQ0FBQyxZQUF6QixFQUF1QztNQUFFLElBQUEsRUFBTSxTQUFSO0tBQXZDLENBQTJELENBQUMsSUFBNUQsQ0FBaUUsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO2VBQy9ELEtBQUMsQ0FBQSxnQkFBRCxDQUFBO01BRCtEO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFqRTtJQUVBLElBQUMsQ0FBQSxRQUFRLENBQUMsV0FBVixDQUFzQixHQUFHLENBQUMsWUFBMUIsRUFBd0M7TUFBRSxJQUFBLEVBQU0sVUFBUjtLQUF4QyxDQUE2RCxDQUFDLElBQTlELENBQW1FLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUNqRSxLQUFDLENBQUEsUUFBUSxDQUFDLGNBQVYsQ0FBeUIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUF0QyxFQUFrRDtVQUFFLElBQUEsRUFBTSxLQUFSO1NBQWxEO01BRGlFO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFuRTtXQUVBLElBQUMsQ0FBQSxJQUFJLENBQUMsV0FBTixDQUFrQixHQUFHLENBQUMsWUFBdEIsRUFBb0M7TUFBRSxJQUFBLEVBQU0sTUFBUjtLQUFwQyxDQUFxRCxDQUFDLElBQXRELENBQTJELENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUN6RCxLQUFDLENBQUEsSUFBSSxDQUFDLGNBQU4sQ0FBcUIsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUE5QixFQUE2QztVQUFFLElBQUEsRUFBTSxLQUFSO1NBQTdDO01BRHlEO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUEzRDtFQVhrQjs7d0JBY3BCLGlCQUFBLEdBQW1CLFNBQUE7SUFFakIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFiLEdBQW9CO0lBR3BCLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxHQUFHLENBQUMsTUFBSixDQUFBO0lBRWQsSUFBQyxDQUFBLE1BQU0sQ0FBQyxHQUFSLENBQVksR0FBWixFQUFpQixTQUFDLE1BQUQ7YUFBZSxJQUFBLEdBQUcsQ0FBQyxRQUFKLENBQWEsR0FBRyxDQUFDLGFBQWpCLEVBQWdDLE1BQWhDO0lBQWYsQ0FBakI7SUFDQSxJQUFDLENBQUEsTUFBTSxDQUFDLEdBQVIsQ0FBWSxJQUFaLEVBQWtCLFNBQUMsTUFBRDthQUFlLElBQUEsR0FBRyxDQUFDLFFBQUosQ0FBYSxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQW5CLEVBQWlDLE1BQWpDO0lBQWYsQ0FBbEI7SUFDQSxJQUFDLENBQUEsTUFBTSxDQUFDLEdBQVIsQ0FBWSxpQkFBWixFQUErQixTQUFDLE1BQUQ7YUFBZSxJQUFBLEdBQUcsQ0FBQyxRQUFKLENBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFuQixFQUFpQyxNQUFqQztJQUFmLENBQS9CO0lBQ0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxHQUFSLENBQVksWUFBWixFQUEwQixTQUFDLE1BQUQ7YUFBZSxJQUFBLEdBQUcsQ0FBQyxRQUFKLENBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFuQixFQUFpQyxNQUFqQztJQUFmLENBQTFCO1dBQ0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxHQUFSLENBQVksUUFBWixFQUFzQixTQUFDLE1BQUQ7YUFBZSxJQUFBLEdBQUcsQ0FBQyxRQUFKLENBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQyxlQUFuQixFQUFvQyxNQUFwQztJQUFmLENBQXRCO0VBWGlCOzt3QkFhbkIsZ0JBQUEsR0FBa0IsU0FBQTtBQUNoQixRQUFBO1dBQUEsT0FBQSxJQUFDLENBQUEsT0FBRCxDQUFRLENBQUMsV0FBVCxZQUFxQixJQUFDLENBQUEsZUFBRCxDQUFBLENBQWtCLENBQUMsU0FBbkIsQ0FBQSxDQUFyQjtFQURnQjs7d0JBR2xCLG9CQUFBLEdBQXNCLFNBQUEsR0FBQTs7d0JBS3RCLFNBQUEsR0FBVyxTQUFDLENBQUQ7QUFDVCxRQUFBO1dBQUEsT0FBQSxJQUFDLENBQUEsT0FBRCxDQUFRLENBQUMsV0FBVCxZQUFxQixJQUFDLENBQUEsZUFBRCxDQUFBLENBQWtCLENBQUMsU0FBbkIsQ0FBQSxDQUFyQjtFQURTOzt3QkFHWCxRQUFBLEdBQVUsU0FBQyxDQUFEO0FBQ1IsUUFBQTtXQUFBLE9BQUEsSUFBQyxDQUFBLE9BQUQsQ0FBUSxDQUFDLFdBQVQsWUFBcUIsSUFBQyxDQUFBLGVBQUQsQ0FBQSxDQUFrQixDQUFDLFNBQW5CLENBQUEsQ0FBckI7RUFEUTs7d0JBTVYsZUFBQSxHQUFpQixTQUFBO1dBQ2YsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLENBQWdCLElBQUMsQ0FBQSxhQUFELENBQUEsQ0FBaEI7RUFEZTs7d0JBR2pCLHFCQUFBLEdBQXVCLFNBQUMsR0FBRDtBQUNyQixRQUFBO0lBQUEsUUFBQSxHQUFXLENBQ1QsYUFEUyxFQUVULFVBRlMsRUFHVCxjQUhTLEVBSVQsZUFKUyxFQUtULGNBTFM7V0FPWCxDQUFDLENBQUMsTUFBRixDQUFTLFFBQVQsRUFBbUIsU0FBQyxDQUFELEVBQUksR0FBSjtNQUNqQixPQUFPLENBQUMsR0FBUixDQUFZLEdBQVo7TUFDQSxDQUFFLENBQUEsR0FBQSxDQUFGLEdBQVMsR0FBRyxDQUFDLGlCQUFKLENBQXNCLEdBQXRCO2FBQ1Q7SUFIaUIsQ0FBbkIsRUFJRSxFQUpGO0VBUnFCOzt3QkFjdkIsYUFBQSxHQUFlLFNBQUE7V0FDYixRQUFRLENBQUMsSUFBSSxDQUFDLE9BQWQsQ0FBc0IsaUJBQXRCLEVBQXlDLEdBQXpDO0VBRGE7O3dCQUdmLFlBQUEsR0FBYyxTQUFBO1dBQ1osUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFkLENBQXNCLGlCQUF0QixFQUF5QyxHQUF6QyxDQUE2QyxDQUFDLE9BQTlDLENBQXNELE1BQXRELEVBQThELEVBQTlEO0VBRFk7O3dCQUdkLGNBQUEsR0FBZ0IsU0FBQyxHQUFEO0FBQ2QsUUFBQTtJQUFBLFlBQUEsR0FBZSxRQUFRLENBQUMsYUFBVCxDQUF1QixHQUF2QjtJQUNmLFlBQVksQ0FBQyxJQUFiLEdBQW9CLFFBQVEsQ0FBQztJQUM3QixTQUFBLEdBQVksUUFBUSxDQUFDLGFBQVQsQ0FBdUIsR0FBdkI7QUFFWjtNQUNFLFNBQVMsQ0FBQyxJQUFWLEdBQWlCO01BQ2pCLFNBQVMsQ0FBQyxJQUFWLEdBQWlCLFNBQVMsQ0FBQztBQUUzQixhQUFPLENBQUMsU0FBUyxDQUFDLFFBQVgsSUFBdUIsQ0FBQyxTQUFTLENBQUMsSUFBbEMsSUFDSCxDQUFDLFlBQVksQ0FBQyxRQUFiLEdBQXdCLElBQXhCLEdBQStCLFlBQVksQ0FBQyxJQUE1QyxLQUNDLFNBQVMsQ0FBQyxRQUFWLEdBQXFCLElBQXJCLEdBQTRCLFNBQVMsQ0FBQyxJQUR4QyxFQUxOO0tBQUEsYUFBQTtNQU9NO0FBQ0osYUFBTyxLQVJUOztFQUxjOzt3QkFtQmhCLGFBQUEsR0FBZSxTQUFDLE1BQUQ7QUFDYixRQUFBO0lBQUEsT0FBTyxDQUFDLFNBQVIsQ0FBa0IsRUFBbEIsRUFBc0IsSUFBdEIsRUFBNEIsTUFBTSxDQUFDLEdBQW5DO1dBQ0EsT0FBQSxJQUFDLENBQUEsT0FBRCxDQUFRLENBQUMsV0FBVCxZQUFxQixJQUFDLENBQUEsZUFBRCxDQUFBLENBQWtCLENBQUMsU0FBbkIsQ0FBQSxDQUFyQixDQUF1RCxDQUFDLElBQXhELENBQTZELENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUMzRCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQVosQ0FBQTtNQUQyRDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBN0Q7RUFGYTs7OztHQTlKMEIsSUFBSSxDQUFDOzs7O0FDTGhELElBQUEsYUFBQTtFQUFBOzs7QUFBQSxNQUFNLENBQUMsT0FBUCxHQUF1Qjs7Ozs7OzswQkFDckIsU0FBQSxHQUFXLEtBQUssQ0FBQyxXQUFOLENBQ1Q7SUFBQSxNQUFBLEVBQVEsQ0FBQyxJQUFJLENBQUMsS0FBTixDQUFSO0lBRUEsTUFBQSxFQUFRLFNBQUE7YUFDTixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFiLENBQ0U7UUFBQSxFQUFBLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFaO1FBQ0EsTUFBQSxFQUFRLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUE7bUJBQ04sS0FBQyxDQUFBLFFBQUQsQ0FBVSxVQUFWO1VBRE07UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBRFI7T0FERjtJQURNLENBRlI7R0FEUzs7MEJBV1gsU0FBQSxHQUFXLFNBQUMsS0FBRDtXQUFXO0VBQVg7OzBCQUVYLFFBQUEsR0FBVSxTQUFDLFNBQUQ7SUFDUiw2Q0FBQSxTQUFBO1dBQ0EsU0FBQSxDQUFVLFVBQVYsRUFBc0IsU0FBQyxFQUFEO2FBQU8sSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFOLENBQVcsVUFBWDtJQUFQLENBQXRCO0VBRlE7Ozs7R0FkaUMsR0FBRyxDQUFDOzs7O0FDSmpELElBQUE7O0FBQUEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsSUFBQSxHQUFPOztBQUN4QixJQUFJLENBQUMsYUFBTCxHQUFxQixPQUFBLENBQVEsa0JBQVI7Ozs7QUNJckIsSUFBQSxVQUFBO0VBQUE7OztBQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQXVCOzs7Ozs7O3VCQUNyQixTQUFBLEdBQVcsU0FBQyxLQUFEO1dBQVc7RUFBWDs7dUJBRVgsU0FBQSxHQUFXLEtBQUssQ0FBQyxXQUFOLENBQ1Q7SUFBQSxNQUFBLEVBQVEsU0FBQTthQUNOLEtBQUssQ0FBQyxhQUFOLENBQW9CLEtBQXBCLEVBQTJCLEVBQTNCO0lBRE0sQ0FBUjtHQURTOzs7O0dBSDZCLEdBQUcsQ0FBQzs7OztBQ0w5QyxJQUFBOztBQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFFBQUEsR0FBVzs7QUFDNUIsUUFBUSxDQUFDLFVBQVQsR0FBc0IsT0FBQSxDQUFRLGVBQVI7Ozs7QUNFdEIsSUFBQSxZQUFBO0VBQUE7OztBQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQXVCO0FBQ3JCLE1BQUE7Ozs7Ozs7O3lCQUFBLFNBQUEsR0FBVyxNQUFBLEdBQVMsS0FBSyxDQUFDLFdBQU4sQ0FDbEI7SUFBQSxNQUFBLEVBQVEsQ0FBQyxJQUFJLENBQUMsS0FBTixDQUFSO0lBRUEsTUFBQSxFQUFRLFNBQUE7QUFDTixVQUFBO2FBQUEsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFSLENBQ0U7UUFBQSxFQUFBLEVBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFiO1FBQ0EsT0FBQSxFQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FEbEI7UUFFQSxLQUFBOztBQUFRO0FBQUE7ZUFBQSxxQ0FBQTs7eUJBQ0YsSUFBQSxHQUFHLENBQUMsR0FBSixDQUFRLENBQVI7QUFERTs7cUJBRlI7UUFLQSxPQUFBLEVBQVMsSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUxoQjtRQU1BLGVBQUEsRUFBaUIsQ0FBQSxTQUFBLEtBQUE7aUJBQUEsU0FBQyxFQUFEO21CQUNmLEtBQUMsQ0FBQSxRQUFELENBQVUsdUJBQVYsRUFBbUMsRUFBbkM7VUFEZTtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FOakI7UUFRQSxlQUFBLEVBQWlCLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUE7bUJBQUcsS0FBQyxDQUFBLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBZixLQUF5QjtVQUE1QjtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FSakI7UUFTQSxZQUFBLEVBQWMsQ0FBQSxTQUFBLEtBQUE7aUJBQUEsU0FBQTttQkFBRyxLQUFDLENBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFaLEtBQXNCO1VBQXpCO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQVRkO09BREY7SUFETSxDQUZSO0dBRGtCOzt5QkFrQnBCLFNBQUEsR0FBVyxTQUFDLEtBQUQ7V0FDVDtNQUFBLElBQUEsRUFBTSxFQUFOO01BQ0EsT0FBQSxFQUFTLEVBRFQ7O0VBRFM7O3lCQUlYLG9CQUFBLEdBQXNCLFNBQUMsS0FBRCxFQUFRLEtBQVI7V0FDcEI7RUFEb0I7O3lCQUd0QixRQUFBLEdBQVUsU0FBQyxTQUFEO0lBQ1IsNENBQUEsU0FBQTtJQUVBLFNBQUEsQ0FBVSxpQkFBVixFQUE2QixTQUFBO2FBQUcsSUFBQyxDQUFBLGVBQUQsQ0FBQTtJQUFILENBQTdCO0lBQ0EsU0FBQSxDQUFVLGlCQUFWLEVBQTZCLFNBQUE7YUFBRyxJQUFDLENBQUEsa0JBQUQsQ0FBQTtJQUFILENBQTdCO0lBQ0EsU0FBQSxDQUFVLGVBQVYsRUFBMkIsU0FBQyxDQUFEO2FBQU0sSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFOLENBQVcsZUFBWCxFQUE0QixDQUE1QjtJQUFOLENBQTNCO1dBQ0EsU0FBQSxDQUFVLHVCQUFWLEVBQW1DLFNBQUMsRUFBRDthQUFPLElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBTixDQUFXLHVCQUFYLEVBQW9DLENBQUMsRUFBRCxDQUFwQztJQUFQLENBQW5DO0VBTlE7O3lCQVFWLGVBQUEsR0FBaUIsU0FBQTtXQUNmLElBQUMsQ0FBQSxTQUFELENBQVcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFYLENBQWUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUF4QixDQUFYLENBQXlDLENBQUMsSUFBMUMsQ0FBK0MsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLElBQUQ7ZUFDN0MsS0FBQyxDQUFBLE1BQUQsQ0FBUSxTQUFDLENBQUQ7aUJBQU8sQ0FBQyxDQUFDLEtBQUYsQ0FBUSxDQUFSLEVBQVc7WUFBQSxJQUFBLEVBQU0sSUFBSSxDQUFDLElBQVg7V0FBWDtRQUFQLENBQVI7TUFENkM7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQS9DO0VBRGU7O3lCQUlqQixrQkFBQSxHQUFvQixTQUFBO1dBQ2xCLElBQUMsQ0FBQSxTQUFELENBQVcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFYLENBQWUsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUF4QixDQUFYLENBQTRDLENBQUMsSUFBN0MsQ0FBa0QsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLElBQUQ7ZUFDaEQsS0FBQyxDQUFBLE1BQUQsQ0FBUSxTQUFDLENBQUQ7aUJBQU8sQ0FBQyxDQUFDLEtBQUYsQ0FBUSxDQUFSLEVBQVc7WUFBQSxPQUFBLEVBQVMsSUFBSSxDQUFDLElBQWQ7V0FBWDtRQUFQLENBQVI7TUFEZ0Q7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxEO0VBRGtCOzs7O0dBdENzQixHQUFHLENBQUM7Ozs7QUNEaEQsSUFBQSxZQUFBO0VBQUE7Ozs7QUFBQSxNQUFNLENBQUMsT0FBUCxHQUF1Qjs7Ozs7Ozs7eUJBQ3JCLFNBQUEsR0FBVyxTQUFDLEtBQUQ7V0FDVDtNQUFBLEtBQUEsRUFBTyxFQUFQO01BQ0EsTUFBQSxFQUFRLEVBRFI7TUFFQSxLQUFBLEVBQU8sRUFGUDtNQUdBLGdCQUFBLEVBQWtCLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUh2QztNQUlBLGNBQUEsRUFBZ0IsS0FKaEI7TUFLQSxZQUFBLEVBQWlCLENBQUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFYLEdBQ1osRUFEWSxHQUdaLENBQUMsQ0FBQyxHQUFGLENBQU0sSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBWixDQUFrQixHQUFsQixDQUFOLEVBQThCLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxDQUFEO2lCQUFNLENBQUM7UUFBUDtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBOUIsQ0FSRjtNQVNBLFFBQUEsRUFBVSxFQVRWOztFQURTOzt5QkFZWCxvQkFBQSxHQUFzQixTQUFDLEtBQUQsRUFBUSxLQUFSO1dBQ3BCO0VBRG9COzt5QkFHdEIsU0FBQSxHQUFXLEtBQUssQ0FBQyxXQUFOLENBQ1Q7SUFBQSxNQUFBLEVBQVEsQ0FBQyxJQUFJLENBQUMsS0FBTixDQUFSO0lBRUEsZUFBQSxFQUFpQixTQUFBO2FBQ2Y7UUFBQSxHQUFBLEVBQUssSUFBTDs7SUFEZSxDQUZqQjtJQUtBLE1BQUEsRUFBUSxTQUFBO0FBQ04sVUFBQTthQUFBLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVYsQ0FDRTtRQUFBLFNBQUEsRUFBVyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQXBCO1FBQ0EsV0FBQSxFQUFhLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FEdEI7UUFFQSxPQUFBLEVBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUZsQjtRQUdBLEtBQUE7O0FBQVE7QUFBQTtlQUFBLHFDQUFBOzt5QkFDRixJQUFBLEdBQUcsQ0FBQyxRQUFKLENBQWEsQ0FBYjtBQURFOztxQkFIUjtRQU1BLE1BQUEsRUFBUSxJQUFDLENBQUEsS0FBSyxDQUFDLE1BTmY7UUFPQSxZQUFBLEVBQWMsSUFBQyxDQUFBLEtBQUssQ0FBQyxZQVByQjtRQVFBLGdCQUFBLEVBQWtCLElBQUMsQ0FBQSxLQUFLLENBQUMsZ0JBUnpCO1FBU0EsY0FBQSxFQUFnQixJQUFDLENBQUEsS0FBSyxDQUFDLGNBVHZCO1FBVUEsS0FBQTs7QUFBUTtBQUFBO2VBQUEscUNBQUE7O3lCQUNGLElBQUEsR0FBRyxDQUFDLEdBQUosQ0FBUSxHQUFSO0FBREU7O3FCQVZSO1FBYUEsWUFBQSxFQUFjLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUMsQ0FBRDttQkFDWixLQUFDLENBQUEsUUFBRCxDQUFVLGVBQVYsRUFBMkIsQ0FBM0I7VUFEWTtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FiZDtPQURGO0lBRE0sQ0FMUjtJQXdCQSxrQkFBQSxFQUFvQixTQUFBO01BQ2xCLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLEtBQWMsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUF4QjtRQUNFLElBQUMsQ0FBQSxRQUFELENBQVUsaUJBQVY7ZUFDQSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsR0FBYSxJQUFDLENBQUEsS0FBSyxDQUFDLE1BRnRCOztJQURrQixDQXhCcEI7R0FEUzs7eUJBK0JYLFFBQUEsR0FBVSxTQUFDLFNBQUQ7SUFDUiw0Q0FBQSxTQUFBO0lBRUEsU0FBQSxDQUFVLGlCQUFWLEVBQTZCLFNBQUE7YUFBRyxJQUFDLENBQUEsZ0JBQUQsQ0FBQTtJQUFILENBQTdCO0lBQ0EsU0FBQSxDQUFVLGVBQVYsRUFBMkIsU0FBQyxDQUFEO2FBQU0sSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFOLENBQVcsZUFBWCxFQUE0QixDQUE1QjtJQUFOLENBQTNCO0lBQ0EsU0FBQSxDQUFVLHlCQUFWLEVBQXFDLElBQUMsQ0FBQSxRQUF0QztJQUNBLFNBQUEsQ0FBVSxxQkFBVixFQUFpQyxJQUFDLENBQUEsU0FBbEM7V0FDQSxTQUFBLENBQVUsNkJBQVYsRUFBeUMsU0FBQTthQUN2QyxJQUFDLENBQUEsTUFBRCxDQUFRLFNBQUMsQ0FBRDtRQUNOLENBQUMsQ0FBQyxjQUFGLEdBQW1CLENBQUMsQ0FBQyxDQUFDO2VBQ3RCO01BRk0sQ0FBUjtJQUR1QyxDQUF6QztFQVBROzt5QkFZVixVQUFBLEdBQVksU0FBQTs7TUFDVixJQUFDLENBQUEsS0FBTTs7SUFDUCxJQUFDLENBQUEsRUFBRDtXQUNBLElBQUMsQ0FBQTtFQUhTOzt5QkFLWixTQUFBLEdBQVcsU0FBQTs2QkFDVCxJQUFDLENBQUEsS0FBRCxJQUFDLENBQUEsS0FBTTtFQURFOzt5QkFHWCxhQUFBLEdBQWUsU0FBQTs7TUFDYixJQUFDLENBQUEsUUFBUzs7SUFDVixJQUFDLENBQUEsS0FBRDtXQUNBLElBQUMsQ0FBQTtFQUhZOzt5QkFLZixZQUFBLEdBQWMsU0FBQTtnQ0FDWixJQUFDLENBQUEsUUFBRCxJQUFDLENBQUEsUUFBUztFQURFOzt5QkFHZCxRQUFBLEdBQVUsU0FBQyxJQUFEO0FBQ1IsUUFBQTtJQUFBLE1BQUEsR0FBUyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQVgsQ0FBZSxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQXRCLEVBQWdDO01BQUEsSUFBQSxFQUFNLElBQU47S0FBaEM7SUFDVCxJQUFBLEdBQU8sSUFBQyxDQUFBLFVBQUQsQ0FBQTtXQUNQLElBQUMsQ0FBQSxTQUFELENBQVcsTUFBWCxDQUFrQixDQUFDLElBQW5CLENBQXdCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxJQUFEO1FBQ3RCLElBQWlCLElBQUEsS0FBUSxLQUFDLENBQUEsU0FBRCxDQUFBLENBQXpCO0FBQUEsZ0JBQU0sUUFBTjs7ZUFDQSxLQUFDLENBQUEsTUFBRCxDQUFRLFNBQUMsQ0FBRDtVQUNOLENBQUMsQ0FBQyxLQUFGLEdBQVUsSUFBSSxDQUFDO1VBQ2YsQ0FBQyxDQUFDLE1BQUYsR0FBVyxJQUFJLENBQUM7aUJBQ2hCO1FBSE0sQ0FBUjtNQUZzQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBeEIsQ0FNQSxDQUFDLElBTkQsQ0FNTSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7UUFDSixLQUFDLENBQUEsSUFBSSxDQUFDLElBQU4sQ0FBVyxjQUFYLEVBQTJCLE1BQTNCO2VBQ0EsS0FBQyxDQUFBLElBQUksQ0FBQyxJQUFOLENBQVcsWUFBWDtNQUZJO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQU5OO0VBSFE7O3lCQWFWLFNBQUEsR0FBVyxTQUFDLEVBQUQ7QUFDVCxRQUFBO0lBQUEsSUFBQSxHQUFVLENBQUMsQ0FBQyxPQUFGLENBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQyxZQUFqQixFQUErQixFQUEvQixDQUFILEdBQ0wsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxJQUFDLENBQUEsS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFwQixDQUFBLENBQVQsRUFBdUMsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLENBQUQ7ZUFBTSxDQUFBLEtBQUs7TUFBWDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBdkMsQ0FESyxHQUdMLENBQUEsT0FBQSxHQUFVLElBQUMsQ0FBQSxLQUFLLENBQUMsWUFBWSxDQUFDLE1BQXBCLENBQUEsQ0FBVixFQUNBLE9BQU8sQ0FBQyxJQUFSLENBQWEsRUFBYixDQURBLEVBRUEsT0FGQTtJQUlGLElBQUEsR0FBTyxDQUFDLENBQUMsTUFBRixDQUFTLElBQVQ7SUFFUCxNQUFBLEdBQVMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFYLENBQWUsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUF4QixFQUFxQztNQUFBLElBQUEsRUFBTSxJQUFJLENBQUMsSUFBTCxDQUFVLEdBQVYsQ0FBTjtLQUFyQztJQUVULElBQUEsR0FBTyxJQUFDLENBQUEsYUFBRCxDQUFBO0lBQ1AsSUFBQyxDQUFBLFVBQUQsQ0FBQTtJQUNBLElBQUMsQ0FBQSxNQUFELENBQVEsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLENBQUQ7UUFDTixDQUFDLENBQUMsZ0JBQUYsR0FBcUIsR0FBRyxDQUFDLGdCQUFnQixDQUFDO1FBQzFDLENBQUMsQ0FBQyxZQUFGLEdBQWlCO1FBQ2pCLENBQUMsQ0FBQyxLQUFGLEdBQVU7ZUFDVjtNQUpNO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFSO1dBS0EsSUFBQyxDQUFBLFNBQUQsQ0FBVyxNQUFYLENBQWtCLENBQUMsSUFBbkIsQ0FBd0IsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLElBQUQ7UUFDdEIsSUFBaUIsSUFBQSxLQUFRLEtBQUMsQ0FBQSxZQUFELENBQUEsQ0FBekI7QUFBQSxnQkFBTSxRQUFOOztlQUNBLEtBQUMsQ0FBQSxNQUFELENBQVEsU0FBQyxDQUFEO1VBQ04sQ0FBQyxDQUFDLEtBQUYsR0FBVSxJQUFJLENBQUM7VUFDZixDQUFDLENBQUMsTUFBRixHQUFXLElBQUksQ0FBQztpQkFDaEI7UUFITSxDQUFSO01BRnNCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF4QixDQU1BLENBQUMsSUFORCxDQU1NLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtRQUNKLEtBQUMsQ0FBQSxJQUFJLENBQUMsSUFBTixDQUFXLGNBQVgsRUFBMkIsTUFBM0I7ZUFDQSxLQUFDLENBQUEsTUFBRCxDQUFRLFNBQUMsQ0FBRDtVQUNOLENBQUMsQ0FBQyxRQUFGLEdBQWEsS0FBQyxDQUFBLFlBQUQsQ0FBQTtpQkFDYjtRQUZNLENBQVI7TUFGSTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FOTixDQVdBLENBQUMsSUFYRCxDQVdNLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUNKLEtBQUMsQ0FBQSxNQUFELENBQVEsU0FBQyxDQUFEO1VBQ04sQ0FBQyxDQUFDLGdCQUFGLEdBQXFCLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztpQkFDMUM7UUFGTSxDQUFSO01BREk7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBWE4sQ0FlQSxDQUFDLElBZkQsQ0FlTSxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUE7ZUFDSixLQUFDLENBQUEsU0FBRCxDQUFXLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBWCxDQUFlLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBeEIsRUFBb0M7VUFBQSxJQUFBLEVBQU0sSUFBTjtTQUFwQyxDQUFYLENBQTJELENBQUMsSUFBNUQsQ0FBaUUsU0FBQyxJQUFEO2lCQUMvRCxLQUFDLENBQUEsTUFBRCxDQUFRLFNBQUMsQ0FBRDtZQUNOLENBQUMsQ0FBQyxnQkFBRixHQUFxQixHQUFHLENBQUMsZ0JBQWdCLENBQUM7WUFDMUMsQ0FBQyxDQUFDLEtBQUYsR0FBVSxJQUFJLENBQUM7bUJBQ2Y7VUFITSxDQUFSO1FBRCtELENBQWpFO01BREk7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBZk47RUFuQlM7O3lCQXlDWCxnQkFBQSxHQUFrQixTQUFBO1dBQ2hCLElBQUMsQ0FBQSxTQUFELENBQVcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFYLENBQWUsSUFBQyxDQUFBLGFBQUQsQ0FBQSxDQUFmLENBQVgsQ0FBNEMsQ0FBQyxJQUE3QyxDQUFrRCxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtlQUNoRCxLQUFDLENBQUEsTUFBRCxDQUFRLFNBQUMsQ0FBRDtVQUNOLENBQUMsQ0FBQyxRQUFGLEdBQWEsS0FBQyxDQUFBLFlBQUQsQ0FBQTtVQUNiLENBQUMsQ0FBQyxLQUFGLEdBQVUsSUFBSSxDQUFDO1VBQ2YsQ0FBQyxDQUFDLE1BQUYsR0FBVyxJQUFJLENBQUM7aUJBQ2hCO1FBSk0sQ0FBUixDQUtBLENBQUMsSUFMRCxDQUtNLFNBQUE7aUJBQ0osS0FBQyxDQUFBLGVBQUQsQ0FBQTtRQURJLENBTE47TUFEZ0Q7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxEO0VBRGdCOzt5QkFVbEIsZUFBQSxHQUFpQixTQUFBO1dBQ2YsSUFBQyxDQUFBLFNBQUQsQ0FBVyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQVgsQ0FBZSxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQXhCLEVBQW9DO01BQUEsSUFBQSxFQUFNLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBYjtLQUFwQyxDQUFYLENBQWtFLENBQUMsSUFBbkUsQ0FBd0UsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLElBQUQ7ZUFDdEUsS0FBQyxDQUFBLE1BQUQsQ0FBUSxTQUFDLENBQUQ7VUFDTixDQUFDLENBQUMsZ0JBQUYsR0FBcUIsR0FBRyxDQUFDLGdCQUFnQixDQUFDO1VBQzFDLENBQUMsQ0FBQyxLQUFGLEdBQVUsSUFBSSxDQUFDO2lCQUNmO1FBSE0sQ0FBUjtNQURzRTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBeEU7RUFEZTs7OztHQTNJeUIsR0FBRyxDQUFDOzs7O0FDRmhELElBQUE7O0FBQUEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsQ0FBQSxHQUFJOztBQUNyQixDQUFDLENBQUMsWUFBRixHQUFpQixPQUFBLENBQVEsaUJBQVI7O0FBQ2pCLENBQUMsQ0FBQyxlQUFGLEdBQW9CLE9BQUEsQ0FBUSxvQkFBUjs7OztBQ0FwQixJQUFBLGVBQUE7RUFBQTs7O0FBQUEsTUFBTSxDQUFDLE9BQVAsR0FBdUI7Ozs7Ozs7NEJBQ3JCLFNBQUEsR0FBVyxLQUFLLENBQUMsV0FBTixDQUNUO0lBQUEsTUFBQSxFQUFRLENBQUMsSUFBSSxDQUFDLEtBQU4sQ0FBUjtJQUVBLGVBQUEsRUFBaUIsU0FBQTthQUNmO1FBQUEsUUFBQSxFQUFVLEtBQVY7O0lBRGUsQ0FGakI7SUFLQSxNQUFBLEVBQVEsU0FBQTtNQUNOLElBQTJDLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxLQUFnQixHQUFHLENBQUMsYUFBYSxDQUFDLE9BQTdFO0FBQUEsZUFBTyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQVIsQ0FBZ0I7VUFBQSxFQUFBLEVBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFiO1NBQWhCLEVBQVA7O2FBQ0EsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBVixDQUNFO1FBQUEsRUFBQSxFQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBYjtRQUNBLFlBQUEsRUFBYyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBRHZCO1FBRUEsZUFBQSxFQUFpQixHQUFHLENBQUMsSUFBSSxDQUFDLGVBRjFCO1FBR0EsUUFBQSxFQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFIbkI7UUFJQSxFQUFBLEVBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxFQUpiO1FBS0EsT0FBQSxFQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FMbEI7UUFNQSxhQUFBLEVBQWUsR0FBRyxDQUFDLGFBTm5CO1FBT0EsT0FBQSxFQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FQbEI7UUFRQSxVQUFBLEVBQVksSUFBQyxDQUFBLEtBQUssQ0FBQyxVQVJuQjtRQVNBLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBVGQ7UUFVQSxRQUFBLEVBQVUsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQVZqQjtRQVdBLE9BQUEsRUFBUyxJQUFDLENBQUEsS0FBSyxDQUFDLE9BWGhCO1FBWUEsTUFBQSxFQUFRLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFaZjtRQWFBLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBYmQ7UUFjQSxNQUFBLEVBQVEsQ0FBQSxTQUFBLEtBQUE7aUJBQUEsU0FBQTttQkFDTixLQUFDLENBQUEsUUFBRCxDQUFVLGlCQUFWO1VBRE07UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBZFI7UUFnQkEsZUFBQSxFQUFpQixDQUFBLFNBQUEsS0FBQTtpQkFBQSxTQUFDLEVBQUQ7bUJBQ2YsS0FBQyxDQUFBLFFBQUQsQ0FBVSx1QkFBVixFQUFtQyxFQUFuQztVQURlO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQWhCakI7T0FERjtJQUZNLENBTFI7SUE0QkEsa0JBQUEsRUFBb0IsU0FBQTtNQUNsQixJQUFBLENBQUEsQ0FBTyxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVAsSUFBbUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFqQyxDQUFBO1FBQ0UsSUFBQyxDQUFBLFFBQUQsQ0FBVSxpQkFBVjtlQUNBLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUCxHQUFrQixLQUZwQjs7SUFEa0IsQ0E1QnBCO0dBRFM7OzRCQW1DWCxTQUFBLEdBQVcsU0FBQyxLQUFEO1dBQ1Q7TUFBQSxFQUFBLEVBQUksS0FBSyxDQUFDLEVBQVY7TUFDQSxRQUFBLEVBQVUsSUFEVjtNQUVBLE9BQUEsRUFBUyxJQUZUO01BR0EsS0FBQSxFQUFPLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FIekI7TUFJQSxNQUFBLEVBQVEsSUFKUjtNQUtBLFVBQUEsRUFBWSxJQUxaO01BTUEsS0FBQSxFQUFPLElBTlA7O0VBRFM7OzRCQVNYLG9CQUFBLEdBQXNCLFNBQUMsS0FBRCxFQUFRLEtBQVI7V0FDcEI7RUFEb0I7OzRCQUd0QixZQUFBLEdBQWMsU0FBQTtXQUNaLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxLQUFnQixHQUFHLENBQUMsYUFBYSxDQUFDLE1BQWxDLElBQTRDLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxLQUFnQixHQUFHLENBQUMsYUFBYSxDQUFDO0VBRGxFOzs0QkFHZCxhQUFBLEdBQWUsU0FBQTtXQUNiLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxLQUFnQixHQUFHLENBQUMsYUFBYSxDQUFDO0VBRHJCOzs0QkFHZixTQUFBLEdBQVcsU0FBQTtXQUNULElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQWhCLENBQUE7RUFEUzs7NEJBR1gsbUJBQUEsR0FBcUIsU0FBQTtJQUNuQixJQUFHLElBQUMsQ0FBQSxTQUFELENBQUEsQ0FBSDthQUNFLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQWpCLEVBQTBCLEVBQTFCLENBQUQsSUFBa0MsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBakIsRUFBMEIsSUFBMUIsQ0FBbkMsSUFBc0UsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBakIsRUFBMEIsTUFBMUIsRUFEekU7S0FBQSxNQUFBO2FBR0UsQ0FBQyxDQUFDLENBQUMsTUFBRixDQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBaEIsQ0FBRCxJQUE2QixDQUFDLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQWYsR0FBd0IsQ0FBeEIsSUFBNkIsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQWxCLENBQTlCLEVBSC9COztFQURtQjs7NEJBTXJCLFFBQUEsR0FBVSxTQUFDLFNBQUQ7SUFDUiwrQ0FBQSxTQUFBO0lBQ0EsU0FBQSxDQUFVLGlCQUFWLEVBQTZCLFNBQUE7YUFBRyxJQUFDLENBQUEsbUJBQUQsQ0FBQTtJQUFILENBQTdCO0lBQ0EsU0FBQSxDQUFVLGVBQVYsRUFBMkIsU0FBQyxDQUFEO2FBQU0sSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFOLENBQVcsZUFBWCxFQUE0QixDQUE1QjtJQUFOLENBQTNCO0lBQ0EsU0FBQSxDQUFVLGlCQUFWLEVBQTZCLFNBQUMsTUFBRDtNQUMzQixJQUFBLENBQWMsSUFBQyxDQUFBLFlBQUQsQ0FBQSxDQUFkO0FBQUEsZUFBQTs7YUFDQSxJQUFDLENBQUEsTUFBRCxDQUFRLFNBQUMsQ0FBRDtRQUVOLENBQUMsQ0FBQyxPQUFGLEdBQVk7ZUFDWjtNQUhNLENBQVIsQ0FJQSxDQUFDLElBSkQsQ0FJTSxDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUE7VUFDSixJQUFHLEtBQUMsQ0FBQSxtQkFBRCxDQUFBLENBQUg7bUJBQ0UsS0FBQyxDQUFBLE1BQUQsQ0FBUSxTQUFDLENBQUQ7cUJBQU8sQ0FBQyxDQUFDLEtBQUYsQ0FBUSxDQUFSLEVBQVc7Z0JBQUEsS0FBQSxFQUFPLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBekI7ZUFBWDtZQUFQLENBQVIsRUFERjtXQUFBLE1BQUE7bUJBR0UsS0FBQyxDQUFBLE1BQUQsQ0FBUSxTQUFDLENBQUQ7cUJBQU8sQ0FBQyxDQUFDLEtBQUYsQ0FBUSxDQUFSLEVBQVc7Z0JBQUEsS0FBQSxFQUFPLEdBQUcsQ0FBQyxhQUFhLENBQUMsTUFBekI7ZUFBWDtZQUFQLENBQVIsRUFIRjs7UUFESTtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FKTjtJQUYyQixDQUE3QjtJQVlBLFNBQUEsQ0FBVSxpQkFBVixFQUE2QixTQUFBO01BQzNCLElBQUEsQ0FBYyxJQUFDLENBQUEsYUFBRCxDQUFBLENBQWQ7QUFBQSxlQUFBOztNQUNBLElBQUMsQ0FBQSxNQUFELENBQVEsU0FBQyxDQUFEO2VBQU8sQ0FBQyxDQUFDLEtBQUYsQ0FBUSxDQUFSLEVBQVc7VUFBQSxLQUFBLEVBQU8sR0FBRyxDQUFDLGFBQWEsQ0FBQyxVQUF6QjtTQUFYO01BQVAsQ0FBUjthQUNBLElBQUMsQ0FBQSxTQUFELENBQVcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFYLENBQWdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBekIsRUFBK0I7UUFBQSxFQUFBLEVBQUksSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBcEI7UUFBd0IsT0FBQSxFQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBeEM7T0FBL0IsQ0FBWCxDQUEyRixDQUFDLElBQTVGLENBQWlHLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxJQUFEO2lCQUMvRixLQUFDLENBQUEsTUFBRCxDQUFRLFNBQUMsQ0FBRDttQkFBTyxDQUFDLENBQUMsS0FBRixDQUFRLENBQVIsRUFDYjtjQUFBLE1BQUEsRUFBWSxJQUFBLEdBQUcsQ0FBQyxJQUFKLENBQVMsSUFBSSxDQUFDLElBQWQsRUFBb0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUEvQixDQUFaO2NBQ0EsS0FBQSxFQUFPLEdBQUcsQ0FBQyxhQUFhLENBQUMsTUFEekI7YUFEYTtVQUFQLENBQVI7UUFEK0Y7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWpHO0lBSDJCLENBQTdCO1dBUUEsU0FBQSxDQUFVLHVCQUFWLEVBQW1DLFNBQUMsRUFBRDthQUFPLElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBTixDQUFXLHVCQUFYLEVBQW9DLENBQUMsRUFBRCxDQUFwQztJQUFQLENBQW5DO0VBeEJROzs0QkEwQlYsbUJBQUEsR0FBcUIsU0FBQTtXQUNuQixJQUFDLENBQUEsU0FBRCxDQUFXLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBWCxDQUFlLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBeEIsRUFBMkI7TUFBQSxFQUFBLEVBQUksSUFBQyxDQUFBLEtBQUssQ0FBQyxFQUFYO0tBQTNCLENBQVgsQ0FBcUQsQ0FBQyxJQUF0RCxDQUEyRCxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtlQUN6RCxLQUFDLENBQUEsTUFBRCxDQUFRLFNBQUMsQ0FBRDtpQkFBTyxDQUFDLENBQUMsS0FBRixDQUFRLENBQVIsRUFDYjtZQUFBLFFBQUEsRUFBYyxJQUFBLEdBQUcsQ0FBQyxRQUFKLENBQWEsSUFBSSxDQUFDLElBQWxCLENBQWQ7WUFDQSxLQUFBLEVBQU8sR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUR6QjtXQURhO1FBQVAsQ0FBUixDQUlBLENBQUMsSUFKRCxDQUlNLFNBQUE7VUFDSixJQUFHLEtBQUMsQ0FBQSxTQUFELENBQUEsQ0FBSDttQkFDRSxLQUFDLENBQUEsTUFBRCxDQUFRLFNBQUMsQ0FBRDtxQkFBTyxDQUFDLENBQUMsS0FBRixDQUFRLENBQVIsRUFBVztnQkFBQSxPQUFBLEVBQWEsSUFBQSxLQUFBLENBQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFqQixDQUFiO2VBQVg7WUFBUCxDQUFSLEVBREY7O1FBREksQ0FKTixDQU9BLENBQUMsSUFQRCxDQU9NLFNBQUE7VUFDSixJQUFHLEtBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQW5CO1lBQ0UsS0FBQyxDQUFBLFNBQUQsQ0FBVyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQVgsQ0FBZSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQXhCLEVBQWdDO2NBQUEsRUFBQSxFQUFJLEtBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLFlBQXBCO2FBQWhDLENBQVgsQ0FBNkUsQ0FBQyxJQUE5RSxDQUFtRixTQUFDLElBQUQ7cUJBQ2pGLEtBQUMsQ0FBQSxNQUFELENBQVEsU0FBQyxDQUFEO2dCQUNOLENBQUMsQ0FBQyxVQUFGLEdBQW1CLElBQUEsR0FBRyxDQUFDLFVBQUosQ0FBZSxJQUFJLENBQUMsSUFBcEI7dUJBQ25CO2NBRk0sQ0FBUjtZQURpRixDQUFuRjttQkFJQSxLQUFDLENBQUEsU0FBRCxDQUFXLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBWCxDQUFlLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBeEIsRUFBK0I7Y0FBQSxFQUFBLEVBQUksS0FBQyxDQUFBLEtBQUssQ0FBQyxFQUFYO2FBQS9CLENBQVgsQ0FBeUQsQ0FBQyxJQUExRCxDQUErRCxTQUFDLElBQUQ7cUJBQzdELEtBQUMsQ0FBQSxNQUFELENBQVEsU0FBQyxDQUFEO2dCQUNOLENBQUMsQ0FBQyxLQUFGLEdBQVUsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxJQUFJLENBQUMsSUFBWCxFQUFpQixDQUFBLFNBQUEsS0FBQTt5QkFBQSxTQUFDLEdBQUQ7MkJBQ3JCLElBQUEsR0FBRyxDQUFDLEdBQUosQ0FBUSxHQUFSO2tCQURxQjtnQkFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWpCO3VCQUdWO2NBSk0sQ0FBUjtZQUQ2RCxDQUEvRCxFQUxGOztRQURJLENBUE47TUFEeUQ7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTNEO0VBRG1COzs7O0dBekZ3QixHQUFHLENBQUM7Ozs7QUNGbkQsSUFBQTs7QUFBQSxNQUFNLENBQUMsT0FBUCxHQUFpQixHQUFBLEdBQU07RUFDckIsT0FBQSxFQUFTLE9BQUEsQ0FBUSxjQUFSLENBRFk7RUFFckIsSUFBQSxFQUFNLE9BQUEsQ0FBUSxXQUFSLENBRmU7RUFHckIsSUFBQSxFQUNFO0lBQUEsSUFBQSxFQUFNLE9BQUEsQ0FBUSxnQkFBUixDQUFOO0dBSm1CO0VBS3JCLFNBQUEsRUFBVyxPQUFBLENBQVEsZ0JBQVIsQ0FMVTtFQU1yQixNQUFBLEVBQVEsT0FBQSxDQUFRLGFBQVIsQ0FOYTtFQU9yQixDQUFBLEVBQ0U7SUFBQSxRQUFBLEVBQVUsT0FBQSxDQUFRLGtCQUFSLENBQVY7SUFDQSxPQUFBLEVBQVMsT0FBQSxDQUFRLGlCQUFSLENBRFQ7SUFFQSxTQUFBLEVBQVcsT0FBQSxDQUFRLG1CQUFSLENBRlg7SUFHQSxFQUFBLEVBQUksT0FBQSxDQUFRLFdBQVIsQ0FISjtJQUlBLFFBQUEsRUFBVSxPQUFBLENBQVEsaUJBQVIsQ0FKVjtJQUtBLFlBQUEsRUFBYyxPQUFBLENBQVEsc0JBQVIsQ0FMZDtJQU1BLFdBQUEsRUFBYSxPQUFBLENBQVEscUJBQVIsQ0FOYjtHQVJtQjs7Ozs7QUNBdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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TUFTQSxNQUFBLEVBQVEsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFBO2lCQUNOLEtBQUMsQ0FBQSxLQUFLLENBQUM7UUFERDtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FUUjtNQVdBLFlBQUEsRUFBYyxDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUE7aUJBQ1osS0FBQyxDQUFBLFFBQUQsQ0FBVSw2QkFBVjtRQURZO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQVhkO01BYUEsYUFBQSxFQUFlLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtpQkFDYixLQUFDLENBQUEsUUFBRCxDQUFVLDZCQUFWO1FBRGE7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBYmY7S0FERjtFQUZNLENBRlI7Q0FENkIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiY29uc29sZS5sb2cgJ2xvYWRpbmcgYXBwJyB1bmxlc3MgZ2xvYmFsXG5cbm1vZHVsZS5leHBvcnRzID0gQXBwID0ge31cblxuXG5pZiB3aW5kb3c/XG4gIHdpbmRvdy5BcHAgPSBBcHBcbmlmIGdsb2JhbD9cbiAgZ2xvYmFsLkFwcCA9IEFwcFxuXG5jb25zb2xlLmxvZyAnbG9hZGluZyBtb2R1bGUnIHVubGVzcyBnbG9iYWxcblxuXG5fLm1lcmdlKEFwcCwgcmVxdWlyZSAnLi9tb2RlbHMnKVxuXG5BcHAuSlNYID0gcmVxdWlyZSAnLi9qc3gvanN4J1xuQXBwLlV0aWwgPSByZXF1aXJlICcuL3V0aWwnXG5BcHAuVmlldyA9IHJlcXVpcmUgJy4vdmlld3MnXG5BcHAuTGFuZyA9IHJlcXVpcmUgJy4vbGFuZydcbkFwcC5QYXRoID0gcmVxdWlyZSAnLi9wYXRoJ1xuQXBwLkNvbnN0YW50ID0gcmVxdWlyZSAnLi9jb25zdGFudCdcbkFwcC5CYXNlQ29udGV4dCA9IHJlcXVpcmUgJy4vY29udGV4dHMvYmFzZS1jb250ZXh0J1xuXG4jIGNvbnRleHRz44Gv44Kv44Op44K544KS55u05o6l5Y+C54Wn44GZ44KL44Gf44KB44CB5LuW44Gu44Kv44Op44K544Gu5b6M44Gr6Kqt44G/6L6844KA5b+F6KaB44GM44GC44KL44CCXG5fLm1lcmdlKEFwcCwgcmVxdWlyZSAnLi9jb250ZXh0cycpXG5cbkFwcC5zdGFydCA9IChub2RlKS0+XG4gIHJvdXRlciA9IG5ldyBBcmRhLlJvdXRlcihBcmRhLkRlZmF1bHRMYXlvdXQsIG5vZGUpXG4gIHJvdXRlci5wdXNoQ29udGV4dChBcHAuTWFpbkNvbnRleHQpXG5cblxuIiwibW9kdWxlLmV4cG9ydHMgPSBDb25zdGFudCA9XG4gIGNsYXNzZXM6XG4gICAgY2hhbGxlbmdlUmVzdWx0Qm94OiAnY29sLXNtLTEwIGNvbC1zbS1vZmZzZXQtMSBjb2wtbWQtOCBjb2wtbWQtb2Zmc2V0LTInXG4gICAgdGV4dElucHV0OiAnZm9ybS1jb250cm9sIHNpemUtaDMnXG4gICAgc3VibWl0QnV0dG9uOiAnYnRuIGJ0bi1sZyBidG4tc3VjY2VzcyBzaXplLWg0IHdpZGUnXG4gICAgYmx1ZUJ1dHRvbjogJ2J0biBidG4tbWQgYnRuLXByaW1hcnkgc2l6ZS1oNCdcbiAgICBncmVlbkJ1dHRvbjogJ2J0biBidG4tbWQgYnRuLXN1Y2Nlc3Mgc2l6ZS1oNCdcbiAgICBpbmRleFRhYmxlOiAndGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1jb25kZW5zZWQgdGFibGUtYm9yZGVyZWQnXG4gICAgZWRpdEJ1dHRvbjogJ2J0biBidG4tbWQgYnRuLXByaW1hcnkgc2l6ZS1oNidcbiAgICBzbWFsbEJveDogJ2NvbC1zbS02IGNvbC1zbS1vZmZzZXQtMyBjb2wtbWQtNCBjb2wtbWQtb2Zmc2V0LTQnXG4gICAgd29ya2Jvb2tDaGFsbGVuZ2VCb3g6ICdjb2wtc20tMTAgY29sLXNtLW9mZnNldC0xIGNvbC1tZC04IGNvbC1tZC1vZmZzZXQtMidcbiAgICBxdWVzdGlvbkJveDogJ2NvbC1zbS0xMCBjb2wtc20tb2Zmc2V0LTEgY29sLW1kLTggY29sLW1kLW9mZnNldC0yJ1xuICAgIGpvaW46IChiYXNlLCBhZGRlZCktPlxuICAgICAgW0NvbnN0YW50LmNsYXNzZXNbYmFzZV0sIGFkZGVkXS5qb2luKCcgJylcbiAgcmVuZGVyOlxuICAgIGxldmVsTGFiZWw6ICh2YWx1ZSktPlxuICAgICAgXy5maW5kKENvbnN0YW50LmxldmVscywgKG9iaik9PiBvYmoudmFsdWUgPT0gdmFsdWUpLmxhYmVsXG4gICAgZXZhbFR5cGU6ICh2YWx1ZSktPlxuICAgICAgXy5maW5kKENvbnN0YW50LmV2YWxUeXBlcywgKG9iaik9PiBvYmoudmFsdWUgPT0gdmFsdWUpLmxhYmVsXG4gICAgYW5zd2VyVHlwZTogKHZhbHVlKS0+XG4gICAgICBfLmZpbmQoQ29uc3RhbnQuYW5zd2VyVHlwZXMsIChvYmopPT4gb2JqLnZhbHVlID09IHZhbHVlKS5sYWJlbFxuICBzd2FsOlxuICAgIGRlbGV0ZTpcbiAgICAgIHRpdGxlOiBcIuWJiumZpOOBl+OBvuOBmVwiXG4gICAgICB0ZXh0OiBcIuOBk+OBruWHpueQhuOBr+WPluOCiua2iOOBmeOBk+OBqOOBjOOBp+OBjeOBvuOBm+OCk1wiXG4gICAgICB0eXBlOiBcIndhcm5pbmdcIlxuICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZVxuICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiBcIiNlNTFjMjNcIlxuICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwi5YmK6Zmk44GZ44KLXCJcbiAgICAgIGNsb3NlT25Db25maXJtOiB0cnVlXG4gICAgICBjYW5jZWxCdXR0b25UZXh0OiAn44Kt44Oj44Oz44K744OrJ1xuICAgICAgYWxsb3dPdXRzaWRlQ2xpY2s6IHRydWVcbiAgY29kZU1pcnJvcjpcbiAgICBjb25maWd1cmF0aW9uOlxuICAgICAgbGluZU51bWJlcnM6IHRydWVcbiAgICAgIG1vZGU6IFwieG1sXCIsXG4gICAgICBodG1sTW9kZTogdHJ1ZVxuICAgICAgbGluZVdyYXBwaW5nOiB0cnVlXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEJhc2VDb250ZXh0IGV4dGVuZHMgQXJkYS5Db250ZXh0XG4gIGRlbGVnYXRlOiAoc3Vic2NyaWJlKSAtPlxuICAgIHN1cGVyXG5cbiAgICBzdWJzY3JpYmUgJ2NvbnRleHQ6Y3JlYXRlZCcsIC0+XG4gICAgICBAcm9vdCA9IEBwcm9wcy5yb290XG5cbiAgICBzdWJzY3JpYmUgJ2luZm9ybTpyZW5kZXJlZCcsIC0+XG4gICAgICBAcm9vdC5lbWl0KCdpbmZvcm06cmVuZGVyZWQnKVxuXG4gIHN0cmlrZUFwaTogKGxpbmtlciktPlxuICAgIEByb290LnN0cmlrZUFwaShsaW5rZXIpXG5cbiAgX3N0cmlwcGVkUGF0aDogLT5cbiAgICBAcm9vdC5fc3RyaXBwZWRQYXRoKClcblxuICBfY2hvcHBlZFBhdGg6IC0+XG4gICAgQHJvb3QuX2Nob3BwZWRQYXRoKClcbiIsIiNcbiMgQXJkYS5Sb3V0ZXLjgpJyZXBsYWNlQ29udGV4dOOBp+e1seS4gOOBmeOCi+acgOWIneOBq+WFpeOCjOOBpuOBiuOBj+OBn+OCgeOBruODgOODn+ODvOOCs+ODs+ODhuOCreOCueODiFxuI1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBCbGFua0NvbnRleHQgZXh0ZW5kcyBBcmRhLkNvbnRleHRcbiAgaW5pdFN0YXRlOiAocHJvcHMpIC0+IHByb3BzXG5cbiAgY29tcG9uZW50OiBSZWFjdC5jcmVhdGVDbGFzcyAoXG4gICAgcmVuZGVyOiAtPlxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2LmNvbnRhaW5lcicsIHt9LCBcIk5vdyBsb2FkaW5nICN7QHByb3BzLm5hbWV9Li4uXCIpXG4gIClcbiIsIm1vZHVsZS5leHBvcnRzID0gQ29udGV4dHMgPSB7fVxuQ29udGV4dHMuQmFzZUNvbnRleHQgPSByZXF1aXJlICcuL2Jhc2UtY29udGV4dCdcbkNvbnRleHRzLkJsYW5rQ29udGV4dCA9IHJlcXVpcmUgJy4vYmxhbmstY29udGV4dCdcbkNvbnRleHRzLk1haW5Db250ZXh0ID0gcmVxdWlyZSAnLi9tYWluLWNvbnRleHQnXG5Db250ZXh0cy5NZW51ID0gcmVxdWlyZSAnLi9tZW51J1xuQ29udGV4dHMuTm90aWZpZXIgPSByZXF1aXJlICcuL25vdGlmaWVyJ1xuQ29udGV4dHMuUG9ydGFsQ29udGV4dCA9IHJlcXVpcmUgJy4vcG9ydGFsLWNvbnRleHQnXG5Db250ZXh0cy5RID0gcmVxdWlyZSAnLi9xJ1xuIyBHZW5lcmF0ZWQgYnkgSW5kZXhDb2ZmZWVHZW5lcmF0b3IiLCIjXG4jIFJlYWN0QXBwbGljYXRpb27jga7lhajjgabjgpLntbHmi6zjgZnjgovjgrPjg7Pjg4bjgq3jgrnjg4hcbiNcbiMgPSBBdHRyaWJ1dGVzXG4jXG4jIC0gQGNvbnRlbnQg5a6f6Zqb44Gr44Kz44Oz44OG44Oz44OE44KS6KGo56S644GZ44KL44Or44O844K/44O8XG4jIC0gQG5vdGlmaWVyIOWFqOOBpuOBruWJjemdouOBq+ihqOekuuOBleOCjOOCi+OCquODvOODkOODvOODrOOCpOODq+ODvOOCv+ODvFxuIyAtIEBtZW51IOOCsOODreODvOODkOODq+ODoeODi+ODpeODvOOBquOBqeOCouODl+ODquOCseODvOOCt+ODp+ODs+WFsemAmueJqeOCkuihqOekuuOBmeOCi+ODq+ODvOOCv+ODvFxuI1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBNYWluQ29udGV4dCBleHRlbmRzIEFyZGEuQ29udGV4dFxuICBjb21wb25lbnQ6IFJlYWN0LmNyZWF0ZUNsYXNzIChcbiAgICBtaXhpbnM6IFtBcmRhLm1peGluXVxuICAgIHJlbmRlcjogLT5cbiAgICAgIEFwcC5KU1gubWFpbigpXG5cbiAgICBjb21wb25lbnREaWRNb3VudDogLT5cbiAgICAgIHJvdXRlcnMgPSB7XG4gICAgICAgIGNvbnRlbnQ6IG5ldyBBcmRhLlJvdXRlcihBcmRhLkRlZmF1bHRMYXlvdXQsIFJlYWN0LmZpbmRET01Ob2RlKEByZWZzLmNvbnRlbnQpKVxuICAgICAgICBub3RpZmllcjogbmV3IEFyZGEuUm91dGVyKEFyZGEuRGVmYXVsdExheW91dCwgUmVhY3QuZmluZERPTU5vZGUoQHJlZnMubm90aWZpZXIpKVxuICAgICAgICBtZW51OiBuZXcgQXJkYS5Sb3V0ZXIoQXJkYS5EZWZhdWx0TGF5b3V0LCBSZWFjdC5maW5kRE9NTm9kZShAcmVmcy5tZW51KSlcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nICdEaXNwbGF5IG1vdW50ZWQnLCByb3V0ZXJzXG4gICAgICBAZGlzcGF0Y2ggJ2Rpc3BsYXk6aW5pdGlhbGl6ZWQnLCByb3V0ZXJzXG4gIClcblxuICBfaGlzdG9yeSA9IFtdXG4gIF9mZWF0dXJlID0gW11cbiAgX25vdyA9IDBcblxuICBpbml0U3RhdGU6IChwcm9wcykgLT4gcHJvcHNcblxuICBleHBhbmRDb21wb25lbnRQcm9wczogKHByb3BzLCBzdGF0ZSkgLT4gcHJvcHNcblxuICBkZWxlZ2F0ZTogKHN1YnNjcmliZSkgLT5cbiAgICBzdXBlclxuXG4gICAgc3Vic2NyaWJlICdjb250ZXh0OmNyZWF0ZWQnLCAoKS0+XG4gICAgICBAX2luaXRpYWxpemVWYWx1YWJsZXMoKVxuICAgICAgQF9pbml0aWFsaXplUm91dGVyKClcbiAgICAgIEBfaW5pdGlhbGl6ZUV2ZW50V2F0Y2hlcigpXG5cbiAgICBzdWJzY3JpYmUgJ2Rpc3BsYXk6aW5pdGlhbGl6ZWQnLCBAX2luaXRpYWxpemVEaXNwbGF5XG4gICAgc3Vic2NyaWJlICdzY2VuZTpyZXBsYWNlJywgQF9yZXBsYWNlU2NlbmVcblxuICAgIHN1YnNjcmliZSAnbm90aWZ5OnN1Y2Nlc3MnLCAodGl0bGUsIG1lc3NhZ2UpPT5cbiAgICBzdWJzY3JpYmUgJ3dpbmRvdzp0b3AnLCAtPiB3aW5kb3cuc2Nyb2xsVG8oMCwgMClcbiAgICBzdWJzY3JpYmUgJ2FwcDpob21lJywgLT5cbiAgICAgIEBfcmVwbGFjZVNjZW5lKEFwcC5MaW5rZXIuZ2V0KEFwcC5QYXRoLnBvcnRhbCkpXG5cbiAgICBzdWJzY3JpYmUgJ25vdGlmeTpmYWlsJywgKHRpdGxlLCBtZXNzYWdlKT0+XG4gICAgc3Vic2NyaWJlICdoaXN0b3J5OnB1c2gnLCAobGlua2VyKT0+IGhpc3RvcnkucHVzaFN0YXRlKHt9LCBudWxsLCBsaW5rZXIucGFyYW1zVXJpKVxuXG4gICAgc3Vic2NyaWJlICdyZWxvYWQnLCA9PlxuICAgICAgQHVwZGF0ZSgoc3RhdGUpID0+IHN0YXRlKVxuXG4gICAgc3Vic2NyaWJlICdxdWVzdGlvbjpzaG93JywgKHEpLT5cbiAgICAgIEBfcmVwbGFjZVNjZW5lKEFwcC5MaW5rZXIuZ2V0KEFwcC5QYXRoLnEsIGlkOiBxLmlkKSlcblxuICAgIHN1YnNjcmliZSAnaW5mb3JtOnJlbmRlcmVkJywgKHEpLT5cbiAgICAgIE1hdGhKYXguSHViLlR5cGVzZXQoKVxuXG4gICAgc3Vic2NyaWJlICdxdWVzdGlvbjp0YWdnZWQ6aW5kZXgnLCAoaWQpLT5cbiAgICAgIEBfcmVwbGFjZVNjZW5lKEFwcC5MaW5rZXIuZ2V0KEFwcC5QYXRoLnRhZ2dlZEluZGV4LCB0YWdzOiBbaWRdKSlcblxuXG4gICNcbiAgIyBBcHBsaWNhdGlvbiBtZXRob2RcbiAgI1xuXG4gIHN0cmlrZUFwaTogKGxpbmtlciwgZm9yY2VSZWxvYWQpLT5cbiAgICBBcHAuQXBpU3RyaWtlci5zdHJpa2UobGlua2VyLCBmb3JjZVJlbG9hZClcblxuICAjXG4gICMgSW5pdGlhbGl6ZXJcbiAgI1xuXG4gIF9pbml0aWFsaXplRXZlbnRXYXRjaGVyOiAtPlxuICAgIEhpc3RvcnlXYXJkLnN0YXJ0QnJ1dGFsbHkoKVxuICAgICQod2luZG93KS5vbihIaXN0b3J5V2FyZC5CQUNLV0FSRCwgQF9iYWNrd2FyZClcbiAgICAkKHdpbmRvdykub24oSGlzdG9yeVdhcmQuRk9SV0FSRCwgQF9mb3J3YXJkKVxuXG4gIF9pbml0aWFsaXplRGlzcGxheTogKHJvdXRlcnMpLT5cbiAgICAjIOOBk+OBrnJvdXRlcuOBr0FyZGEuUm91dGVyXG4gICAgQGNvbnRlbnQgPSByb3V0ZXJzLmNvbnRlbnRcbiAgICBAbm90aWZpZXIgPSByb3V0ZXJzLm5vdGlmaWVyXG4gICAgQG1lbnUgPSByb3V0ZXJzLm1lbnVcblxuICAgICMg5Lul6ZmNcmVwbGFjZUNvbnRleHTjgafntbHkuIDjgZnjgotcbiAgICBAY29udGVudC5wdXNoQ29udGV4dChBcHAuQmxhbmtDb250ZXh0LCB7IG5hbWU6ICdDb250ZW50JyB9KS5kb25lID0+XG4gICAgICBAX2luaXRpYWxpemVTY2VuZSgpXG4gICAgQG5vdGlmaWVyLnB1c2hDb250ZXh0KEFwcC5CbGFua0NvbnRleHQsIHsgbmFtZTogJ05vdGlmaWVyJyB9KS5kb25lID0+XG4gICAgICBAbm90aWZpZXIucmVwbGFjZUNvbnRleHQoQXBwLk5vdGlmaWVyLkdvZENvbnRleHQsIHsgcm9vdDogQCB9KVxuICAgIEBtZW51LnB1c2hDb250ZXh0KEFwcC5CbGFua0NvbnRleHQsIHsgbmFtZTogJ01lbnUnIH0pLmRvbmUgPT5cbiAgICAgIEBtZW51LnJlcGxhY2VDb250ZXh0KEFwcC5NZW51Lkdsb2JhbENvbnRleHQsIHsgcm9vdDogQCB9KVxuXG4gIF9pbml0aWFsaXplUm91dGVyOiAtPlxuICAgICMg5YWo44Gm44Gu44Kz44Oz44OG44Kt44K544OI44Gv44Oh44Kk44Oz44Kz44Oz44OG44Kt44K544OI44Gr6YCa55+l44KS5Ye644Gb44KLXG4gICAgQXBwLkNhc3NldHRlLnJvb3QgPSBAXG5cbiAgICAjIOOBk+OCjOOBr3VyaeOBi+OCieWLleS9nOOCkuaMr+OCiuOCj+OBkeOCi+S4gOiIrOeahOOBquODq+ODvOOCv+ODvFxuICAgIEByb3V0ZXIgPSBuZXcgQXBwLlJvdXRlcigpXG4gICAgI0Byb3V0ZXIuYWRkKCcvJywgKHBhcmFtcyktPiBuZXcgQXBwLkNhc3NldHRlKEFwcC5Qb3J0YWxDb250ZXh0LCBwYXJhbXMpKVxuICAgIEByb3V0ZXIuYWRkKCcvJywgKHBhcmFtcyktPiBuZXcgQXBwLkNhc3NldHRlKEFwcC5Qb3J0YWxDb250ZXh0LCBwYXJhbXMpKVxuICAgIEByb3V0ZXIuYWRkKCcvcScsIChwYXJhbXMpLT4gbmV3IEFwcC5DYXNzZXR0ZShBcHAuUS5JbmRleENvbnRleHQsIHBhcmFtcykpXG4gICAgQHJvdXRlci5hZGQoJy9xL3RhZ2dlZC86dGFncycsIChwYXJhbXMpLT4gbmV3IEFwcC5DYXNzZXR0ZShBcHAuUS5JbmRleENvbnRleHQsIHBhcmFtcykpXG4gICAgQHJvdXRlci5hZGQoJy9xL3RhZ2dlZC8nLCAocGFyYW1zKS0+IG5ldyBBcHAuQ2Fzc2V0dGUoQXBwLlEuSW5kZXhDb250ZXh0LCBwYXJhbXMpKVxuICAgIEByb3V0ZXIuYWRkKCcvcS86aWQnLCAocGFyYW1zKS0+IG5ldyBBcHAuQ2Fzc2V0dGUoQXBwLlEuUXVlc3Rpb25Db250ZXh0LCBwYXJhbXMpKVxuXG4gIF9pbml0aWFsaXplU2NlbmU6IC0+XG4gICAgQGNvbnRlbnQucHVzaENvbnRleHQoQF9kZXRlY3RDYXNzZXR0ZSgpLmZvclB1c2hlcigpLi4uKVxuXG4gIF9pbml0aWFsaXplVmFsdWFibGVzOiAtPlxuXG4gICAgI1xuICAgICMgSGlzdG9yeSBNYW5hZ2VyXG4gICAgI1xuICBfYmFja3dhcmQ6IChlKT0+XG4gICAgQGNvbnRlbnQucHVzaENvbnRleHQoQF9kZXRlY3RDYXNzZXR0ZSgpLmZvclB1c2hlcigpLi4uKVxuXG4gIF9mb3J3YXJkOiAoZSk9PlxuICAgIEBjb250ZW50LnB1c2hDb250ZXh0KEBfZGV0ZWN0Q2Fzc2V0dGUoKS5mb3JQdXNoZXIoKS4uLilcblxuICAjXG4gICMgSGVscGVyXG4gICNcbiAgX2RldGVjdENhc3NldHRlOiAtPlxuICAgIEByb3V0ZXIuZXhlY3V0ZShAX3N0cmlwcGVkUGF0aCgpKVxuXG4gIF9waWNrSGVhZGVyUGFyYW1ldGVyczogKHhociktPlxuICAgIHJlcXVpcmVkID0gW1xuICAgICAgJ1RvdGFsLVBhZ2VzJ1xuICAgICAgJ1Blci1QYWdlJ1xuICAgICAgJ0N1cnJlbnQtUGFnZSdcbiAgICAgICdQYWdpbmF0ZS1QYXRoJ1xuICAgICAgJ0FjY2Vzcy1MZXZlbCdcbiAgICBdXG4gICAgXy5yZWR1Y2UocmVxdWlyZWQsIChhLCByZXEpLT5cbiAgICAgIGNvbnNvbGUubG9nIHJlcVxuICAgICAgYVtyZXFdID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKHJlcSlcbiAgICAgIGFcbiAgICAsIHt9KVxuXG4gIF9zdHJpcHBlZFBhdGg6IC0+XG4gICAgbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8uKz86XFwvXFwvKC4rPylcXC8vLCAnLycpXG5cbiAgX2Nob3BwZWRQYXRoOiAtPlxuICAgIGxvY2F0aW9uLmhyZWYucmVwbGFjZSgvLis/OlxcL1xcLyguKz8pXFwvLywgJy8nKS5yZXBsYWNlKC9cXD8uKi8sICcnKVxuXG4gIF9pc0Nyb3NzRG9tYWluOiAodXJsKS0+XG4gICAgb3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIilcbiAgICBvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWZcbiAgICB1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKVxuXG4gICAgdHJ5XG4gICAgICB1cmxBbmNob3IuaHJlZiA9IHVybFxuICAgICAgdXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZlxuXG4gICAgICByZXR1cm4gIXVybEFuY2hvci5wcm90b2NvbCB8fCAhdXJsQW5jaG9yLmhvc3QgfHxcbiAgICAgICAgICAob3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT1cbiAgICAgICAgICAgIHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0KVxuICAgIGNhdGNoIGVcbiAgICAgIHJldHVybiB0cnVlXG5cbiAgI1xuICAjXG4gICNcblxuICBfcmVwbGFjZVNjZW5lOiAobGlua2VyKSAtPlxuICAgIGhpc3RvcnkucHVzaFN0YXRlKHt9LCBudWxsLCBsaW5rZXIudXJpKVxuICAgIEBjb250ZW50LnB1c2hDb250ZXh0KEBfZGV0ZWN0Q2Fzc2V0dGUoKS5mb3JQdXNoZXIoKS4uLikudGhlbiA9PlxuICAgICAgTWF0aEpheC5IdWIuVHlwZXNldCgpXG5cblxuIiwiI1xuIyDjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7PlhajkvZPjga7jg6Hjg4vjg6Xjg7zjgpLmibHjgYbjgrPjg7Pjg4bjgq3jgrnjg4hcbiMg44Ky44K544OI44GL44Ki44Kr44Km44Oz44OI44GL44Gn5YiH44KK5pu/44GI44KL44GM5pyq5a6f6KOF44Gq44Gu44Gn44OW44Op44Oz44Kv44CCXG4jXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEdsb2JhbENvbnRleHQgZXh0ZW5kcyBBcHAuQmFzZUNvbnRleHRcbiAgY29tcG9uZW50OiBSZWFjdC5jcmVhdGVDbGFzcyAoXG4gICAgbWl4aW5zOiBbQXJkYS5taXhpbl1cblxuICAgIHJlbmRlcjogLT5cbiAgICAgIEFwcC5KU1guTWVudS5tZW51KFxuICAgICAgICBGYTpBcHAuVmlldy5GYVxuICAgICAgICBnb0hvbWU6ID0+XG4gICAgICAgICAgQGRpc3BhdGNoKCdhcHA6aG9tZScpXG4gICAgICApXG4gIClcblxuICBpbml0U3RhdGU6IChwcm9wcykgLT4gcHJvcHNcblxuICBkZWxlZ2F0ZTogKHN1YnNjcmliZSkgLT5cbiAgICBzdXBlclxuICAgIHN1YnNjcmliZSAnYXBwOmhvbWUnLCAoaWQpLT4gQHJvb3QuZW1pdCgnYXBwOmhvbWUnKVxuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE1lbnUgPSB7fVxuTWVudS5HbG9iYWxDb250ZXh0ID0gcmVxdWlyZSAnLi9nbG9iYWwtY29udGV4dCdcbiMgR2VuZXJhdGVkIGJ5IEluZGV4Q29mZmVlR2VuZXJhdG9yIiwiI1xuIyDjgarjgpPjgafjgoLlkYrjgZLjgovjgrPjg7Pjg4bjgq3jgrnjg4jjgIJcbiMgbm90aWZ56Zai5L+C44Kk44OZ44Oz44OI44GM44Oh44Kk44Oz44Kz44Oz44OG44Kt44K544OI44GL44KJ5Lit57aZ44GV44KM44KL44CC5LiL6YOo44GL44KJ55u05o6l44Gv5omx44KP44Gq44GE44CCXG4jIOOBqOOCiuOBguOBiOOBmuODluODqeODs+OCr1xuI1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBHb2RDb250ZXh0IGV4dGVuZHMgQXBwLkJhc2VDb250ZXh0XG4gIGluaXRTdGF0ZTogKHByb3BzKSAtPiBwcm9wc1xuXG4gIGNvbXBvbmVudDogUmVhY3QuY3JlYXRlQ2xhc3MgKFxuICAgIHJlbmRlcjogLT5cbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHt9KVxuICApXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE5vdGlmaWVyID0ge31cbk5vdGlmaWVyLkdvZENvbnRleHQgPSByZXF1aXJlICcuL2dvZC1jb250ZXh0J1xuIyBHZW5lcmF0ZWQgYnkgSW5kZXhDb2ZmZWVHZW5lcmF0b3IiLCIjXG4jXG4jXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEJsYW5rQ29udGV4dCBleHRlbmRzIEFwcC5CYXNlQ29udGV4dFxuICBjb21wb25lbnQ6IFBvcnRhbCA9IFJlYWN0LmNyZWF0ZUNsYXNzIChcbiAgICBtaXhpbnM6IFtBcmRhLm1peGluXVxuXG4gICAgcmVuZGVyOiAtPlxuICAgICAgQXBwLkpTWC5wb3J0YWwoXG4gICAgICAgIEZhOiBBcHAuVmlldy5GYVxuICAgICAgICBMb2FkaW5nOiBBcHAuVmlldy5Mb2FkaW5nXG4gICAgICAgIHFUYWdzOiAoZm9yIHEgaW4gQHByb3BzLnRhZ3NcbiAgICAgICAgICBuZXcgQXBwLlRhZyhxKVxuICAgICAgICApXG4gICAgICAgIHNvdXJjZXM6IEBwcm9wcy5zb3VyY2VzXG4gICAgICAgIHNob3dUYWdnZWRJbmRleDogKGlkKT0+XG4gICAgICAgICAgQGRpc3BhdGNoKCdxdWVzdGlvbjp0YWdnZWQ6aW5kZXgnLCBpZClcbiAgICAgICAgaXNTb3VyY2VzTG9hZGVkOiA9PiBAcHJvcHMuc291cmNlcy5sZW5ndGggIT0gMFxuICAgICAgICBpc1RhZ3NMb2FkZWQ6ID0+IEBwcm9wcy50YWdzLmxlbmd0aCAhPSAwXG4gICAgICApXG4gIClcblxuICBpbml0U3RhdGU6IChwcm9wcykgLT5cbiAgICB0YWdzOiBbXVxuICAgIHNvdXJjZXM6IFtdXG5cbiAgZXhwYW5kQ29tcG9uZW50UHJvcHM6IChwcm9wcywgc3RhdGUpIC0+XG4gICAgc3RhdGVcblxuICBkZWxlZ2F0ZTogKHN1YnNjcmliZSkgLT5cbiAgICBzdXBlclxuICAgICNAX2luaXRpYWxpemVJbmRleCgpXG4gICAgc3Vic2NyaWJlICdjb250ZXh0OnN0YXJ0ZWQnLCAtPiBAX2luaXRpYWxpemVUYWdzKClcbiAgICBzdWJzY3JpYmUgJ2NvbnRleHQ6c3RhcnRlZCcsIC0+IEBfaW5pdGlhbGl6ZVNvdXJjZXMoKVxuICAgIHN1YnNjcmliZSAncXVlc3Rpb246c2hvdycsIChxKS0+IEByb290LmVtaXQoJ3F1ZXN0aW9uOnNob3cnLCBxKVxuICAgIHN1YnNjcmliZSAncXVlc3Rpb246dGFnZ2VkOmluZGV4JywgKGlkKS0+IEByb290LmVtaXQoJ3F1ZXN0aW9uOnRhZ2dlZDppbmRleCcsIFtpZF0pXG5cbiAgX2luaXRpYWxpemVUYWdzOiAtPlxuICAgIEBzdHJpa2VBcGkoQXBwLkxpbmtlci5nZXQoQXBwLlBhdGgudGFncykpLnRoZW4gKGRhdGEpPT5cbiAgICAgIEB1cGRhdGUgKHMpID0+IF8ubWVyZ2UocywgdGFnczogZGF0YS5ib2R5KVxuXG4gIF9pbml0aWFsaXplU291cmNlczogLT5cbiAgICBAc3RyaWtlQXBpKEFwcC5MaW5rZXIuZ2V0KEFwcC5QYXRoLnNvdXJjZXMpKS50aGVuIChkYXRhKT0+XG4gICAgICBAdXBkYXRlIChzKSA9PiBfLm1lcmdlKHMsIHNvdXJjZXM6IGRhdGEuYm9keSlcbiIsIiNcbiNcbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgSW5kZXhDb250ZXh0IGV4dGVuZHMgQXBwLkJhc2VDb250ZXh0XG4gIGluaXRTdGF0ZTogKHByb3BzKSAtPlxuICAgIGluZGV4OiBbXVxuICAgIGhlYWRlcjoge31cbiAgICBxVGFnczogW11cbiAgICB0YWdTZWxlY3RvclN0YXRlOiBBcHAuVGFnU2VsZWN0b3JTdGF0ZS5MT0FESU5HXG4gICAgc2VsZWN0b3JPcGVuZWQ6IGZhbHNlXG4gICAgc2VsZWN0ZWRUYWdzOiBpZiAhQHByb3BzLnRhZ3NcbiAgICAgIFtdXG4gICAgZWxzZVxuICAgICAgXy5tYXAoQHByb3BzLnRhZ3Muc3BsaXQoJywnKSwgKG4pPT4gK24pXG4gICAgYmFzZVBhdGg6ICcnXG5cbiAgZXhwYW5kQ29tcG9uZW50UHJvcHM6IChwcm9wcywgc3RhdGUpIC0+XG4gICAgc3RhdGVcblxuICBjb21wb25lbnQ6IFJlYWN0LmNyZWF0ZUNsYXNzIChcbiAgICBtaXhpbnM6IFtBcmRhLm1peGluXVxuXG4gICAgZ2V0SW5pdGlhbFN0YXRlOiAtPlxuICAgICAgb2xkOiBudWxsXG5cbiAgICByZW5kZXI6IC0+XG4gICAgICBBcHAuSlNYLlEuaW5kZXhQYWdlKFxuICAgICAgICBQYWdpbmF0b3I6IEFwcC5WaWV3LlBhZ2luYXRvclxuICAgICAgICBUYWdTZWxlY3RvcjogQXBwLlZpZXcuVGFnU2VsZWN0b3JcbiAgICAgICAgTG9hZGluZzogQXBwLlZpZXcuTG9hZGluZ1xuICAgICAgICBpbmRleDogKGZvciBxIGluIEBwcm9wcy5pbmRleFxuICAgICAgICAgIG5ldyBBcHAuUXVlc3Rpb24ocSlcbiAgICAgICAgKVxuICAgICAgICBoZWFkZXI6IEBwcm9wcy5oZWFkZXJcbiAgICAgICAgc2VsZWN0ZWRUYWdzOiBAcHJvcHMuc2VsZWN0ZWRUYWdzXG4gICAgICAgIHRhZ1NlbGVjdG9yU3RhdGU6IEBwcm9wcy50YWdTZWxlY3RvclN0YXRlXG4gICAgICAgIHNlbGVjdG9yT3BlbmVkOiBAcHJvcHMuc2VsZWN0b3JPcGVuZWRcbiAgICAgICAgcVRhZ3M6IChmb3IgdGFnIGluIEBwcm9wcy5xVGFnc1xuICAgICAgICAgIG5ldyBBcHAuVGFnKHRhZylcbiAgICAgICAgKVxuICAgICAgICBzaG93UXVlc3Rpb246IChlKT0+XG4gICAgICAgICAgQGRpc3BhdGNoKCdxdWVzdGlvbjpzaG93JywgZSlcbiAgICAgIClcblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZTogLT5cbiAgICAgIGlmIEBzdGF0ZS5vbGQgIT0gQHByb3BzLmluZGV4XG4gICAgICAgIEBkaXNwYXRjaCgnaW5mb3JtOnJlbmRlcmVkJylcbiAgICAgICAgQHN0YXRlLm9sZCA9IEBwcm9wcy5pbmRleFxuICApXG5cbiAgZGVsZWdhdGU6IChzdWJzY3JpYmUpIC0+XG4gICAgc3VwZXJcbiAgICAjQF9pbml0aWFsaXplSW5kZXgoKVxuICAgIHN1YnNjcmliZSAnY29udGV4dDpzdGFydGVkJywgLT4gQF9pbml0aWFsaXplSW5kZXgoKVxuICAgIHN1YnNjcmliZSAncXVlc3Rpb246c2hvdycsIChxKS0+IEByb290LmVtaXQoJ3F1ZXN0aW9uOnNob3cnLCBxKVxuICAgIHN1YnNjcmliZSAncXVlc3Rpb246aW5kZXg6cGFnaW5hdGUnLCBAcGFnaW5hdGVcbiAgICBzdWJzY3JpYmUgJ3F1ZXN0aW9uOnRhZzp0b2dnbGUnLCBAdG9nZ2xlVGFnXG4gICAgc3Vic2NyaWJlICdxdWVzdGlvbjp0YWdTZWxlY3Rvcjp0b2dnbGUnLCAtPlxuICAgICAgQHVwZGF0ZSAocykgLT5cbiAgICAgICAgcy5zZWxlY3Rvck9wZW5lZCA9ICFzLnNlbGVjdG9yT3BlbmVkXG4gICAgICAgIHNcblxuICBnZW5lcmF0ZUlkOiAtPlxuICAgIEBpZCA/PSAwXG4gICAgQGlkKytcbiAgICBAaWRcblxuICBjdXJyZW50SWQ6IC0+XG4gICAgQGlkID89IDBcblxuICBnZW5lcmF0ZVRhZ0lkOiAtPlxuICAgIEB0YWdJZCA/PSAwXG4gICAgQHRhZ0lkKytcbiAgICBAdGFnSWRcblxuICBjdXJyZW50VGFnSWQ6IC0+XG4gICAgQHRhZ0lkID89IDBcblxuICBwYWdpbmF0ZTogKHBhZ2UpLT5cbiAgICBsaW5rZXIgPSBBcHAuTGlua2VyLmdldChAc3RhdGUuYmFzZVBhdGgsIHBhZ2U6IHBhZ2UpXG4gICAgbXlJZCA9IEBnZW5lcmF0ZUlkKClcbiAgICBAc3RyaWtlQXBpKGxpbmtlcikudGhlbiAoZGF0YSk9PlxuICAgICAgdGhyb3cgJ29sZGVyJyBpZiBteUlkICE9IEBjdXJyZW50SWQoKVxuICAgICAgQHVwZGF0ZSAocykgPT5cbiAgICAgICAgcy5pbmRleCA9IGRhdGEuYm9keVxuICAgICAgICBzLmhlYWRlciA9IGRhdGEuaGVhZGVyXG4gICAgICAgIHNcbiAgICAudGhlbiA9PlxuICAgICAgQHJvb3QuZW1pdCgnaGlzdG9yeTpwdXNoJywgbGlua2VyKVxuICAgICAgQHJvb3QuZW1pdCgnd2luZG93OnRvcCcpXG5cbiAgdG9nZ2xlVGFnOiAoaWQpPT5cbiAgICB0YWdzID0gaWYgXy5pbmNsdWRlKEBzdGF0ZS5zZWxlY3RlZFRhZ3MsIGlkKVxuICAgICAgXy5yZW1vdmUoQHN0YXRlLnNlbGVjdGVkVGFncy5jb25jYXQoKSwgKG4pPT4gbiAhPSBpZClcbiAgICBlbHNlXG4gICAgICBuZXdUYWdzID0gQHN0YXRlLnNlbGVjdGVkVGFncy5jb25jYXQoKVxuICAgICAgbmV3VGFncy5wdXNoKGlkKVxuICAgICAgbmV3VGFnc1xuXG4gICAgdGFncyA9IF8uc29ydEJ5KHRhZ3MpXG5cbiAgICBsaW5rZXIgPSBBcHAuTGlua2VyLmdldChBcHAuUGF0aC50YWdnZWRJbmRleCwgdGFnczogdGFncy5qb2luKCcsJykpXG5cbiAgICBteUlkID0gQGdlbmVyYXRlVGFnSWQoKVxuICAgIEBnZW5lcmF0ZUlkKClcbiAgICBAdXBkYXRlIChzKSA9PlxuICAgICAgcy50YWdTZWxlY3RvclN0YXRlID0gQXBwLlRhZ1NlbGVjdG9yU3RhdGUuVE9HR0xFRFxuICAgICAgcy5zZWxlY3RlZFRhZ3MgPSB0YWdzXG4gICAgICBzLmluZGV4ID0gW11cbiAgICAgIHNcbiAgICBAc3RyaWtlQXBpKGxpbmtlcikudGhlbiAoZGF0YSk9PlxuICAgICAgdGhyb3cgJ29sZGVyJyBpZiBteUlkICE9IEBjdXJyZW50VGFnSWQoKVxuICAgICAgQHVwZGF0ZSAocykgPT5cbiAgICAgICAgcy5pbmRleCA9IGRhdGEuYm9keVxuICAgICAgICBzLmhlYWRlciA9IGRhdGEuaGVhZGVyXG4gICAgICAgIHNcbiAgICAudGhlbiA9PlxuICAgICAgQHJvb3QuZW1pdCgnaGlzdG9yeTpwdXNoJywgbGlua2VyKVxuICAgICAgQHVwZGF0ZSAocykgPT5cbiAgICAgICAgcy5iYXNlUGF0aCA9IEBfY2hvcHBlZFBhdGgoKVxuICAgICAgICBzXG4gICAgLnRoZW4gPT5cbiAgICAgIEB1cGRhdGUgKHMpID0+XG4gICAgICAgIHMudGFnU2VsZWN0b3JTdGF0ZSA9IEFwcC5UYWdTZWxlY3RvclN0YXRlLkxPQURJTkdcbiAgICAgICAgc1xuICAgIC50aGVuID0+XG4gICAgICBAc3RyaWtlQXBpKEFwcC5MaW5rZXIuZ2V0KEFwcC5QYXRoLnRhZ2dlZFRhZ3MsIHRhZ3M6IHRhZ3MpKS50aGVuIChkYXRhKT0+XG4gICAgICAgIEB1cGRhdGUgKHMpID0+XG4gICAgICAgICAgcy50YWdTZWxlY3RvclN0YXRlID0gQXBwLlRhZ1NlbGVjdG9yU3RhdGUuTE9BREVEXG4gICAgICAgICAgcy5xVGFncyA9IGRhdGEuYm9keVxuICAgICAgICAgIHNcblxuICBfaW5pdGlhbGl6ZUluZGV4OiAtPlxuICAgIEBzdHJpa2VBcGkoQXBwLkxpbmtlci5nZXQoQF9zdHJpcHBlZFBhdGgoKSkpLnRoZW4gKGRhdGEpPT5cbiAgICAgIEB1cGRhdGUgKHMpID0+XG4gICAgICAgIHMuYmFzZVBhdGggPSBAX2Nob3BwZWRQYXRoKClcbiAgICAgICAgcy5pbmRleCA9IGRhdGEuYm9keVxuICAgICAgICBzLmhlYWRlciA9IGRhdGEuaGVhZGVyXG4gICAgICAgIHNcbiAgICAgIC50aGVuID0+XG4gICAgICAgIEBfaW5pdGlhbGl6ZVRhZ3MoKVxuXG4gIF9pbml0aWFsaXplVGFnczogLT5cbiAgICBAc3RyaWtlQXBpKEFwcC5MaW5rZXIuZ2V0KEFwcC5QYXRoLnRhZ2dlZFRhZ3MsIHRhZ3M6IEBwcm9wcy50YWdzKSkudGhlbiAoZGF0YSk9PlxuICAgICAgQHVwZGF0ZSAocykgPT5cbiAgICAgICAgcy50YWdTZWxlY3RvclN0YXRlID0gQXBwLlRhZ1NlbGVjdG9yU3RhdGUuTE9BREVEXG4gICAgICAgIHMucVRhZ3MgPSBkYXRhLmJvZHlcbiAgICAgICAgc1xuIiwibW9kdWxlLmV4cG9ydHMgPSBRID0ge31cblEuSW5kZXhDb250ZXh0ID0gcmVxdWlyZSAnLi9pbmRleC1jb250ZXh0J1xuUS5RdWVzdGlvbkNvbnRleHQgPSByZXF1aXJlICcuL3F1ZXN0aW9uLWNvbnRleHQnXG4jIEdlbmVyYXRlZCBieSBJbmRleENvZmZlZUdlbmVyYXRvciIsIiNcbiNcbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgUXVlc3Rpb25Db250ZXh0IGV4dGVuZHMgQXBwLkJhc2VDb250ZXh0XG4gIGNvbXBvbmVudDogUmVhY3QuY3JlYXRlQ2xhc3MgKFxuICAgIG1peGluczogW0FyZGEubWl4aW5dXG5cbiAgICBnZXRJbml0aWFsU3RhdGU6IC0+XG4gICAgICBpbmZvcm1lZDogZmFsc2VcblxuICAgIHJlbmRlcjogLT5cbiAgICAgIHJldHVybiBBcHAuSlNYLmxvYWRpbmcoRmE6IEFwcC5WaWV3LkZhKSBpZiBAcHJvcHMuc3RhdGUgPT0gQXBwLlF1ZXN0aW9uU3RhdGUuTE9BRElOR1xuICAgICAgQXBwLkpTWC5RLnF1ZXN0aW9uKFxuICAgICAgICBGYTogQXBwLlZpZXcuRmFcbiAgICAgICAgU2luZ2xlQ2hvaWNlOiBBcHAuVmlldy5TaW5nbGVDaG9pY2VcbiAgICAgICAgTXVsdGlwbGVDaG9pY2VzOiBBcHAuVmlldy5NdWx0aXBsZUNob2ljZXNcbiAgICAgICAgRnJlZVRleHQ6IEFwcC5WaWV3LkZyZWVUZXh0XG4gICAgICAgIE94OiBBcHAuVmlldy5PeFxuICAgICAgICBJbk9yZGVyOiBBcHAuVmlldy5Jbk9yZGVyXG4gICAgICAgIFF1ZXN0aW9uU3RhdGU6IEFwcC5RdWVzdGlvblN0YXRlXG4gICAgICAgIExvYWRpbmc6IEFwcC5WaWV3LkxvYWRpbmdcbiAgICAgICAgc291cmNlTGluazogQHByb3BzLnNvdXJjZUxpbmtcbiAgICAgICAgc3RhdGU6IEBwcm9wcy5zdGF0ZVxuICAgICAgICBxdWVzdGlvbjogQHByb3BzLnF1ZXN0aW9uXG4gICAgICAgIGFuc3dlcnM6IEBwcm9wcy5hbnN3ZXJzXG4gICAgICAgIHJlc3VsdDogQHByb3BzLnJlc3VsdFxuICAgICAgICBxVGFnczogQHByb3BzLnFUYWdzXG4gICAgICAgIHN1Ym1pdDogPT5cbiAgICAgICAgICBAZGlzcGF0Y2goJ3F1ZXN0aW9uOnN1Ym1pdCcpXG4gICAgICAgIHNob3dUYWdnZWRJbmRleDogKGlkKT0+XG4gICAgICAgICAgQGRpc3BhdGNoKCdxdWVzdGlvbjp0YWdnZWQ6aW5kZXgnLCBpZClcbiAgICAgIClcblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZTogLT5cbiAgICAgIHVubGVzcyBAc3RhdGUuaW5mb3JtZWQgJiYgQHByb3BzLnF1ZXN0aW9uXG4gICAgICAgIEBkaXNwYXRjaCgnaW5mb3JtOnJlbmRlcmVkJylcbiAgICAgICAgQHN0YXRlLmluZm9ybWVkID0gdHJ1ZVxuICApXG5cbiAgaW5pdFN0YXRlOiAocHJvcHMpIC0+XG4gICAgaWQ6IHByb3BzLmlkXG4gICAgcXVlc3Rpb246IG51bGxcbiAgICBhbnN3ZXJzOiBudWxsXG4gICAgc3RhdGU6IEFwcC5RdWVzdGlvblN0YXRlLkxPQURJTkdcbiAgICByZXN1bHQ6IG51bGxcbiAgICBzb3VyY2VMaW5rOiBudWxsXG4gICAgcVRhZ3M6IG51bGxcblxuICBleHBhbmRDb21wb25lbnRQcm9wczogKHByb3BzLCBzdGF0ZSkgLT5cbiAgICBzdGF0ZVxuXG4gIGlzQW5zd2VyYWJsZTogLT5cbiAgICBAc3RhdGUuc3RhdGUgPT0gQXBwLlF1ZXN0aW9uU3RhdGUuQVNLSU5HIHx8IEBzdGF0ZS5zdGF0ZSA9PSBBcHAuUXVlc3Rpb25TdGF0ZS5BU0tFRFxuXG4gIGlzU3VibWl0dGFibGU6IC0+XG4gICAgQHN0YXRlLnN0YXRlID09IEFwcC5RdWVzdGlvblN0YXRlLkFTS0VEXG5cbiAgaXNJbk9yZGVyOiAtPlxuICAgIEBzdGF0ZS5xdWVzdGlvbi5pc0luT3JkZXIoKVxuXG4gIGlzQW5zd2Vyc0Z1bGxGaWxsZWQ6IC0+XG4gICAgaWYgQGlzSW5PcmRlcigpXG4gICAgICAhXy5pbmNsdWRlKEBzdGF0ZS5hbnN3ZXJzLCAnJykgJiYgIV8uaW5jbHVkZShAc3RhdGUuYW5zd2VycywgbnVsbCkgJiYgIV8uaW5jbHVkZShAc3RhdGUuYW5zd2VycywgdW5kZWZpbmVkKVxuICAgIGVsc2VcbiAgICAgICFfLmlzTnVsbChAc3RhdGUuYW5zd2VycykgJiYgKEBzdGF0ZS5hbnN3ZXJzLmxlbmd0aCA+IDAgfHwgXy5pc051bWJlcihAc3RhdGUuYW5zd2VycykpXG5cbiAgZGVsZWdhdGU6IChzdWJzY3JpYmUpIC0+XG4gICAgc3VwZXJcbiAgICBzdWJzY3JpYmUgJ2NvbnRleHQ6c3RhcnRlZCcsIC0+IEBfaW5pdGlhbGl6ZVF1ZXN0aW9uKClcbiAgICBzdWJzY3JpYmUgJ3F1ZXN0aW9uOnNob3cnLCAocSktPiBAcm9vdC5lbWl0KCdxdWVzdGlvbjpzaG93JywgcSlcbiAgICBzdWJzY3JpYmUgJ3F1ZXN0aW9uOmFuc3dlcicsIChhbnN3ZXIpLT5cbiAgICAgIHJldHVybiB1bmxlc3MgQGlzQW5zd2VyYWJsZSgpXG4gICAgICBAdXBkYXRlIChzKSAtPlxuICAgICAgICAjIF8ubWVyZ2Xjga/lhoXpg6jjga7phY3liJfjgoJtZXJnZeOBp+WHpueQhuOBl+OBpuOBl+OBvuOBhuOBn+OCgVxuICAgICAgICBzLmFuc3dlcnMgPSBhbnN3ZXJcbiAgICAgICAgc1xuICAgICAgLnRoZW4gPT5cbiAgICAgICAgaWYgQGlzQW5zd2Vyc0Z1bGxGaWxsZWQoKVxuICAgICAgICAgIEB1cGRhdGUgKHMpIC0+IF8ubWVyZ2Uocywgc3RhdGU6IEFwcC5RdWVzdGlvblN0YXRlLkFTS0VEKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgQHVwZGF0ZSAocykgLT4gXy5tZXJnZShzLCBzdGF0ZTogQXBwLlF1ZXN0aW9uU3RhdGUuQVNLSU5HKVxuXG4gICAgc3Vic2NyaWJlICdxdWVzdGlvbjpzdWJtaXQnLCAtPlxuICAgICAgcmV0dXJuIHVubGVzcyBAaXNTdWJtaXR0YWJsZSgpXG4gICAgICBAdXBkYXRlIChzKSAtPiBfLm1lcmdlKHMsIHN0YXRlOiBBcHAuUXVlc3Rpb25TdGF0ZS5TVUJNSVRUSU5HKVxuICAgICAgQHN0cmlrZUFwaShBcHAuTGlua2VyLnBvc3QoQXBwLlBhdGgubWFyaywgaWQ6IEBzdGF0ZS5xdWVzdGlvbi5pZCwgYW5zd2VyczogQHN0YXRlLmFuc3dlcnMpKS50aGVuIChkYXRhKT0+XG4gICAgICAgIEB1cGRhdGUgKHMpIC0+IF8ubWVyZ2UocyxcbiAgICAgICAgICByZXN1bHQ6IG5ldyBBcHAuTWFyayhkYXRhLmJvZHksIHMucXVlc3Rpb24ub3B0aW9ucylcbiAgICAgICAgICBzdGF0ZTogQXBwLlF1ZXN0aW9uU3RhdGUuTUFSS0VEXG4gICAgICAgIClcbiAgICBzdWJzY3JpYmUgJ3F1ZXN0aW9uOnRhZ2dlZDppbmRleCcsIChpZCktPiBAcm9vdC5lbWl0KCdxdWVzdGlvbjp0YWdnZWQ6aW5kZXgnLCBbaWRdKVxuXG4gIF9pbml0aWFsaXplUXVlc3Rpb246IC0+XG4gICAgQHN0cmlrZUFwaShBcHAuTGlua2VyLmdldChBcHAuUGF0aC5xLCBpZDogQHByb3BzLmlkKSkudGhlbiAoZGF0YSk9PlxuICAgICAgQHVwZGF0ZSAocykgLT4gXy5tZXJnZShzLFxuICAgICAgICBxdWVzdGlvbjogbmV3IEFwcC5RdWVzdGlvbihkYXRhLmJvZHkpXG4gICAgICAgIHN0YXRlOiBBcHAuUXVlc3Rpb25TdGF0ZS5BU0tJTkdcbiAgICAgIClcbiAgICAgIC50aGVuID0+XG4gICAgICAgIGlmIEBpc0luT3JkZXIoKVxuICAgICAgICAgIEB1cGRhdGUgKHMpIC0+IF8ubWVyZ2UocywgYW5zd2VyczogbmV3IEFycmF5KHMucXVlc3Rpb24uYW5zd2Vyc051bWJlcikpXG4gICAgICAudGhlbiA9PlxuICAgICAgICBpZiBAc3RhdGUucXVlc3Rpb24uaGFzU291cmNlXG4gICAgICAgICAgQHN0cmlrZUFwaShBcHAuTGlua2VyLmdldChBcHAuUGF0aC5zb3VyY2UsIGlkOiBAc3RhdGUucXVlc3Rpb24uc291cmNlTGlua0lkKSkudGhlbiAoZGF0YSk9PlxuICAgICAgICAgICAgQHVwZGF0ZSAocykgLT5cbiAgICAgICAgICAgICAgcy5zb3VyY2VMaW5rID0gbmV3IEFwcC5Tb3VyY2VMaW5rKGRhdGEuYm9keSlcbiAgICAgICAgICAgICAgc1xuICAgICAgICAgIEBzdHJpa2VBcGkoQXBwLkxpbmtlci5nZXQoQXBwLlBhdGgucVRhZ3MsIGlkOiBAcHJvcHMuaWQpKS50aGVuIChkYXRhKT0+XG4gICAgICAgICAgICBAdXBkYXRlIChzKSAtPlxuICAgICAgICAgICAgICBzLnFUYWdzID0gXy5tYXAoZGF0YS5ib2R5LCAodGFnKT0+XG4gICAgICAgICAgICAgICAgbmV3IEFwcC5UYWcodGFnKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIHNcblxuIiwibW9kdWxlLmV4cG9ydHMgPSBKU1ggPSB7XG4gIGxvYWRpbmc6IHJlcXVpcmUgJy4vbG9hZGluZy5qcydcbiAgbWFpbjogcmVxdWlyZSAnLi9tYWluLmpzJ1xuICBNZW51OlxuICAgIG1lbnU6IHJlcXVpcmUgJy4vbWVudS9tZW51LmpzJ1xuICBwYWdpbmF0b3I6IHJlcXVpcmUgJy4vcGFnaW5hdG9yLmpzJ1xuICBwb3J0YWw6IHJlcXVpcmUgJy4vcG9ydGFsLmpzJ1xuICBROlxuICAgIGZyZWVUZXh0OiByZXF1aXJlICcuL3EvZnJlZS10ZXh0LmpzJ1xuICAgIGluT3JkZXI6IHJlcXVpcmUgJy4vcS9pbi1vcmRlci5qcydcbiAgICBpbmRleFBhZ2U6IHJlcXVpcmUgJy4vcS9pbmRleC1wYWdlLmpzJ1xuICAgIG94OiByZXF1aXJlICcuL3Evb3guanMnXG4gICAgcXVlc3Rpb246IHJlcXVpcmUgJy4vcS9xdWVzdGlvbi5qcydcbiAgICBzaW5nbGVDaG9pY2U6IHJlcXVpcmUgJy4vcS9zaW5nbGUtY2hvaWNlLmpzJ1xuICAgIHRhZ1NlbGVjdG9yOiByZXF1aXJlICcuL3EvdGFnLXNlbGVjdG9yLmpzJ1xufSIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uIChSZWFjdCkge1xuICB2YXIgZm4gPSBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICB2YXIgdGFncyA9IFtdO1xuICAgIHZhciBsb2NhbHNfZm9yX3dpdGggPSBsb2NhbHMgfHwge307XG4gICAgKGZ1bmN0aW9uKEZhKSB7XG4gICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcInNlY3Rpb25cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiY29tbW9uLWxvYWRpbmdcIlxuICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICBpY29uOiBcInNwaW5uZXJcIixcbiAgICAgICAgYW5pbWF0aW9uOiBcInB1bHNlXCJcbiAgICAgIH0pLCBcIiBcIiwgXCJOb3cgbG9hZGluZy4uLlwiKSk7XG4gICAgfSkuY2FsbCh0aGlzLCBcIkZhXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLkZhIDogdHlwZW9mIEZhICE9PSBcInVuZGVmaW5lZFwiID8gRmEgOiB1bmRlZmluZWQpO1xuICAgIGlmICh0YWdzLmxlbmd0aCA9PT0gMSAmJiAhQXJyYXkuaXNBcnJheSh0YWdzWzBdKSkge1xuICAgICAgcmV0dXJuIHRhZ3MucG9wKCk7XG4gICAgfVxuICAgIHRhZ3MudW5zaGlmdChcImRpdlwiLCBudWxsKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudC5hcHBseShSZWFjdCwgdGFncyk7XG4gIH07XG4gIFxuICBmbi5sb2NhbHMgPSBmdW5jdGlvbiBzZXRMb2NhbHMobG9jYWxzKSB7XG4gICAgdmFyIHJlbmRlciA9IHRoaXM7XG4gICAgZnVuY3Rpb24gbmV3UmVuZGVyKGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgIHZhciBuZXdMb2NhbHMgPSB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBsb2NhbHMpIHtcbiAgICAgICAgbmV3TG9jYWxzW2tleV0gPSBsb2NhbHNba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChhZGRpdGlvbmFsTG9jYWxzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBhZGRpdGlvbmFsTG9jYWxzKSB7XG4gICAgICAgICAgbmV3TG9jYWxzW2tleV0gPSBhZGRpdGlvbmFsTG9jYWxzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZW5kZXIuY2FsbCh0aGlzLCBuZXdMb2NhbHMpO1xuICAgIH1cbiAgICBuZXdSZW5kZXIubG9jYWxzID0gc2V0TG9jYWxzO1xuICAgIHJldHVybiBuZXdSZW5kZXI7XG4gIH07O1xuICByZXR1cm4gZm47XG59KFJlYWN0KSkiLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoUmVhY3QpIHtcbiAgdmFyIGZuID0gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgdmFyIHRhZ3MgPSBbXTtcbiAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcImFydGljbGVcIiwge1xuICAgICAgaWQ6IFwibm90aWZpZXJcIixcbiAgICAgIHJlZjogXCJub3RpZmllclwiXG4gICAgfSkpO1xuICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYXJ0aWNsZVwiLCB7XG4gICAgICBpZDogXCJtZW51XCIsXG4gICAgICByZWY6IFwibWVudVwiXG4gICAgfSkpO1xuICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYXJ0aWNsZVwiLCB7XG4gICAgICBpZDogXCJjb250ZW50XCIsXG4gICAgICByZWY6IFwiY29udGVudFwiXG4gICAgfSkpO1xuICAgIGlmICh0YWdzLmxlbmd0aCA9PT0gMSAmJiAhQXJyYXkuaXNBcnJheSh0YWdzWzBdKSkge1xuICAgICAgcmV0dXJuIHRhZ3MucG9wKCk7XG4gICAgfVxuICAgIHRhZ3MudW5zaGlmdChcImRpdlwiLCBudWxsKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudC5hcHBseShSZWFjdCwgdGFncyk7XG4gIH07XG4gIFxuICBmbi5sb2NhbHMgPSBmdW5jdGlvbiBzZXRMb2NhbHMobG9jYWxzKSB7XG4gICAgdmFyIHJlbmRlciA9IHRoaXM7XG4gICAgZnVuY3Rpb24gbmV3UmVuZGVyKGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgIHZhciBuZXdMb2NhbHMgPSB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBsb2NhbHMpIHtcbiAgICAgICAgbmV3TG9jYWxzW2tleV0gPSBsb2NhbHNba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChhZGRpdGlvbmFsTG9jYWxzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBhZGRpdGlvbmFsTG9jYWxzKSB7XG4gICAgICAgICAgbmV3TG9jYWxzW2tleV0gPSBhZGRpdGlvbmFsTG9jYWxzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZW5kZXIuY2FsbCh0aGlzLCBuZXdMb2NhbHMpO1xuICAgIH1cbiAgICBuZXdSZW5kZXIubG9jYWxzID0gc2V0TG9jYWxzO1xuICAgIHJldHVybiBuZXdSZW5kZXI7XG4gIH07O1xuICByZXR1cm4gZm47XG59KFJlYWN0KSkiLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoUmVhY3QpIHtcbiAgdmFyIGZuID0gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgdmFyIHRhZ3MgPSBbXTtcbiAgICB2YXIgbG9jYWxzX2Zvcl93aXRoID0gbG9jYWxzIHx8IHt9O1xuICAgIChmdW5jdGlvbihGYSwgZ29Ib21lKSB7XG4gICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcInNlY3Rpb25cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiZ2xvYmFsLW1lbnUgbWVudS1hcmVhXCJcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiZ2xvYmFsLW1lbnUgbWVudS1ib2R5XCJcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgICAgICBvbkNsaWNrOiBnb0hvbWUsXG4gICAgICAgIGNsYXNzTmFtZTogXCJnbG9iYWwtbWVudSBnby1ob21lXCJcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmEsIHtcbiAgICAgICAgaWNvbjogXCJob21lXCIsXG4gICAgICAgIHNjYWxlOiAyXG4gICAgICB9KSkpKSk7XG4gICAgfSkuY2FsbCh0aGlzLCBcIkZhXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLkZhIDogdHlwZW9mIEZhICE9PSBcInVuZGVmaW5lZFwiID8gRmEgOiB1bmRlZmluZWQsIFwiZ29Ib21lXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLmdvSG9tZSA6IHR5cGVvZiBnb0hvbWUgIT09IFwidW5kZWZpbmVkXCIgPyBnb0hvbWUgOiB1bmRlZmluZWQpO1xuICAgIGlmICh0YWdzLmxlbmd0aCA9PT0gMSAmJiAhQXJyYXkuaXNBcnJheSh0YWdzWzBdKSkge1xuICAgICAgcmV0dXJuIHRhZ3MucG9wKCk7XG4gICAgfVxuICAgIHRhZ3MudW5zaGlmdChcImRpdlwiLCBudWxsKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudC5hcHBseShSZWFjdCwgdGFncyk7XG4gIH07XG4gIFxuICBmbi5sb2NhbHMgPSBmdW5jdGlvbiBzZXRMb2NhbHMobG9jYWxzKSB7XG4gICAgdmFyIHJlbmRlciA9IHRoaXM7XG4gICAgZnVuY3Rpb24gbmV3UmVuZGVyKGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgIHZhciBuZXdMb2NhbHMgPSB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBsb2NhbHMpIHtcbiAgICAgICAgbmV3TG9jYWxzW2tleV0gPSBsb2NhbHNba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChhZGRpdGlvbmFsTG9jYWxzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBhZGRpdGlvbmFsTG9jYWxzKSB7XG4gICAgICAgICAgbmV3TG9jYWxzW2tleV0gPSBhZGRpdGlvbmFsTG9jYWxzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZW5kZXIuY2FsbCh0aGlzLCBuZXdMb2NhbHMpO1xuICAgIH1cbiAgICBuZXdSZW5kZXIubG9jYWxzID0gc2V0TG9jYWxzO1xuICAgIHJldHVybiBuZXdSZW5kZXI7XG4gIH07O1xuICByZXR1cm4gZm47XG59KFJlYWN0KSkiLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoUmVhY3QpIHtcbiAgdmFyIGZuID0gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgdmFyIHRhZ3MgPSBbXTtcbiAgICB2YXIgbG9jYWxzX2Zvcl93aXRoID0gbG9jYWxzIHx8IHt9O1xuICAgIChmdW5jdGlvbihsaW5rcywgcGFnaW5hdGUpIHtcbiAgICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwic2VjdGlvblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1pbmRleCBwYWdpbmF0b3IgYXJlYVwiXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24taW5kZXggcGFnaW5hdG9yIGxpc3RcIlxuICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0YWdzID0gW107XG4gICAgICAgIHZhciAkJG9iaiA9IGxpbmtzO1xuICAgICAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgJCRvYmoubGVuZ3RoKSBmb3IgKHZhciAkaW5kZXggPSAwLCAkJGwgPSAkJG9iai5sZW5ndGg7ICQkbCA+ICRpbmRleDsgJGluZGV4KyspIHtcbiAgICAgICAgICB2YXIgbGluayA9ICQkb2JqWyRpbmRleF07XG4gICAgICAgICAgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQuYXBwbHkoUmVhY3QsIFsgXCJsaVwiLCB7XG4gICAgICAgICAgICBrZXk6IGxpbmsucGFnZSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1pbmRleCBwYWdpbmF0b3IgYm9keVwiXG4gICAgICAgICAgfSBdLmNvbmNhdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0YWdzID0gW107XG4gICAgICAgICAgICBsaW5rLmlzQ3VycmVudCA/IHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICAgICAgICAgIG9uQ2xpY2s6IHBhZ2luYXRlLmJpbmQobnVsbCwgbGluay5wYWdlKSxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLWluZGV4IHBhZ2luYXRvciBhbmNob3Igbm93XCJcbiAgICAgICAgICAgIH0sIGxpbmsucGFnZSkpIDogdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICAgICAgICAgICAgb25DbGljazogcGFnaW5hdGUuYmluZChudWxsLCBsaW5rLnBhZ2UpLFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24taW5kZXggcGFnaW5hdG9yIGFuY2hvciByZWFkeVwiXG4gICAgICAgICAgICB9LCBsaW5rLnBhZ2UpKTtcbiAgICAgICAgICAgIHJldHVybiB0YWdzO1xuICAgICAgICAgIH0uY2FsbCh0aGlzKSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgJCRsID0gMDtcbiAgICAgICAgICBmb3IgKHZhciAkaW5kZXggaW4gJCRvYmopIHtcbiAgICAgICAgICAgICQkbCsrO1xuICAgICAgICAgICAgdmFyIGxpbmsgPSAkJG9ialskaW5kZXhdO1xuICAgICAgICAgICAgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQuYXBwbHkoUmVhY3QsIFsgXCJsaVwiLCB7XG4gICAgICAgICAgICAgIGtleTogbGluay5wYWdlLFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24taW5kZXggcGFnaW5hdG9yIGJvZHlcIlxuICAgICAgICAgICAgfSBdLmNvbmNhdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyIHRhZ3MgPSBbXTtcbiAgICAgICAgICAgICAgbGluay5pc0N1cnJlbnQgPyB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHBhZ2luYXRlLmJpbmQobnVsbCwgbGluay5wYWdlKSxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24taW5kZXggcGFnaW5hdG9yIGFuY2hvciBub3dcIlxuICAgICAgICAgICAgICB9LCBsaW5rLnBhZ2UpKSA6IHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICAgICAgICAgICAgb25DbGljazogcGFnaW5hdGUuYmluZChudWxsLCBsaW5rLnBhZ2UpLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1pbmRleCBwYWdpbmF0b3IgYW5jaG9yIHJlYWR5XCJcbiAgICAgICAgICAgICAgfSwgbGluay5wYWdlKSk7XG4gICAgICAgICAgICAgIHJldHVybiB0YWdzO1xuICAgICAgICAgICAgfS5jYWxsKHRoaXMpKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFncztcbiAgICAgIH0uY2FsbCh0aGlzKSkpKTtcbiAgICB9KS5jYWxsKHRoaXMsIFwibGlua3NcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGgubGlua3MgOiB0eXBlb2YgbGlua3MgIT09IFwidW5kZWZpbmVkXCIgPyBsaW5rcyA6IHVuZGVmaW5lZCwgXCJwYWdpbmF0ZVwiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5wYWdpbmF0ZSA6IHR5cGVvZiBwYWdpbmF0ZSAhPT0gXCJ1bmRlZmluZWRcIiA/IHBhZ2luYXRlIDogdW5kZWZpbmVkKTtcbiAgICBpZiAodGFncy5sZW5ndGggPT09IDEgJiYgIUFycmF5LmlzQXJyYXkodGFnc1swXSkpIHtcbiAgICAgIHJldHVybiB0YWdzLnBvcCgpO1xuICAgIH1cbiAgICB0YWdzLnVuc2hpZnQoXCJkaXZcIiwgbnVsbCk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQuYXBwbHkoUmVhY3QsIHRhZ3MpO1xuICB9O1xuICBcbiAgZm4ubG9jYWxzID0gZnVuY3Rpb24gc2V0TG9jYWxzKGxvY2Fscykge1xuICAgIHZhciByZW5kZXIgPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG5ld1JlbmRlcihhZGRpdGlvbmFsTG9jYWxzKSB7XG4gICAgICB2YXIgbmV3TG9jYWxzID0ge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gbG9jYWxzKSB7XG4gICAgICAgIG5ld0xvY2Fsc1trZXldID0gbG9jYWxzW2tleV07XG4gICAgICB9XG4gICAgICBpZiAoYWRkaXRpb25hbExvY2Fscykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gYWRkaXRpb25hbExvY2Fscykge1xuICAgICAgICAgIG5ld0xvY2Fsc1trZXldID0gYWRkaXRpb25hbExvY2Fsc1trZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVuZGVyLmNhbGwodGhpcywgbmV3TG9jYWxzKTtcbiAgICB9XG4gICAgbmV3UmVuZGVyLmxvY2FscyA9IHNldExvY2FscztcbiAgICByZXR1cm4gbmV3UmVuZGVyO1xuICB9OztcbiAgcmV0dXJuIGZuO1xufShSZWFjdCkpIiwibW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gKFJlYWN0KSB7XG4gIHZhciBmbiA9IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgIHZhciB0YWdzID0gW107XG4gICAgdmFyIGxvY2Fsc19mb3Jfd2l0aCA9IGxvY2FscyB8fCB7fTtcbiAgICAoZnVuY3Rpb24oRmEsIExvYWRpbmcsIGlzU291cmNlc0xvYWRlZCwgaXNUYWdzTG9hZGVkLCBxVGFncywgc2hvd1RhZ2dlZEluZGV4LCBzb3VyY2VzKSB7XG4gICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcInNlY3Rpb25cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicG9ydGFsIHBvcnRhbC1ib2R5XCJcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQuYXBwbHkoUmVhY3QsIFsgXCJzZWN0aW9uXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInBvcnRhbCB0YWctbGlzdCBhcmVhXCJcbiAgICAgIH0gXS5jb25jYXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0YWdzID0gW107XG4gICAgICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiaDFcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJwb3J0YWwgc3ViLXRpdGxlXCJcbiAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgIGljb246IFwidGFnc1wiXG4gICAgICAgIH0pLCBcIuOCv+OCsOODquOCueODiFwiKSk7XG4gICAgICAgIGlzVGFnc0xvYWRlZCgpID8gdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInBvcnRhbCB0YWctbGlzdC1ib2R5XCJcbiAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRhZ3MgPSBbXTtcbiAgICAgICAgICB2YXIgJCRvYmogPSBxVGFncztcbiAgICAgICAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgJCRvYmoubGVuZ3RoKSBmb3IgKHZhciAkaW5kZXggPSAwLCAkJGwgPSAkJG9iai5sZW5ndGg7ICQkbCA+ICRpbmRleDsgJGluZGV4KyspIHtcbiAgICAgICAgICAgIHZhciB0YWcgPSAkJG9ialskaW5kZXhdO1xuICAgICAgICAgICAgdGFnLmhhc19xdWVzdGlvbigpID8gdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7XG4gICAgICAgICAgICAgIGtleTogdGFnLmlkLFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IFwicG9ydGFsIHRhZy1saXN0LXRhZ1wiXG4gICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEZhLCB7XG4gICAgICAgICAgICAgIGljb246IFwidGFnXCJcbiAgICAgICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICAgICAgICAgIG9uQ2xpY2s6IHNob3dUYWdnZWRJbmRleC5iaW5kKG51bGwsIHRhZy5pZClcbiAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm5hbWVcIlxuICAgICAgICAgICAgfSwgdGFnLmRpc3BsYXkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJjb3VudFwiXG4gICAgICAgICAgICB9LCB0YWcuY291bnRUZXh0KSkpKSA6IHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge1xuICAgICAgICAgICAgICBrZXk6IHRhZy5pZCxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInBvcnRhbCB0YWctbGlzdC10YWcgZGlzYWJsZWRcIlxuICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgICAgICBpY29uOiBcInRhZ1wiXG4gICAgICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge30sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm5hbWVcIlxuICAgICAgICAgICAgfSwgdGFnLmRpc3BsYXkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJjb3VudFwiXG4gICAgICAgICAgICB9LCB0YWcuY291bnRUZXh0KSkpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyICQkbCA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciAkaW5kZXggaW4gJCRvYmopIHtcbiAgICAgICAgICAgICAgJCRsKys7XG4gICAgICAgICAgICAgIHZhciB0YWcgPSAkJG9ialskaW5kZXhdO1xuICAgICAgICAgICAgICB0YWcuaGFzX3F1ZXN0aW9uKCkgPyB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHtcbiAgICAgICAgICAgICAgICBrZXk6IHRhZy5pZCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwicG9ydGFsIHRhZy1saXN0LXRhZ1wiXG4gICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmEsIHtcbiAgICAgICAgICAgICAgICBpY29uOiBcInRhZ1wiXG4gICAgICAgICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICAgICAgICAgICAgb25DbGljazogc2hvd1RhZ2dlZEluZGV4LmJpbmQobnVsbCwgdGFnLmlkKVxuICAgICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm5hbWVcIlxuICAgICAgICAgICAgICB9LCB0YWcuZGlzcGxheSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiY291bnRcIlxuICAgICAgICAgICAgICB9LCB0YWcuY291bnRUZXh0KSkpKSA6IHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge1xuICAgICAgICAgICAgICAgIGtleTogdGFnLmlkLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJwb3J0YWwgdGFnLWxpc3QtdGFnIGRpc2FibGVkXCJcbiAgICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgICAgICAgIGljb246IFwidGFnXCJcbiAgICAgICAgICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHt9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm5hbWVcIlxuICAgICAgICAgICAgICB9LCB0YWcuZGlzcGxheSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiY291bnRcIlxuICAgICAgICAgICAgICB9LCB0YWcuY291bnRUZXh0KSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRhZ3M7XG4gICAgICAgIH0uY2FsbCh0aGlzKSkpIDogdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZywge30pKTtcbiAgICAgICAgcmV0dXJuIHRhZ3M7XG4gICAgICB9LmNhbGwodGhpcykpKSwgUmVhY3QuY3JlYXRlRWxlbWVudC5hcHBseShSZWFjdCwgWyBcInNlY3Rpb25cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicG9ydGFsIHNvdXJjZSBhcmVhXCJcbiAgICAgIH0gXS5jb25jYXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0YWdzID0gW107XG4gICAgICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiaDFcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJwb3J0YWwgc3ViLXRpdGxlXCJcbiAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgIGljb246IFwibGlua1wiXG4gICAgICAgIH0pLCBcIuWHuuWFuOODquOCueODiO+8iOS6iOWumuWQq+OCgO+8iVwiKSk7XG4gICAgICAgIGlzU291cmNlc0xvYWRlZCgpID8gdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInBvcnRhbCBzb3VyY2UtbGlzdC1ib2R5XCJcbiAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRhZ3MgPSBbXTtcbiAgICAgICAgICB2YXIgJCRvYmogPSBzb3VyY2VzO1xuICAgICAgICAgIGlmIChcIm51bWJlclwiID09IHR5cGVvZiAkJG9iai5sZW5ndGgpIGZvciAodmFyICRpbmRleCA9IDAsICQkbCA9ICQkb2JqLmxlbmd0aDsgJCRsID4gJGluZGV4OyAkaW5kZXgrKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9ICQkb2JqWyRpbmRleF07XG4gICAgICAgICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHtcbiAgICAgICAgICAgICAga2V5OiBzb3VyY2UuaWQsXG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJwb3J0YWwgc291cmNlLWxpc3Qtc291cmNlXCJcbiAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmEsIHtcbiAgICAgICAgICAgICAgaWNvbjogXCJsaW5rXCJcbiAgICAgICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICAgICAgICAgIGhyZWY6IHNvdXJjZS51cmxcbiAgICAgICAgICAgIH0sIHNvdXJjZS5kaXNwbGF5KSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgJCRsID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyICRpbmRleCBpbiAkJG9iaikge1xuICAgICAgICAgICAgICAkJGwrKztcbiAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9ICQkb2JqWyRpbmRleF07XG4gICAgICAgICAgICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge1xuICAgICAgICAgICAgICAgIGtleTogc291cmNlLmlkLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJwb3J0YWwgc291cmNlLWxpc3Qtc291cmNlXCJcbiAgICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgICAgICAgIGljb246IFwibGlua1wiXG4gICAgICAgICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICAgICAgICAgICAgaHJlZjogc291cmNlLnVybFxuICAgICAgICAgICAgICB9LCBzb3VyY2UuZGlzcGxheSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRhZ3M7XG4gICAgICAgIH0uY2FsbCh0aGlzKSkpIDogdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZywge30pKTtcbiAgICAgICAgcmV0dXJuIHRhZ3M7XG4gICAgICB9LmNhbGwodGhpcykpKSkpO1xuICAgIH0pLmNhbGwodGhpcywgXCJGYVwiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5GYSA6IHR5cGVvZiBGYSAhPT0gXCJ1bmRlZmluZWRcIiA/IEZhIDogdW5kZWZpbmVkLCBcIkxvYWRpbmdcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguTG9hZGluZyA6IHR5cGVvZiBMb2FkaW5nICE9PSBcInVuZGVmaW5lZFwiID8gTG9hZGluZyA6IHVuZGVmaW5lZCwgXCJpc1NvdXJjZXNMb2FkZWRcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguaXNTb3VyY2VzTG9hZGVkIDogdHlwZW9mIGlzU291cmNlc0xvYWRlZCAhPT0gXCJ1bmRlZmluZWRcIiA/IGlzU291cmNlc0xvYWRlZCA6IHVuZGVmaW5lZCwgXCJpc1RhZ3NMb2FkZWRcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguaXNUYWdzTG9hZGVkIDogdHlwZW9mIGlzVGFnc0xvYWRlZCAhPT0gXCJ1bmRlZmluZWRcIiA/IGlzVGFnc0xvYWRlZCA6IHVuZGVmaW5lZCwgXCJxVGFnc1wiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5xVGFncyA6IHR5cGVvZiBxVGFncyAhPT0gXCJ1bmRlZmluZWRcIiA/IHFUYWdzIDogdW5kZWZpbmVkLCBcInNob3dUYWdnZWRJbmRleFwiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5zaG93VGFnZ2VkSW5kZXggOiB0eXBlb2Ygc2hvd1RhZ2dlZEluZGV4ICE9PSBcInVuZGVmaW5lZFwiID8gc2hvd1RhZ2dlZEluZGV4IDogdW5kZWZpbmVkLCBcInNvdXJjZXNcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguc291cmNlcyA6IHR5cGVvZiBzb3VyY2VzICE9PSBcInVuZGVmaW5lZFwiID8gc291cmNlcyA6IHVuZGVmaW5lZCk7XG4gICAgaWYgKHRhZ3MubGVuZ3RoID09PSAxICYmICFBcnJheS5pc0FycmF5KHRhZ3NbMF0pKSB7XG4gICAgICByZXR1cm4gdGFncy5wb3AoKTtcbiAgICB9XG4gICAgdGFncy51bnNoaWZ0KFwiZGl2XCIsIG51bGwpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KFJlYWN0LCB0YWdzKTtcbiAgfTtcbiAgXG4gIGZuLmxvY2FscyA9IGZ1bmN0aW9uIHNldExvY2Fscyhsb2NhbHMpIHtcbiAgICB2YXIgcmVuZGVyID0gdGhpcztcbiAgICBmdW5jdGlvbiBuZXdSZW5kZXIoYWRkaXRpb25hbExvY2Fscykge1xuICAgICAgdmFyIG5ld0xvY2FscyA9IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIGxvY2Fscykge1xuICAgICAgICBuZXdMb2NhbHNba2V5XSA9IGxvY2Fsc1trZXldO1xuICAgICAgfVxuICAgICAgaWYgKGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgICAgICBuZXdMb2NhbHNba2V5XSA9IGFkZGl0aW9uYWxMb2NhbHNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIG5ld0xvY2Fscyk7XG4gICAgfVxuICAgIG5ld1JlbmRlci5sb2NhbHMgPSBzZXRMb2NhbHM7XG4gICAgcmV0dXJuIG5ld1JlbmRlcjtcbiAgfTs7XG4gIHJldHVybiBmbjtcbn0oUmVhY3QpKSIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uIChSZWFjdCkge1xuICB2YXIgZm4gPSBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICB2YXIgdGFncyA9IFtdO1xuICAgIHZhciBsb2NhbHNfZm9yX3dpdGggPSBsb2NhbHMgfHwge307XG4gICAgKGZ1bmN0aW9uKGFuc3dlcnMsIGlucHV0LCBpc01hcmtlZCkge1xuICAgICAgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24tcSB0ZXh0XCJcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgIHBsYWNlaG9sZGVyOiBcIuWFpeWKm+ashFwiLFxuICAgICAgICBkaXNhYmxlZDogaXNNYXJrZWQoKSxcbiAgICAgICAgdmFsdWU6IGFuc3dlcnMsXG4gICAgICAgIG9uQ2hhbmdlOiBpbnB1dCxcbiAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgZnJlZS10ZXh0XCJcbiAgICAgIH0pKSk7XG4gICAgfSkuY2FsbCh0aGlzLCBcImFuc3dlcnNcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguYW5zd2VycyA6IHR5cGVvZiBhbnN3ZXJzICE9PSBcInVuZGVmaW5lZFwiID8gYW5zd2VycyA6IHVuZGVmaW5lZCwgXCJpbnB1dFwiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5pbnB1dCA6IHR5cGVvZiBpbnB1dCAhPT0gXCJ1bmRlZmluZWRcIiA/IGlucHV0IDogdW5kZWZpbmVkLCBcImlzTWFya2VkXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLmlzTWFya2VkIDogdHlwZW9mIGlzTWFya2VkICE9PSBcInVuZGVmaW5lZFwiID8gaXNNYXJrZWQgOiB1bmRlZmluZWQpO1xuICAgIGlmICh0YWdzLmxlbmd0aCA9PT0gMSAmJiAhQXJyYXkuaXNBcnJheSh0YWdzWzBdKSkge1xuICAgICAgcmV0dXJuIHRhZ3MucG9wKCk7XG4gICAgfVxuICAgIHRhZ3MudW5zaGlmdChcImRpdlwiLCBudWxsKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudC5hcHBseShSZWFjdCwgdGFncyk7XG4gIH07XG4gIFxuICBmbi5sb2NhbHMgPSBmdW5jdGlvbiBzZXRMb2NhbHMobG9jYWxzKSB7XG4gICAgdmFyIHJlbmRlciA9IHRoaXM7XG4gICAgZnVuY3Rpb24gbmV3UmVuZGVyKGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgIHZhciBuZXdMb2NhbHMgPSB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBsb2NhbHMpIHtcbiAgICAgICAgbmV3TG9jYWxzW2tleV0gPSBsb2NhbHNba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChhZGRpdGlvbmFsTG9jYWxzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBhZGRpdGlvbmFsTG9jYWxzKSB7XG4gICAgICAgICAgbmV3TG9jYWxzW2tleV0gPSBhZGRpdGlvbmFsTG9jYWxzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZW5kZXIuY2FsbCh0aGlzLCBuZXdMb2NhbHMpO1xuICAgIH1cbiAgICBuZXdSZW5kZXIubG9jYWxzID0gc2V0TG9jYWxzO1xuICAgIHJldHVybiBuZXdSZW5kZXI7XG4gIH07O1xuICByZXR1cm4gZm47XG59KFJlYWN0KSkiLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoUmVhY3QpIHtcbiAgdmFyIGZuID0gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgdmFyIHRhZ3MgPSBbXTtcbiAgICB2YXIgbG9jYWxzX2Zvcl93aXRoID0gbG9jYWxzIHx8IHt9O1xuICAgIChmdW5jdGlvbihGYSwgYW5zd2Vyc051bWJlciwgaXNDb3JyZWN0LCBpc01hcmtlZCwgb3B0aW9ucywgc2VsZWN0LCBzZWxlY3RlZCkge1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgZm9yICg7biA8IGFuc3dlcnNOdW1iZXI7ICkge1xuICAgICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcInNlY3Rpb25cIiwge1xuICAgICAgICAgIGtleTogblxuICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KFJlYWN0LCBbIFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24tcSBvcmRlciBudW1iZXJcIlxuICAgICAgICB9IF0uY29uY2F0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0YWdzID0gW107XG4gICAgICAgICAgaXNNYXJrZWQoKSAmJiAoaXNDb3JyZWN0KG4pID8gdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIG1hcmstb24tY2hlY2sgY29ycmVjdFwiXG4gICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgICAgaWNvbjogXCJjaXJjbGUtb1wiXG4gICAgICAgICAgfSkpKSA6IHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24tcSBtYXJrLW9uLWNoZWNrIGluY29ycmVjdFwiXG4gICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgICAgaWNvbjogXCJ0aW1lc1wiXG4gICAgICAgICAgfSkpKSk7XG4gICAgICAgICAgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJudW1iZXItY2lyY2xlXCJcbiAgICAgICAgICB9LCBuICsgMSkpO1xuICAgICAgICAgIHJldHVybiB0YWdzO1xuICAgICAgICB9LmNhbGwodGhpcykpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgb3JkZXIgc2VsZWN0XCJcbiAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiLCB7XG4gICAgICAgICAgb25DaGFuZ2U6IHNlbGVjdCxcbiAgICAgICAgICBuYW1lOiBuLFxuICAgICAgICAgIGRpc2FibGVkOiBpc01hcmtlZCgpLFxuICAgICAgICAgIHZhbHVlOiBzZWxlY3RlZChuKSxcbiAgICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24tcSBvcmRlciBzZWxlY3RvclwiXG4gICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIiwge1xuICAgICAgICAgIHZhbHVlOiBcIlwiXG4gICAgICAgIH0sIFwi5pyq6YG45oqeXCIpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdGFncyA9IFtdO1xuICAgICAgICAgIHZhciAkJG9iaiA9IG9wdGlvbnM7XG4gICAgICAgICAgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mICQkb2JqLmxlbmd0aCkgZm9yICh2YXIgaW5kZXggPSAwLCAkJGwgPSAkJG9iai5sZW5ndGg7ICQkbCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgICAgICB2YXIgb3B0ID0gJCRvYmpbaW5kZXhdO1xuICAgICAgICAgICAgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIiwge1xuICAgICAgICAgICAgICB2YWx1ZTogb3B0LmlkLFxuICAgICAgICAgICAgICBrZXk6IG9wdC5pZFxuICAgICAgICAgICAgfSwgb3B0Lm1hcmtlZC5fX2h0bWwpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyICQkbCA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBpbmRleCBpbiAkJG9iaikge1xuICAgICAgICAgICAgICAkJGwrKztcbiAgICAgICAgICAgICAgdmFyIG9wdCA9ICQkb2JqW2luZGV4XTtcbiAgICAgICAgICAgICAgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIiwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBvcHQuaWQsXG4gICAgICAgICAgICAgICAga2V5OiBvcHQuaWRcbiAgICAgICAgICAgICAgfSwgb3B0Lm1hcmtlZC5fX2h0bWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRhZ3M7XG4gICAgICAgIH0uY2FsbCh0aGlzKSkpKSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICB9KS5jYWxsKHRoaXMsIFwiRmFcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguRmEgOiB0eXBlb2YgRmEgIT09IFwidW5kZWZpbmVkXCIgPyBGYSA6IHVuZGVmaW5lZCwgXCJhbnN3ZXJzTnVtYmVyXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLmFuc3dlcnNOdW1iZXIgOiB0eXBlb2YgYW5zd2Vyc051bWJlciAhPT0gXCJ1bmRlZmluZWRcIiA/IGFuc3dlcnNOdW1iZXIgOiB1bmRlZmluZWQsIFwiaXNDb3JyZWN0XCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLmlzQ29ycmVjdCA6IHR5cGVvZiBpc0NvcnJlY3QgIT09IFwidW5kZWZpbmVkXCIgPyBpc0NvcnJlY3QgOiB1bmRlZmluZWQsIFwiaXNNYXJrZWRcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguaXNNYXJrZWQgOiB0eXBlb2YgaXNNYXJrZWQgIT09IFwidW5kZWZpbmVkXCIgPyBpc01hcmtlZCA6IHVuZGVmaW5lZCwgXCJvcHRpb25zXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLm9wdGlvbnMgOiB0eXBlb2Ygb3B0aW9ucyAhPT0gXCJ1bmRlZmluZWRcIiA/IG9wdGlvbnMgOiB1bmRlZmluZWQsIFwic2VsZWN0XCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLnNlbGVjdCA6IHR5cGVvZiBzZWxlY3QgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxlY3QgOiB1bmRlZmluZWQsIFwic2VsZWN0ZWRcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguc2VsZWN0ZWQgOiB0eXBlb2Ygc2VsZWN0ZWQgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxlY3RlZCA6IHVuZGVmaW5lZCk7XG4gICAgaWYgKHRhZ3MubGVuZ3RoID09PSAxICYmICFBcnJheS5pc0FycmF5KHRhZ3NbMF0pKSB7XG4gICAgICByZXR1cm4gdGFncy5wb3AoKTtcbiAgICB9XG4gICAgdGFncy51bnNoaWZ0KFwiZGl2XCIsIG51bGwpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KFJlYWN0LCB0YWdzKTtcbiAgfTtcbiAgXG4gIGZuLmxvY2FscyA9IGZ1bmN0aW9uIHNldExvY2Fscyhsb2NhbHMpIHtcbiAgICB2YXIgcmVuZGVyID0gdGhpcztcbiAgICBmdW5jdGlvbiBuZXdSZW5kZXIoYWRkaXRpb25hbExvY2Fscykge1xuICAgICAgdmFyIG5ld0xvY2FscyA9IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIGxvY2Fscykge1xuICAgICAgICBuZXdMb2NhbHNba2V5XSA9IGxvY2Fsc1trZXldO1xuICAgICAgfVxuICAgICAgaWYgKGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgICAgICBuZXdMb2NhbHNba2V5XSA9IGFkZGl0aW9uYWxMb2NhbHNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIG5ld0xvY2Fscyk7XG4gICAgfVxuICAgIG5ld1JlbmRlci5sb2NhbHMgPSBzZXRMb2NhbHM7XG4gICAgcmV0dXJuIG5ld1JlbmRlcjtcbiAgfTs7XG4gIHJldHVybiBmbjtcbn0oUmVhY3QpKSIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uIChSZWFjdCkge1xuICB2YXIgZm4gPSBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICB2YXIgdGFncyA9IFtdO1xuICAgIHZhciBsb2NhbHNfZm9yX3dpdGggPSBsb2NhbHMgfHwge307XG4gICAgKGZ1bmN0aW9uKExvYWRpbmcsIFBhZ2luYXRvciwgVGFnU2VsZWN0b3IsIGhlYWRlciwgaW5kZXgsIHFUYWdzLCBzZWxlY3RlZFRhZ3MsIHNlbGVjdG9yT3BlbmVkLCBzaG93UXVlc3Rpb24sIHRhZ1NlbGVjdG9yU3RhdGUpIHtcbiAgICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFRhZ1NlbGVjdG9yLCB7XG4gICAgICAgIHFUYWdzOiBxVGFncyxcbiAgICAgICAgc2VsZWN0ZWRUYWdzOiBzZWxlY3RlZFRhZ3MsXG4gICAgICAgIHNlbGVjdG9yT3BlbmVkOiBzZWxlY3Rvck9wZW5lZCxcbiAgICAgICAgdGFnU2VsZWN0b3JTdGF0ZTogdGFnU2VsZWN0b3JTdGF0ZVxuICAgICAgfSkpO1xuICAgICAgaWYgKDAgPT0gaW5kZXgubGVuZ3RoKSB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChMb2FkaW5nLCB7fSkpOyBlbHNlIHtcbiAgICAgICAgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFnaW5hdG9yLCB7XG4gICAgICAgICAgaGVhZGVyOiBoZWFkZXJcbiAgICAgICAgfSkpO1xuICAgICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcInNlY3Rpb25cIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1pbmRleCBpbmRleFwiXG4gICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLWluZGV4IGxpc3RcIlxuICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIiwge30sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0YWdzID0gW107XG4gICAgICAgICAgdmFyICQkb2JqID0gaW5kZXg7XG4gICAgICAgICAgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mICQkb2JqLmxlbmd0aCkgZm9yICh2YXIgJGluZGV4ID0gMCwgJCRsID0gJCRvYmoubGVuZ3RoOyAkJGwgPiAkaW5kZXg7ICRpbmRleCsrKSB7XG4gICAgICAgICAgICB2YXIgcXVlc3Rpb24gPSAkJG9ialskaW5kZXhdO1xuICAgICAgICAgICAgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0clwiLCB7XG4gICAgICAgICAgICAgIGtleTogcXVlc3Rpb24uaWRcbiAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJpZFwiXG4gICAgICAgICAgICB9LCBxdWVzdGlvbi5pZCksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJkZXNjcmlwdGlvblwiXG4gICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICAgICAgICAgIG9uQ2xpY2s6IHNob3dRdWVzdGlvbi5iaW5kKG51bGwsIHF1ZXN0aW9uKSxcbiAgICAgICAgICAgICAgcHJvcHM6IHF1ZXN0aW9uXG4gICAgICAgICAgICB9LCBxdWVzdGlvbi5kZXNjcmlwdGlvbikpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwidGRcIiwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IFwid2F5XCJcbiAgICAgICAgICAgIH0sIHF1ZXN0aW9uLndheVRleHQpKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciAkJGwgPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgJGluZGV4IGluICQkb2JqKSB7XG4gICAgICAgICAgICAgICQkbCsrO1xuICAgICAgICAgICAgICB2YXIgcXVlc3Rpb24gPSAkJG9ialskaW5kZXhdO1xuICAgICAgICAgICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcInRyXCIsIHtcbiAgICAgICAgICAgICAgICBrZXk6IHF1ZXN0aW9uLmlkXG4gICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiLCB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImlkXCJcbiAgICAgICAgICAgICAgfSwgcXVlc3Rpb24uaWQpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwidGRcIiwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJkZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiBzaG93UXVlc3Rpb24uYmluZChudWxsLCBxdWVzdGlvbiksXG4gICAgICAgICAgICAgICAgcHJvcHM6IHF1ZXN0aW9uXG4gICAgICAgICAgICAgIH0sIHF1ZXN0aW9uLmRlc2NyaXB0aW9uKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiLCB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIndheVwiXG4gICAgICAgICAgICAgIH0sIHF1ZXN0aW9uLndheVRleHQpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0YWdzO1xuICAgICAgICB9LmNhbGwodGhpcykpKSkpO1xuICAgICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChQYWdpbmF0b3IsIHtcbiAgICAgICAgICBoZWFkZXI6IGhlYWRlclxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSkuY2FsbCh0aGlzLCBcIkxvYWRpbmdcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguTG9hZGluZyA6IHR5cGVvZiBMb2FkaW5nICE9PSBcInVuZGVmaW5lZFwiID8gTG9hZGluZyA6IHVuZGVmaW5lZCwgXCJQYWdpbmF0b3JcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguUGFnaW5hdG9yIDogdHlwZW9mIFBhZ2luYXRvciAhPT0gXCJ1bmRlZmluZWRcIiA/IFBhZ2luYXRvciA6IHVuZGVmaW5lZCwgXCJUYWdTZWxlY3RvclwiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5UYWdTZWxlY3RvciA6IHR5cGVvZiBUYWdTZWxlY3RvciAhPT0gXCJ1bmRlZmluZWRcIiA/IFRhZ1NlbGVjdG9yIDogdW5kZWZpbmVkLCBcImhlYWRlclwiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5oZWFkZXIgOiB0eXBlb2YgaGVhZGVyICE9PSBcInVuZGVmaW5lZFwiID8gaGVhZGVyIDogdW5kZWZpbmVkLCBcImluZGV4XCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLmluZGV4IDogdHlwZW9mIGluZGV4ICE9PSBcInVuZGVmaW5lZFwiID8gaW5kZXggOiB1bmRlZmluZWQsIFwicVRhZ3NcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGgucVRhZ3MgOiB0eXBlb2YgcVRhZ3MgIT09IFwidW5kZWZpbmVkXCIgPyBxVGFncyA6IHVuZGVmaW5lZCwgXCJzZWxlY3RlZFRhZ3NcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguc2VsZWN0ZWRUYWdzIDogdHlwZW9mIHNlbGVjdGVkVGFncyAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGVjdGVkVGFncyA6IHVuZGVmaW5lZCwgXCJzZWxlY3Rvck9wZW5lZFwiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5zZWxlY3Rvck9wZW5lZCA6IHR5cGVvZiBzZWxlY3Rvck9wZW5lZCAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGVjdG9yT3BlbmVkIDogdW5kZWZpbmVkLCBcInNob3dRdWVzdGlvblwiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5zaG93UXVlc3Rpb24gOiB0eXBlb2Ygc2hvd1F1ZXN0aW9uICE9PSBcInVuZGVmaW5lZFwiID8gc2hvd1F1ZXN0aW9uIDogdW5kZWZpbmVkLCBcInRhZ1NlbGVjdG9yU3RhdGVcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGgudGFnU2VsZWN0b3JTdGF0ZSA6IHR5cGVvZiB0YWdTZWxlY3RvclN0YXRlICE9PSBcInVuZGVmaW5lZFwiID8gdGFnU2VsZWN0b3JTdGF0ZSA6IHVuZGVmaW5lZCk7XG4gICAgaWYgKHRhZ3MubGVuZ3RoID09PSAxICYmICFBcnJheS5pc0FycmF5KHRhZ3NbMF0pKSB7XG4gICAgICByZXR1cm4gdGFncy5wb3AoKTtcbiAgICB9XG4gICAgdGFncy51bnNoaWZ0KFwiZGl2XCIsIG51bGwpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KFJlYWN0LCB0YWdzKTtcbiAgfTtcbiAgXG4gIGZuLmxvY2FscyA9IGZ1bmN0aW9uIHNldExvY2Fscyhsb2NhbHMpIHtcbiAgICB2YXIgcmVuZGVyID0gdGhpcztcbiAgICBmdW5jdGlvbiBuZXdSZW5kZXIoYWRkaXRpb25hbExvY2Fscykge1xuICAgICAgdmFyIG5ld0xvY2FscyA9IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIGxvY2Fscykge1xuICAgICAgICBuZXdMb2NhbHNba2V5XSA9IGxvY2Fsc1trZXldO1xuICAgICAgfVxuICAgICAgaWYgKGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgICAgICBuZXdMb2NhbHNba2V5XSA9IGFkZGl0aW9uYWxMb2NhbHNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIG5ld0xvY2Fscyk7XG4gICAgfVxuICAgIG5ld1JlbmRlci5sb2NhbHMgPSBzZXRMb2NhbHM7XG4gICAgcmV0dXJuIG5ld1JlbmRlcjtcbiAgfTs7XG4gIHJldHVybiBmbjtcbn0oUmVhY3QpKSIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uIChSZWFjdCkge1xuICB2YXIgZm4gPSBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICB2YXIgdGFncyA9IFtdO1xuICAgIHZhciBsb2NhbHNfZm9yX3dpdGggPSBsb2NhbHMgfHwge307XG4gICAgKGZ1bmN0aW9uKEZhLCBPYmplY3QsIGlzRmFsc2UsIGlzVHJ1ZSwgdG9nZ2xlKSB7XG4gICAgICBmdW5jdGlvbiBqYWRlX2pvaW5fY2xhc3Nlcyh2YWwpIHtcbiAgICAgICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHZhbCkgPyB2YWwubWFwKGphZGVfam9pbl9jbGFzc2VzKSA6IHZhbCAmJiBcIm9iamVjdFwiID09IHR5cGVvZiB2YWwgPyBPYmplY3Qua2V5cyh2YWwpLmZpbHRlcihmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICByZXR1cm4gdmFsW2tleV07XG4gICAgICAgIH0pIDogWyB2YWwgXSkuZmlsdGVyKGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgIHJldHVybiBudWxsICE9IHZhbCAmJiBcIlwiICE9PSB2YWw7XG4gICAgICAgIH0pLmpvaW4oXCIgXCIpO1xuICAgICAgfVxuICAgICAgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzZWN0aW9uXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgb3gtY29udHJvbFwiXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgb25DbGljazogdG9nZ2xlLmJpbmQobnVsbCwgMSksXG4gICAgICAgIGNsYXNzTmFtZTogamFkZV9qb2luX2NsYXNzZXMoWyBcInF1ZXN0aW9uLXFcIiwgXCJveC1idXR0b25cIiwgXCJvXCIsIGlzVHJ1ZSgpIF0pXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEZhLCB7XG4gICAgICAgIGljb246IFwiY2lyY2xlLW9cIlxuICAgICAgfSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgb25DbGljazogdG9nZ2xlLmJpbmQobnVsbCwgMCksXG4gICAgICAgIGNsYXNzTmFtZTogamFkZV9qb2luX2NsYXNzZXMoWyBcInF1ZXN0aW9uLXFcIiwgXCJveC1idXR0b25cIiwgXCJ4XCIsIGlzRmFsc2UoKSBdKVxuICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICBpY29uOiBcInRpbWVzXCJcbiAgICAgIH0pKSkpO1xuICAgIH0pLmNhbGwodGhpcywgXCJGYVwiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5GYSA6IHR5cGVvZiBGYSAhPT0gXCJ1bmRlZmluZWRcIiA/IEZhIDogdW5kZWZpbmVkLCBcIk9iamVjdFwiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5PYmplY3QgOiB0eXBlb2YgT2JqZWN0ICE9PSBcInVuZGVmaW5lZFwiID8gT2JqZWN0IDogdW5kZWZpbmVkLCBcImlzRmFsc2VcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguaXNGYWxzZSA6IHR5cGVvZiBpc0ZhbHNlICE9PSBcInVuZGVmaW5lZFwiID8gaXNGYWxzZSA6IHVuZGVmaW5lZCwgXCJpc1RydWVcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguaXNUcnVlIDogdHlwZW9mIGlzVHJ1ZSAhPT0gXCJ1bmRlZmluZWRcIiA/IGlzVHJ1ZSA6IHVuZGVmaW5lZCwgXCJ0b2dnbGVcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGgudG9nZ2xlIDogdHlwZW9mIHRvZ2dsZSAhPT0gXCJ1bmRlZmluZWRcIiA/IHRvZ2dsZSA6IHVuZGVmaW5lZCk7XG4gICAgaWYgKHRhZ3MubGVuZ3RoID09PSAxICYmICFBcnJheS5pc0FycmF5KHRhZ3NbMF0pKSB7XG4gICAgICByZXR1cm4gdGFncy5wb3AoKTtcbiAgICB9XG4gICAgdGFncy51bnNoaWZ0KFwiZGl2XCIsIG51bGwpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KFJlYWN0LCB0YWdzKTtcbiAgfTtcbiAgXG4gIGZuLmxvY2FscyA9IGZ1bmN0aW9uIHNldExvY2Fscyhsb2NhbHMpIHtcbiAgICB2YXIgcmVuZGVyID0gdGhpcztcbiAgICBmdW5jdGlvbiBuZXdSZW5kZXIoYWRkaXRpb25hbExvY2Fscykge1xuICAgICAgdmFyIG5ld0xvY2FscyA9IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIGxvY2Fscykge1xuICAgICAgICBuZXdMb2NhbHNba2V5XSA9IGxvY2Fsc1trZXldO1xuICAgICAgfVxuICAgICAgaWYgKGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgICAgICBuZXdMb2NhbHNba2V5XSA9IGFkZGl0aW9uYWxMb2NhbHNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIG5ld0xvY2Fscyk7XG4gICAgfVxuICAgIG5ld1JlbmRlci5sb2NhbHMgPSBzZXRMb2NhbHM7XG4gICAgcmV0dXJuIG5ld1JlbmRlcjtcbiAgfTs7XG4gIHJldHVybiBmbjtcbn0oUmVhY3QpKSIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uIChSZWFjdCkge1xuICB2YXIgZm4gPSBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICB2YXIgdGFncyA9IFtdO1xuICAgIHZhciBsb2NhbHNfZm9yX3dpdGggPSBsb2NhbHMgfHwge307XG4gICAgKGZ1bmN0aW9uKEZhLCBGcmVlVGV4dCwgSW5PcmRlciwgTG9hZGluZywgTXVsdGlwbGVDaG9pY2VzLCBPeCwgUXVlc3Rpb25TdGF0ZSwgU2luZ2xlQ2hvaWNlLCBhbnN3ZXJzLCBxVGFncywgcXVlc3Rpb24sIHJlc3VsdCwgc2hvd1RhZ2dlZEluZGV4LCBzb3VyY2VMaW5rLCBzdGF0ZSwgc3VibWl0KSB7XG4gICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudC5hcHBseShSZWFjdCwgWyBcInNlY3Rpb25cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24tcSBib2R5XCJcbiAgICAgIH0gXS5jb25jYXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0YWdzID0gW107XG4gICAgICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwic2VjdGlvblwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgdGV4dFwiXG4gICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMVwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgcVwiXG4gICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmEsIHtcbiAgICAgICAgICBpY29uOiBcInF1ZXN0aW9uLWNpcmNsZVwiXG4gICAgICAgIH0pLCBcIuWVj+mhjFwiKSkpO1xuICAgICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcInNlY3Rpb25cIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIHF1ZXN0aW9uLWFyZWFcIlxuICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDogcXVlc3Rpb24ubWFya2VkLFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIHEtdGV4dFwiXG4gICAgICAgIH0pKSk7XG4gICAgICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KFJlYWN0LCBbIFwic2VjdGlvblwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgYW5zd2VyXCJcbiAgICAgICAgfSBdLmNvbmNhdChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdGFncyA9IFtdO1xuICAgICAgICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiaDFcIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgYVwiXG4gICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgICAgaWNvbjogXCJleGNsYW1hdGlvbi1jaXJjbGVcIlxuICAgICAgICAgIH0pLCBxdWVzdGlvbi5wbGVhc2VUZXh0KSk7XG4gICAgICAgICAgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzZWN0aW9uXCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIGFuc3dlci1hcmVhXCJcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgXCJmcmVlX3RleHRcIiA9PSBxdWVzdGlvbi53YXkgPyB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChGcmVlVGV4dCwge1xuICAgICAgICAgICAgb3B0aW9uczogcXVlc3Rpb24ub3B0aW9ucyxcbiAgICAgICAgICAgIGFuc3dlcnM6IGFuc3dlcnMsXG4gICAgICAgICAgICByZXN1bHQ6IHJlc3VsdFxuICAgICAgICAgIH0pKSA6IFwib3hcIiA9PSBxdWVzdGlvbi53YXkgPyB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChPeCwge1xuICAgICAgICAgICAgb3B0aW9uczogcXVlc3Rpb24ub3B0aW9ucyxcbiAgICAgICAgICAgIGFuc3dlcnM6IGFuc3dlcnMsXG4gICAgICAgICAgICByZXN1bHQ6IHJlc3VsdFxuICAgICAgICAgIH0pKSA6IFwic2luZ2xlX2Nob2ljZVwiID09IHF1ZXN0aW9uLndheSA/IHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFNpbmdsZUNob2ljZSwge1xuICAgICAgICAgICAgb3B0aW9uczogcXVlc3Rpb24ub3B0aW9ucyxcbiAgICAgICAgICAgIGFuc3dlcnM6IGFuc3dlcnMsXG4gICAgICAgICAgICByZXN1bHQ6IHJlc3VsdFxuICAgICAgICAgIH0pKSA6IFwibXVsdGlwbGVfY2hvaWNlc1wiID09IHF1ZXN0aW9uLndheSA/IHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KE11bHRpcGxlQ2hvaWNlcywge1xuICAgICAgICAgICAgb3B0aW9uczogcXVlc3Rpb24ub3B0aW9ucyxcbiAgICAgICAgICAgIGFuc3dlcnM6IGFuc3dlcnMsXG4gICAgICAgICAgICByZXN1bHQ6IHJlc3VsdFxuICAgICAgICAgIH0pKSA6IFwiaW5fb3JkZXJcIiA9PSBxdWVzdGlvbi53YXkgJiYgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5PcmRlciwge1xuICAgICAgICAgICAgcXVlc3Rpb246IHF1ZXN0aW9uLFxuICAgICAgICAgICAgYW5zd2VyczogYW5zd2VycyxcbiAgICAgICAgICAgIHJlc3VsdDogcmVzdWx0XG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIHJldHVybiB0YWdzO1xuICAgICAgICB9LmNhbGwodGhpcykpKSk7XG4gICAgICAgIHN0YXRlID09IFF1ZXN0aW9uU3RhdGUuTUFSS0VEID8gdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzZWN0aW9uXCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24tcSByZXN1bHQtYXJlYVwiXG4gICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQuYXBwbHkoUmVhY3QsIFsgXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIG1hcmstYXJlYVwiXG4gICAgICAgIH0gXS5jb25jYXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRhZ3MgPSBbXTtcbiAgICAgICAgICByZXN1bHQuaXNDb3JyZWN0KCkgPyB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcImgxXCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIG1hcmsgY29ycmVjdFwiXG4gICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgICAgaWNvbjogXCJ0aHVtYnMtby11cFwiXG4gICAgICAgICAgfSksIHJlc3VsdC5yZXN1bHRUZXh0KSkgOiB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcImgxXCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIG1hcmsgaW5jb3JyZWN0XCJcbiAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEZhLCB7XG4gICAgICAgICAgICBpY29uOiBcImhhbmQtc3RvcC1vXCJcbiAgICAgICAgICB9KSwgcmVzdWx0LnJlc3VsdFRleHQpKTtcbiAgICAgICAgICByZXR1cm4gdGFncztcbiAgICAgICAgfS5jYWxsKHRoaXMpKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMVwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgY29ycmVjdC1hbnN3ZXJcIlxuICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEZhLCB7XG4gICAgICAgICAgaWNvbjogXCJncmFkdWF0aW9uLWNhcFwiXG4gICAgICAgIH0pLCBcIuato+ino+OBry4uLlwiKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHJlc3VsdC5jb3JyZWN0QW5zd2VyLFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIGFuc3dlci1hcmVhXCJcbiAgICAgICAgfSkpKSA6IHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KFJlYWN0LCBbIFwic2VjdGlvblwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgY29udHJvbFwiXG4gICAgICAgIH0gXS5jb25jYXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRhZ3MgPSBbXTtcbiAgICAgICAgICBzdGF0ZSA9PSBRdWVzdGlvblN0YXRlLkFTS0lORyA/IHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICAgIGRpc2FibGVkOiAhMCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIGJ1dHRvbiBzdWJtaXQgZGlzYWJsZWRcIlxuICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmEsIHtcbiAgICAgICAgICAgIGljb246IFwiZ3JhZHVhdGlvbi1jYXBcIlxuICAgICAgICAgIH0pLCBcIiBcIiwgcXVlc3Rpb24ucGxlYXNlVGV4dCkpIDogc3RhdGUgPT0gUXVlc3Rpb25TdGF0ZS5BU0tFRCA/IHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICAgIG9uQ2xpY2s6IHN1Ym1pdCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIGJ1dHRvbiBzdWJtaXRcIlxuICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmEsIHtcbiAgICAgICAgICAgIGljb246IFwiZ3JhZHVhdGlvbi1jYXBcIlxuICAgICAgICAgIH0pLCBcIiBcIiwgXCLmraPop6PjgpLnorroqo3jgZnjgotcIikpIDogc3RhdGUgPT0gUXVlc3Rpb25TdGF0ZS5TVUJNSVRUSU5HICYmIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICAgIGRpc2FibGVkOiAhMCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIGJ1dHRvbiBzdWJtaXQgZGlzYWJsZWRcIlxuICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmEsIHtcbiAgICAgICAgICAgIGljb246IFwic3Bpbm5lclwiLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiBcInB1bHNlXCJcbiAgICAgICAgICB9KSwgXCIgXCIsIFwi56K66KqN5LitLi4uXCIpKTtcbiAgICAgICAgICByZXR1cm4gdGFncztcbiAgICAgICAgfS5jYWxsKHRoaXMpKSkpO1xuICAgICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudC5hcHBseShSZWFjdCwgWyBcInNlY3Rpb25cIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIHRhZ2dlZC10YWctYXJlYVwiXG4gICAgICAgIH0gXS5jb25jYXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRhZ3MgPSBbXTtcbiAgICAgICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcImgxXCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIHRhZ2dlZC10YWctdGl0bGVcIlxuICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmEsIHtcbiAgICAgICAgICAgIGljb246IFwidGFnc1wiXG4gICAgICAgICAgfSksIFwi44K/44KwXCIpKTtcbiAgICAgICAgICBxVGFncyA/IHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgdGFnZ2VkLXRhZy1ib2R5XCJcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0YWdzID0gW107XG4gICAgICAgICAgICB2YXIgJCRvYmogPSBxVGFncztcbiAgICAgICAgICAgIGlmIChcIm51bWJlclwiID09IHR5cGVvZiAkJG9iai5sZW5ndGgpIGZvciAodmFyICRpbmRleCA9IDAsICQkbCA9ICQkb2JqLmxlbmd0aDsgJCRsID4gJGluZGV4OyAkaW5kZXgrKykge1xuICAgICAgICAgICAgICB2YXIgdGFnID0gJCRvYmpbJGluZGV4XTtcbiAgICAgICAgICAgICAgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7XG4gICAgICAgICAgICAgICAga2V5OiB0YWcuaWQsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgdGFnZ2VkLXRhZy10YWdcIlxuICAgICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEZhLCB7XG4gICAgICAgICAgICAgICAgaWNvbjogXCJ0YWdcIlxuICAgICAgICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHNob3dUYWdnZWRJbmRleC5iaW5kKG51bGwsIHRhZy5pZClcbiAgICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJuYW1lXCJcbiAgICAgICAgICAgICAgfSwgdGFnLmRpc3BsYXkpKSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyICQkbCA9IDA7XG4gICAgICAgICAgICAgIGZvciAodmFyICRpbmRleCBpbiAkJG9iaikge1xuICAgICAgICAgICAgICAgICQkbCsrO1xuICAgICAgICAgICAgICAgIHZhciB0YWcgPSAkJG9ialskaW5kZXhdO1xuICAgICAgICAgICAgICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge1xuICAgICAgICAgICAgICAgICAga2V5OiB0YWcuaWQsXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24tcSB0YWdnZWQtdGFnLXRhZ1wiXG4gICAgICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgICAgICAgICAgaWNvbjogXCJ0YWdcIlxuICAgICAgICAgICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrOiBzaG93VGFnZ2VkSW5kZXguYmluZChudWxsLCB0YWcuaWQpXG4gICAgICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIm5hbWVcIlxuICAgICAgICAgICAgICAgIH0sIHRhZy5kaXNwbGF5KSkpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRhZ3M7XG4gICAgICAgICAgfS5jYWxsKHRoaXMpKSkgOiB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChMb2FkaW5nLCB7fSkpO1xuICAgICAgICAgIHJldHVybiB0YWdzO1xuICAgICAgICB9LmNhbGwodGhpcykpKSk7XG4gICAgICAgIHF1ZXN0aW9uLmhhc1NvdXJjZSgpICYmIHNvdXJjZUxpbmsgJiYgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzZWN0aW9uXCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24tcSBzb3VyY2UtbGluay1hcmVhXCJcbiAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImgxXCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24tcSBzb3VyY2UtbGluay10aXRsZVwiXG4gICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmEsIHtcbiAgICAgICAgICBpY29uOiBcImxpbmtcIlxuICAgICAgICB9KSwgXCLlh7rlhbhcIiksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIHt9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEZhLCB7XG4gICAgICAgICAgaWNvbjogXCJsaW5rXCJcbiAgICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICAgICAgICBocmVmOiBzb3VyY2VMaW5rLnVybFxuICAgICAgICB9LCBzb3VyY2VMaW5rLmRpc3BsYXkpKSkpO1xuICAgICAgICByZXR1cm4gdGFncztcbiAgICAgIH0uY2FsbCh0aGlzKSkpKTtcbiAgICB9KS5jYWxsKHRoaXMsIFwiRmFcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguRmEgOiB0eXBlb2YgRmEgIT09IFwidW5kZWZpbmVkXCIgPyBGYSA6IHVuZGVmaW5lZCwgXCJGcmVlVGV4dFwiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5GcmVlVGV4dCA6IHR5cGVvZiBGcmVlVGV4dCAhPT0gXCJ1bmRlZmluZWRcIiA/IEZyZWVUZXh0IDogdW5kZWZpbmVkLCBcIkluT3JkZXJcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguSW5PcmRlciA6IHR5cGVvZiBJbk9yZGVyICE9PSBcInVuZGVmaW5lZFwiID8gSW5PcmRlciA6IHVuZGVmaW5lZCwgXCJMb2FkaW5nXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLkxvYWRpbmcgOiB0eXBlb2YgTG9hZGluZyAhPT0gXCJ1bmRlZmluZWRcIiA/IExvYWRpbmcgOiB1bmRlZmluZWQsIFwiTXVsdGlwbGVDaG9pY2VzXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLk11bHRpcGxlQ2hvaWNlcyA6IHR5cGVvZiBNdWx0aXBsZUNob2ljZXMgIT09IFwidW5kZWZpbmVkXCIgPyBNdWx0aXBsZUNob2ljZXMgOiB1bmRlZmluZWQsIFwiT3hcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguT3ggOiB0eXBlb2YgT3ggIT09IFwidW5kZWZpbmVkXCIgPyBPeCA6IHVuZGVmaW5lZCwgXCJRdWVzdGlvblN0YXRlXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLlF1ZXN0aW9uU3RhdGUgOiB0eXBlb2YgUXVlc3Rpb25TdGF0ZSAhPT0gXCJ1bmRlZmluZWRcIiA/IFF1ZXN0aW9uU3RhdGUgOiB1bmRlZmluZWQsIFwiU2luZ2xlQ2hvaWNlXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLlNpbmdsZUNob2ljZSA6IHR5cGVvZiBTaW5nbGVDaG9pY2UgIT09IFwidW5kZWZpbmVkXCIgPyBTaW5nbGVDaG9pY2UgOiB1bmRlZmluZWQsIFwiYW5zd2Vyc1wiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5hbnN3ZXJzIDogdHlwZW9mIGFuc3dlcnMgIT09IFwidW5kZWZpbmVkXCIgPyBhbnN3ZXJzIDogdW5kZWZpbmVkLCBcInFUYWdzXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLnFUYWdzIDogdHlwZW9mIHFUYWdzICE9PSBcInVuZGVmaW5lZFwiID8gcVRhZ3MgOiB1bmRlZmluZWQsIFwicXVlc3Rpb25cIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGgucXVlc3Rpb24gOiB0eXBlb2YgcXVlc3Rpb24gIT09IFwidW5kZWZpbmVkXCIgPyBxdWVzdGlvbiA6IHVuZGVmaW5lZCwgXCJyZXN1bHRcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGgucmVzdWx0IDogdHlwZW9mIHJlc3VsdCAhPT0gXCJ1bmRlZmluZWRcIiA/IHJlc3VsdCA6IHVuZGVmaW5lZCwgXCJzaG93VGFnZ2VkSW5kZXhcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguc2hvd1RhZ2dlZEluZGV4IDogdHlwZW9mIHNob3dUYWdnZWRJbmRleCAhPT0gXCJ1bmRlZmluZWRcIiA/IHNob3dUYWdnZWRJbmRleCA6IHVuZGVmaW5lZCwgXCJzb3VyY2VMaW5rXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLnNvdXJjZUxpbmsgOiB0eXBlb2Ygc291cmNlTGluayAhPT0gXCJ1bmRlZmluZWRcIiA/IHNvdXJjZUxpbmsgOiB1bmRlZmluZWQsIFwic3RhdGVcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguc3RhdGUgOiB0eXBlb2Ygc3RhdGUgIT09IFwidW5kZWZpbmVkXCIgPyBzdGF0ZSA6IHVuZGVmaW5lZCwgXCJzdWJtaXRcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguc3VibWl0IDogdHlwZW9mIHN1Ym1pdCAhPT0gXCJ1bmRlZmluZWRcIiA/IHN1Ym1pdCA6IHVuZGVmaW5lZCk7XG4gICAgaWYgKHRhZ3MubGVuZ3RoID09PSAxICYmICFBcnJheS5pc0FycmF5KHRhZ3NbMF0pKSB7XG4gICAgICByZXR1cm4gdGFncy5wb3AoKTtcbiAgICB9XG4gICAgdGFncy51bnNoaWZ0KFwiZGl2XCIsIG51bGwpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KFJlYWN0LCB0YWdzKTtcbiAgfTtcbiAgXG4gIGZuLmxvY2FscyA9IGZ1bmN0aW9uIHNldExvY2Fscyhsb2NhbHMpIHtcbiAgICB2YXIgcmVuZGVyID0gdGhpcztcbiAgICBmdW5jdGlvbiBuZXdSZW5kZXIoYWRkaXRpb25hbExvY2Fscykge1xuICAgICAgdmFyIG5ld0xvY2FscyA9IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIGxvY2Fscykge1xuICAgICAgICBuZXdMb2NhbHNba2V5XSA9IGxvY2Fsc1trZXldO1xuICAgICAgfVxuICAgICAgaWYgKGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgICAgICBuZXdMb2NhbHNba2V5XSA9IGFkZGl0aW9uYWxMb2NhbHNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIG5ld0xvY2Fscyk7XG4gICAgfVxuICAgIG5ld1JlbmRlci5sb2NhbHMgPSBzZXRMb2NhbHM7XG4gICAgcmV0dXJuIG5ld1JlbmRlcjtcbiAgfTs7XG4gIHJldHVybiBmbjtcbn0oUmVhY3QpKSIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uIChSZWFjdCkge1xuICB2YXIgZm4gPSBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICB2YXIgdGFncyA9IFtdO1xuICAgIHZhciBsb2NhbHNfZm9yX3dpdGggPSBsb2NhbHMgfHwge307XG4gICAgKGZ1bmN0aW9uKEZhLCBpc0FjdGl2ZSwgaXNDb3JyZWN0LCBpc01hcmtlZCwgb3B0aW9ucywgdG9nZ2xlKSB7XG4gICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcInVsXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgb3B0aW9uc1wiXG4gICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRhZ3MgPSBbXTtcbiAgICAgICAgdmFyICQkb2JqID0gb3B0aW9ucztcbiAgICAgICAgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mICQkb2JqLmxlbmd0aCkgZm9yICh2YXIgaW5kZXggPSAwLCAkJGwgPSAkJG9iai5sZW5ndGg7ICQkbCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgICAgdmFyIG9wdGlvbiA9ICQkb2JqW2luZGV4XTtcbiAgICAgICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHtcbiAgICAgICAgICAgIG9uQ2xpY2s6IHRvZ2dsZS5iaW5kKG51bGwsIG9wdGlvbi5pZCksXG4gICAgICAgICAgICBrZXk6IG9wdGlvbi5pZCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIG9wdGlvblwiXG4gICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudC5hcHBseShSZWFjdCwgWyBcImRpdlwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24tcSBjaGVja2VyXCJcbiAgICAgICAgICB9IF0uY29uY2F0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRhZ3MgPSBbXTtcbiAgICAgICAgICAgIGlzTWFya2VkKCkgJiYgKGlzQ29ycmVjdChvcHRpb24uaWQpID8gdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgbWFyay1vbi1jaGVjayBjb3JyZWN0XCJcbiAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmEsIHtcbiAgICAgICAgICAgICAgaWNvbjogXCJjaXJjbGUtb1wiXG4gICAgICAgICAgICB9KSkpIDogdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgbWFyay1vbi1jaGVjayBpbmNvcnJlY3RcIlxuICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgICAgICBpY29uOiBcInRpbWVzXCJcbiAgICAgICAgICAgIH0pKSkpO1xuICAgICAgICAgICAgaXNBY3RpdmUob3B0aW9uLmlkKSA/IHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIGNoZWNrIGFjdGl2ZVwiXG4gICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEZhLCB7XG4gICAgICAgICAgICAgIGljb246IFwiY2hlY2tcIixcbiAgICAgICAgICAgICAgc2NhbGU6IDJcbiAgICAgICAgICAgIH0pKSkgOiB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24tcSBjaGVja1wiXG4gICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEZhLCB7XG4gICAgICAgICAgICAgIGljb246IFwiY2hlY2tcIixcbiAgICAgICAgICAgICAgc2NhbGU6IDJcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICByZXR1cm4gdGFncztcbiAgICAgICAgICB9LmNhbGwodGhpcykpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDogb3B0aW9uLm1hcmtlZCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIGEtdGV4dFwiXG4gICAgICAgICAgfSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgJCRsID0gMDtcbiAgICAgICAgICBmb3IgKHZhciBpbmRleCBpbiAkJG9iaikge1xuICAgICAgICAgICAgJCRsKys7XG4gICAgICAgICAgICB2YXIgb3B0aW9uID0gJCRvYmpbaW5kZXhdO1xuICAgICAgICAgICAgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7XG4gICAgICAgICAgICAgIG9uQ2xpY2s6IHRvZ2dsZS5iaW5kKG51bGwsIG9wdGlvbi5pZCksXG4gICAgICAgICAgICAgIGtleTogb3B0aW9uLmlkLFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24tcSBvcHRpb25cIlxuICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudC5hcHBseShSZWFjdCwgWyBcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIGNoZWNrZXJcIlxuICAgICAgICAgICAgfSBdLmNvbmNhdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyIHRhZ3MgPSBbXTtcbiAgICAgICAgICAgICAgaXNNYXJrZWQoKSAmJiAoaXNDb3JyZWN0KG9wdGlvbi5pZCkgPyB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIG1hcmstb24tY2hlY2sgY29ycmVjdFwiXG4gICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmEsIHtcbiAgICAgICAgICAgICAgICBpY29uOiBcImNpcmNsZS1vXCJcbiAgICAgICAgICAgICAgfSkpKSA6IHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uLXEgbWFyay1vbi1jaGVjayBpbmNvcnJlY3RcIlxuICAgICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEZhLCB7XG4gICAgICAgICAgICAgICAgaWNvbjogXCJ0aW1lc1wiXG4gICAgICAgICAgICAgIH0pKSkpO1xuICAgICAgICAgICAgICBpc0FjdGl2ZShvcHRpb24uaWQpID8gdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwicXVlc3Rpb24tcSBjaGVjayBhY3RpdmVcIlxuICAgICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEZhLCB7XG4gICAgICAgICAgICAgICAgaWNvbjogXCJjaGVja1wiLFxuICAgICAgICAgICAgICAgIHNjYWxlOiAyXG4gICAgICAgICAgICAgIH0pKSkgOiB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIGNoZWNrXCJcbiAgICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgICAgICAgIGljb246IFwiY2hlY2tcIixcbiAgICAgICAgICAgICAgICBzY2FsZTogMlxuICAgICAgICAgICAgICB9KSkpO1xuICAgICAgICAgICAgICByZXR1cm4gdGFncztcbiAgICAgICAgICAgIH0uY2FsbCh0aGlzKSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IG9wdGlvbi5tYXJrZWQsXG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJxdWVzdGlvbi1xIGEtdGV4dFwiXG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFncztcbiAgICAgIH0uY2FsbCh0aGlzKSkpO1xuICAgIH0pLmNhbGwodGhpcywgXCJGYVwiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5GYSA6IHR5cGVvZiBGYSAhPT0gXCJ1bmRlZmluZWRcIiA/IEZhIDogdW5kZWZpbmVkLCBcImlzQWN0aXZlXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLmlzQWN0aXZlIDogdHlwZW9mIGlzQWN0aXZlICE9PSBcInVuZGVmaW5lZFwiID8gaXNBY3RpdmUgOiB1bmRlZmluZWQsIFwiaXNDb3JyZWN0XCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLmlzQ29ycmVjdCA6IHR5cGVvZiBpc0NvcnJlY3QgIT09IFwidW5kZWZpbmVkXCIgPyBpc0NvcnJlY3QgOiB1bmRlZmluZWQsIFwiaXNNYXJrZWRcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguaXNNYXJrZWQgOiB0eXBlb2YgaXNNYXJrZWQgIT09IFwidW5kZWZpbmVkXCIgPyBpc01hcmtlZCA6IHVuZGVmaW5lZCwgXCJvcHRpb25zXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLm9wdGlvbnMgOiB0eXBlb2Ygb3B0aW9ucyAhPT0gXCJ1bmRlZmluZWRcIiA/IG9wdGlvbnMgOiB1bmRlZmluZWQsIFwidG9nZ2xlXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLnRvZ2dsZSA6IHR5cGVvZiB0b2dnbGUgIT09IFwidW5kZWZpbmVkXCIgPyB0b2dnbGUgOiB1bmRlZmluZWQpO1xuICAgIGlmICh0YWdzLmxlbmd0aCA9PT0gMSAmJiAhQXJyYXkuaXNBcnJheSh0YWdzWzBdKSkge1xuICAgICAgcmV0dXJuIHRhZ3MucG9wKCk7XG4gICAgfVxuICAgIHRhZ3MudW5zaGlmdChcImRpdlwiLCBudWxsKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudC5hcHBseShSZWFjdCwgdGFncyk7XG4gIH07XG4gIFxuICBmbi5sb2NhbHMgPSBmdW5jdGlvbiBzZXRMb2NhbHMobG9jYWxzKSB7XG4gICAgdmFyIHJlbmRlciA9IHRoaXM7XG4gICAgZnVuY3Rpb24gbmV3UmVuZGVyKGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgIHZhciBuZXdMb2NhbHMgPSB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBsb2NhbHMpIHtcbiAgICAgICAgbmV3TG9jYWxzW2tleV0gPSBsb2NhbHNba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChhZGRpdGlvbmFsTG9jYWxzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBhZGRpdGlvbmFsTG9jYWxzKSB7XG4gICAgICAgICAgbmV3TG9jYWxzW2tleV0gPSBhZGRpdGlvbmFsTG9jYWxzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZW5kZXIuY2FsbCh0aGlzLCBuZXdMb2NhbHMpO1xuICAgIH1cbiAgICBuZXdSZW5kZXIubG9jYWxzID0gc2V0TG9jYWxzO1xuICAgIHJldHVybiBuZXdSZW5kZXI7XG4gIH07O1xuICByZXR1cm4gZm47XG59KFJlYWN0KSkiLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoUmVhY3QpIHtcbiAgdmFyIGZuID0gZnVuY3Rpb24obG9jYWxzKSB7XG4gICAgdmFyIHRhZ3MgPSBbXTtcbiAgICB2YXIgbG9jYWxzX2Zvcl93aXRoID0gbG9jYWxzIHx8IHt9O1xuICAgIChmdW5jdGlvbihGYSwgTG9hZGluZywgY2xvc2VTZWxlY3RvciwgaXNDaGVja2VkLCBpc0xvY2tlZCwgaXNPcGVuLCBvcGVuU2VsZWN0b3IsIHFUYWdzLCB0b2dnbGVUYWcpIHtcbiAgICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KFJlYWN0LCBbIFwic2VjdGlvblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJ0YWctc2VsZWN0b3IgdGFnLXNlbGVjdG9yLWJvZHlcIlxuICAgICAgfSBdLmNvbmNhdChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRhZ3MgPSBbXTtcbiAgICAgICAgaWYgKGlzT3BlbigpKSB7XG4gICAgICAgICAgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMVwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwidGFnLXNlbGVjdG9yIHN1Yi10aXRsZVwiXG4gICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgICAgaWNvbjogXCJ0YWdzXCJcbiAgICAgICAgICB9KSwgXCLjgr/jgrDjgpLpgbjmip5cIikpO1xuICAgICAgICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcInRhZy1zZWxlY3RvciB0YWctbGlzdC1ib2R5XCJcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0YWdzID0gW107XG4gICAgICAgICAgICB2YXIgJCRvYmogPSBxVGFncztcbiAgICAgICAgICAgIGlmIChcIm51bWJlclwiID09IHR5cGVvZiAkJG9iai5sZW5ndGgpIGZvciAodmFyICRpbmRleCA9IDAsICQkbCA9ICQkb2JqLmxlbmd0aDsgJCRsID4gJGluZGV4OyAkaW5kZXgrKykge1xuICAgICAgICAgICAgICB2YXIgdGFnID0gJCRvYmpbJGluZGV4XTtcbiAgICAgICAgICAgICAgdGFnLmhhc19xdWVzdGlvbigpICYmIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge1xuICAgICAgICAgICAgICAgIGtleTogdGFnLmlkLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJ0YWctc2VsZWN0b3IgdGFnLWxpc3QtdGFnXCJcbiAgICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIHt9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICAgICAgICBjaGVja2VkOiBpc0NoZWNrZWQodGFnLmlkKSxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZTogdG9nZ2xlVGFnLmJpbmQobnVsbCwgdGFnLmlkKSxcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogaXNMb2NrZWQoKVxuICAgICAgICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJuYW1lXCJcbiAgICAgICAgICAgICAgfSwgdGFnLmRpc3BsYXkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImNvdW50XCJcbiAgICAgICAgICAgICAgfSwgdGFnLmNvdW50VGV4dCkpKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgJCRsID0gMDtcbiAgICAgICAgICAgICAgZm9yICh2YXIgJGluZGV4IGluICQkb2JqKSB7XG4gICAgICAgICAgICAgICAgJCRsKys7XG4gICAgICAgICAgICAgICAgdmFyIHRhZyA9ICQkb2JqWyRpbmRleF07XG4gICAgICAgICAgICAgICAgdGFnLmhhc19xdWVzdGlvbigpICYmIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge1xuICAgICAgICAgICAgICAgICAga2V5OiB0YWcuaWQsXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwidGFnLXNlbGVjdG9yIHRhZy1saXN0LXRhZ1wiXG4gICAgICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIHt9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgICAgICAgICAgICAgICAgY2hlY2tlZDogaXNDaGVja2VkKHRhZy5pZCksXG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdG9nZ2xlVGFnLmJpbmQobnVsbCwgdGFnLmlkKSxcbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBpc0xvY2tlZCgpXG4gICAgICAgICAgICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJuYW1lXCJcbiAgICAgICAgICAgICAgICB9LCB0YWcuZGlzcGxheSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJjb3VudFwiXG4gICAgICAgICAgICAgICAgfSwgdGFnLmNvdW50VGV4dCkpKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0YWdzO1xuICAgICAgICAgIH0uY2FsbCh0aGlzKSkpO1xuICAgICAgICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICAgIG9uQ2xpY2s6IGNsb3NlU2VsZWN0b3IsXG4gICAgICAgICAgICBjbGFzc05hbWU6IFwidGFnLXNlbGVjdG9yIHRhZy1zZWxlY3Rvci1vcG5lclwiXG4gICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgICAgaWNvbjogXCJjaGV2cm9uLXVwXCJcbiAgICAgICAgICB9KSwgXCLplonjgZjjgotcIikpO1xuICAgICAgICAgIGlzTG9ja2VkKCkgJiYgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZywge30pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YWdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcImgxXCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJ0YWctc2VsZWN0b3Igc3ViLXRpdGxlXCJcbiAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEZhLCB7XG4gICAgICAgICAgICBpY29uOiBcInRhZ3NcIlxuICAgICAgICAgIH0pLCBcIumBuOaKnuS4reOBruOCv+OCsFwiKSk7XG4gICAgICAgICAgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwidGFnLXNlbGVjdG9yIHRhZy1saXN0LWJvZHlcIlxuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRhZ3MgPSBbXTtcbiAgICAgICAgICAgIHZhciAkJG9iaiA9IHFUYWdzO1xuICAgICAgICAgICAgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mICQkb2JqLmxlbmd0aCkgZm9yICh2YXIgJGluZGV4ID0gMCwgJCRsID0gJCRvYmoubGVuZ3RoOyAkJGwgPiAkaW5kZXg7ICRpbmRleCsrKSB7XG4gICAgICAgICAgICAgIHZhciB0YWcgPSAkJG9ialskaW5kZXhdO1xuICAgICAgICAgICAgICB0YWcuaGFzX3F1ZXN0aW9uKCkgJiYgaXNDaGVja2VkKHRhZy5pZCkgJiYgdGFncy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7XG4gICAgICAgICAgICAgICAga2V5OiB0YWcuaWQsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInRhZy1zZWxlY3RvciB0YWctbGlzdC10YWdcIlxuICAgICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEZhLCB7XG4gICAgICAgICAgICAgICAgaWNvbjogXCJ0YWdcIlxuICAgICAgICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJuYW1lXCJcbiAgICAgICAgICAgICAgfSwgdGFnLmRpc3BsYXkpKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgJCRsID0gMDtcbiAgICAgICAgICAgICAgZm9yICh2YXIgJGluZGV4IGluICQkb2JqKSB7XG4gICAgICAgICAgICAgICAgJCRsKys7XG4gICAgICAgICAgICAgICAgdmFyIHRhZyA9ICQkb2JqWyRpbmRleF07XG4gICAgICAgICAgICAgICAgdGFnLmhhc19xdWVzdGlvbigpICYmIGlzQ2hlY2tlZCh0YWcuaWQpICYmIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge1xuICAgICAgICAgICAgICAgICAga2V5OiB0YWcuaWQsXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwidGFnLXNlbGVjdG9yIHRhZy1saXN0LXRhZ1wiXG4gICAgICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGYSwge1xuICAgICAgICAgICAgICAgICAgaWNvbjogXCJ0YWdcIlxuICAgICAgICAgICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwibmFtZVwiXG4gICAgICAgICAgICAgICAgfSwgdGFnLmRpc3BsYXkpKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0YWdzO1xuICAgICAgICAgIH0uY2FsbCh0aGlzKSkpO1xuICAgICAgICAgIHRhZ3MucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgICAgIG9uQ2xpY2s6IG9wZW5TZWxlY3RvcixcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJ0YWctc2VsZWN0b3IgdGFnLXNlbGVjdG9yLW9wbmVyXCJcbiAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEZhLCB7XG4gICAgICAgICAgICBpY29uOiBcImNoZXZyb24tZG93blwiXG4gICAgICAgICAgfSksIFwi44K/44Kw44KS57eo6ZuG44GZ44KLXCIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFncztcbiAgICAgIH0uY2FsbCh0aGlzKSkpKTtcbiAgICB9KS5jYWxsKHRoaXMsIFwiRmFcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGguRmEgOiB0eXBlb2YgRmEgIT09IFwidW5kZWZpbmVkXCIgPyBGYSA6IHVuZGVmaW5lZCwgXCJMb2FkaW5nXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLkxvYWRpbmcgOiB0eXBlb2YgTG9hZGluZyAhPT0gXCJ1bmRlZmluZWRcIiA/IExvYWRpbmcgOiB1bmRlZmluZWQsIFwiY2xvc2VTZWxlY3RvclwiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5jbG9zZVNlbGVjdG9yIDogdHlwZW9mIGNsb3NlU2VsZWN0b3IgIT09IFwidW5kZWZpbmVkXCIgPyBjbG9zZVNlbGVjdG9yIDogdW5kZWZpbmVkLCBcImlzQ2hlY2tlZFwiIGluIGxvY2Fsc19mb3Jfd2l0aCA/IGxvY2Fsc19mb3Jfd2l0aC5pc0NoZWNrZWQgOiB0eXBlb2YgaXNDaGVja2VkICE9PSBcInVuZGVmaW5lZFwiID8gaXNDaGVja2VkIDogdW5kZWZpbmVkLCBcImlzTG9ja2VkXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLmlzTG9ja2VkIDogdHlwZW9mIGlzTG9ja2VkICE9PSBcInVuZGVmaW5lZFwiID8gaXNMb2NrZWQgOiB1bmRlZmluZWQsIFwiaXNPcGVuXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLmlzT3BlbiA6IHR5cGVvZiBpc09wZW4gIT09IFwidW5kZWZpbmVkXCIgPyBpc09wZW4gOiB1bmRlZmluZWQsIFwib3BlblNlbGVjdG9yXCIgaW4gbG9jYWxzX2Zvcl93aXRoID8gbG9jYWxzX2Zvcl93aXRoLm9wZW5TZWxlY3RvciA6IHR5cGVvZiBvcGVuU2VsZWN0b3IgIT09IFwidW5kZWZpbmVkXCIgPyBvcGVuU2VsZWN0b3IgOiB1bmRlZmluZWQsIFwicVRhZ3NcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGgucVRhZ3MgOiB0eXBlb2YgcVRhZ3MgIT09IFwidW5kZWZpbmVkXCIgPyBxVGFncyA6IHVuZGVmaW5lZCwgXCJ0b2dnbGVUYWdcIiBpbiBsb2NhbHNfZm9yX3dpdGggPyBsb2NhbHNfZm9yX3dpdGgudG9nZ2xlVGFnIDogdHlwZW9mIHRvZ2dsZVRhZyAhPT0gXCJ1bmRlZmluZWRcIiA/IHRvZ2dsZVRhZyA6IHVuZGVmaW5lZCk7XG4gICAgaWYgKHRhZ3MubGVuZ3RoID09PSAxICYmICFBcnJheS5pc0FycmF5KHRhZ3NbMF0pKSB7XG4gICAgICByZXR1cm4gdGFncy5wb3AoKTtcbiAgICB9XG4gICAgdGFncy51bnNoaWZ0KFwiZGl2XCIsIG51bGwpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KFJlYWN0LCB0YWdzKTtcbiAgfTtcbiAgXG4gIGZuLmxvY2FscyA9IGZ1bmN0aW9uIHNldExvY2Fscyhsb2NhbHMpIHtcbiAgICB2YXIgcmVuZGVyID0gdGhpcztcbiAgICBmdW5jdGlvbiBuZXdSZW5kZXIoYWRkaXRpb25hbExvY2Fscykge1xuICAgICAgdmFyIG5ld0xvY2FscyA9IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIGxvY2Fscykge1xuICAgICAgICBuZXdMb2NhbHNba2V5XSA9IGxvY2Fsc1trZXldO1xuICAgICAgfVxuICAgICAgaWYgKGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGFkZGl0aW9uYWxMb2NhbHMpIHtcbiAgICAgICAgICBuZXdMb2NhbHNba2V5XSA9IGFkZGl0aW9uYWxMb2NhbHNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIG5ld0xvY2Fscyk7XG4gICAgfVxuICAgIG5ld1JlbmRlci5sb2NhbHMgPSBzZXRMb2NhbHM7XG4gICAgcmV0dXJuIG5ld1JlbmRlcjtcbiAgfTs7XG4gIHJldHVybiBmbjtcbn0oUmVhY3QpKSIsIm1vZHVsZS5leHBvcnRzID0gTGFuZyA9XG4gIHBvcnRhbDogXCJRUUHjg53jg7zjgr/jg6tcIlxuIiwiI1xuIyBhcGnjgqLjgq/jgrvjgrnmlrnms5XjgpLntbHkuIDjgZnjgovjgrXjg7zjg5Pjgrnjgq/jg6njgrlcbiMg5LiA5bqm44Ki44Kv44K744K544GX44GfYXBp44Gu44OH44O844K/44Gv5L+d5oyB44GZ44KL77yIR0VU44Gu44G/77yJXG4jXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEFwaVN0cmlrZXJcbiAgQF9zdHJ1Y2sgPSB7fVxuXG4gIEBzdHJpa2UgPSAobGlua2VyLCBmb3JjZVJlbG9hZCktPlxuICAgIGlmICFmb3JjZVJlbG9hZCAmJiBsaW5rZXIuaXNHZXQgJiYgQF9zdHJ1Y2tbbGlua2VyLnBhcmFtc1VyaV1cbiAgICAgICMgUHJvbWlzZeOCkuacn+W+heOBleOCjOOCi+OBruOBp+epuuOBhuOBoeOBmeOCi+OAglxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT5cbiAgICAgICAgcmVzb2x2ZShAX3N0cnVja1tsaW5rZXIucGFyYW1zVXJpXSlcbiAgICAgIClcblxuICAgICQuYWpheChcbiAgICAgIHVybDogJy9hcGknICsgbGlua2VyLnVyaVxuICAgICAgdHlwZTogbGlua2VyLm1ldGhvZFxuICAgICAgZGF0YVR5cGU6ICdqc29uJ1xuICAgICAgZGF0YTogbGlua2VyLnBhcmFtc1xuICAgIClcbiAgICAudGhlbiAoZGF0YSwgX18sIHhocik9PlxuICAgICAgIyDjg4fjg7zjgr/kv53mjIHli5XkvZxcbiAgICAgIGhlYWRlciA9IEBwaWNrSGVhZGVyUGFyYW1ldGVycyh4aHIpXG4gICAgICBpZiBsaW5rZXIuaXNHZXRcbiAgICAgICAgQF9zdHJ1Y2tbbGlua2VyLnBhcmFtc1VyaV0gPVxuICAgICAgICAgIGJvZHk6IGRhdGFcbiAgICAgICAgICBoZWFkZXI6IGhlYWRlclxuICAgICAgJC5EZWZlcnJlZCgpLnJlc29sdmUoXG4gICAgICAgIGJvZHk6IGRhdGFcbiAgICAgICAgaGVhZGVyOiBoZWFkZXJcbiAgICAgIClcblxuICBAcGlja0hlYWRlclBhcmFtZXRlcnM6ICh4aHIpLT5cbiAgICBoZWFkZXIgPSB7fVxuICAgIHJlcXVpcmVkID0gW1xuICAgICAgJ1RvdGFsLVBhZ2VzJ1xuICAgICAgJ1Blci1QYWdlJ1xuICAgICAgJ0N1cnJlbnQtUGFnZSdcbiAgICBdXG4gICAgbmFtZXMgPSBbXG4gICAgICAndG90YWwnXG4gICAgICAncGVyJ1xuICAgICAgJ3BhZ2UnXG4gICAgXVxuICAgIF8uZWFjaChyZXF1aXJlZCwgKHZhbHVlLCBpbmRleCk9PlxuICAgICAgaGVhZGVyW25hbWVzW2luZGV4XV0gPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIodmFsdWUpXG4gICAgKVxuXG4gICAgaGVhZGVyXG4iLCIjXG4jIOODq+ODvOOCv+ODvOOBi+OCieOBrui/lOOCiuWApOOCkue1seS4gOOBmeOCi+OBn+OCgeOBruODouODh+ODq+OAglxuIyDjgZ3jga7jgb7jgb5wdXNoQ29udGV4dOOBp+OBjeOCi+OAglxuI1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBDYXNzZXR0ZVxuICBAcm9vdCA9IG51bGxcbiAgY29uc3RydWN0b3I6IChAY29tcG9uZW50LCBAcHJvcHMpLT5cblxuICBmb3JQdXNoZXI6IC0+XG4gICAgW0Bjb21wb25lbnQsIF8ubWVyZ2UoQHByb3BzLCByb290OiBDYXNzZXR0ZS5yb290KV0iLCJtb2R1bGUuZXhwb3J0cyA9IE1vZGVscyA9IHt9XG5Nb2RlbHMuQXBpU3RyaWtlciA9IHJlcXVpcmUgJy4vYXBpLXN0cmlrZXInXG5Nb2RlbHMuQ2Fzc2V0dGUgPSByZXF1aXJlICcuL2Nhc3NldHRlJ1xuTW9kZWxzLkxpbmtlciA9IHJlcXVpcmUgJy4vbGlua2VyJ1xuTW9kZWxzLk1hcmsgPSByZXF1aXJlICcuL21hcmsnXG5Nb2RlbHMuTm90aWNlID0gcmVxdWlyZSAnLi9ub3RpY2UnXG5Nb2RlbHMuUGFnZUxpbmsgPSByZXF1aXJlICcuL3BhZ2UtbGluaydcbk1vZGVscy5RdWVzdGlvblN0YXRlID0gcmVxdWlyZSAnLi9xdWVzdGlvbi1zdGF0ZSdcbk1vZGVscy5RdWVzdGlvbiA9IHJlcXVpcmUgJy4vcXVlc3Rpb24nXG5Nb2RlbHMuUm91dGVyID0gcmVxdWlyZSAnLi9yb3V0ZXInXG5Nb2RlbHMuU291cmNlTGluayA9IHJlcXVpcmUgJy4vc291cmNlTGluaydcbk1vZGVscy5UYWdTZWxlY3RvclN0YXRlID0gcmVxdWlyZSAnLi90YWctc2VsZWN0b3Itc3RhdGUnXG5Nb2RlbHMuVGFnID0gcmVxdWlyZSAnLi90YWcnXG4jIEdlbmVyYXRlZCBieSBJbmRleENvZmZlZUdlbmVyYXRvciIsIiNcbiMgc2NlbmU6cmVwbGFjZeOCkmRpc3BhdGNo44GZ44KL44Go44GN44Gr5LiA57eS44Gr5rih44GZ44Oi44OH44OrXG4jXG4jID0gQXR0cmlidXRlc1xuI1xuIyAtIGtleSBhcGlTdHJpa2XjgadnZXTjgqLjgq/jgrvjgrnjga7jg4fjg7zjgr/kv53mjIHnlKjjgavkvb/jgYbjgIJcbiNcbiMgPSBFeGFtcGxlXG4jXG4jICAgQXBwLkxpbmtlci5wb3N0KCcvdXNlci9uZXcnLCB7bmFtZTogJ21tbXBhJywgam9iOiAnbm9uZSd9KVxuI1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBMaW5rZXJcbiAgY29uc3RydWN0b3I6IChAbWV0aG9kLCBAdXJpLCBAcGFyYW1zKS0+XG4gICAgQF9yZXBsYWNlUGxhY2Vob2xkZXIoKVxuICAgIEBrZXkgPSBAdXJpICsgJzo6JyArIChmb3Iga2V5LCB2YWx1ZSBvZiBAcGFyYW1zXG4gICAgICAgIFwiI3trZXl9OiN7dmFsdWV9XCJcbiAgICAgICkuam9pbignOjonKVxuICAgIEBwYXJhbXNVcmkgPSBpZiBAaXNHZXQgJiYgQHBhcmFtc1xuICAgICAgQHVyaSArICc/JyArIChmb3Iga2V5LCB2YWx1ZSBvZiBAcGFyYW1zXG4gICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpXG4gICAgICApLmpvaW4oJyYnKVxuICAgIGVsc2VcbiAgICAgIEB1cmlcblxuICBfcmVwbGFjZVBsYWNlaG9sZGVyOiAtPlxuICAgIHdoaWxlIEB1cmkubWF0Y2goLyg6KFswLTlfYS16XSspKS8pXG4gICAgICBAdXJpID0gQHVyaS5yZXBsYWNlKFJlZ0V4cC4kMSwgQHBhcmFtc1tSZWdFeHAuJDJdIHx8ICcnKVxuICAgICAgZGVsZXRlIEBwYXJhbXNbUmVnRXhwLiQyXVxuXG4gIGlzR2V0OiAtPlxuICAgIEBtZXRob2QgPT0gJ2dldCdcblxuICBAZGVsZXRlID0gKHVyaSwgcGFyYW1zKS0+XG4gICAgbmV3IEAoJ2RlbGV0ZScsIHVyaSwgcGFyYW1zKVxuXG4gIEBnZXQgPSAodXJpLCBwYXJhbXMpLT5cbiAgICBuZXcgQCgnZ2V0JywgdXJpLCBwYXJhbXMpXG5cbiAgQHBhdGNoID0gKHVyaSwgcGFyYW1zKS0+XG4gICAgbmV3IEAoJ3BhdGNoJywgdXJpLCBwYXJhbXMpXG5cbiAgQHBvc3QgPSAodXJpLCBwYXJhbXMpLT5cbiAgICBuZXcgQCgncG9zdCcsIHVyaSwgcGFyYW1zKVxuXG4gIEBwdXQgPSAodXJpLCBwYXJhbXMpLT5cbiAgICBuZXcgQCgncHV0JywgdXJpLCBwYXJhbXMpXG5cblxuIiwiI1xuIyDmraPop6Pnorroqo3nlKjjga5tYXJrcyBBUEnjga7ntZDmnpzjgpLmlbTlvaLjgZnjgovjg6Ljg4fjg6tcbiNcbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgTWFya1xuICBjb25zdHJ1Y3RvcjogKEBtYXJrLCBAb3B0aW9ucyktPlxuICAgIEByZXN1bHRUZXh0ID0gTWFyay5kZXRlY3RSZXN1bHRUZXh0KEApXG4gICAgQGFuc3dlcnMgPSBNYXJrLmFycmFsaXplKEBtYXJrLmNvcnJlY3RfYW5zd2VyKVxuXG4gICAgQGNvcnJlY3RBbnN3ZXIgPSB7XG4gICAgICBfX2h0bWw6IGlmIEBvcHRpb25zLmxlbmd0aFxuICAgICAgICBfLm1hcChAYW5zd2VycywgKGlkKT0+XG4gICAgICAgICAgXy5maW5kKEBvcHRpb25zLCAob3B0aW9uKT0+XG4gICAgICAgICAgICBvcHRpb24uaWQgPT0gaWRcbiAgICAgICAgICApLm1hcmtlZC5fX2h0bWxcbiAgICAgICAgKS5qb2luKCdcXG5cXG4nKVxuICAgICAgZWxzZVxuICAgICAgICBAbWFyay5jb3JyZWN0X2Fuc3dlclxuICAgIH1cblxuICBpc0NvcnJlY3Q6IC0+XG4gICAgQG1hcmsubWFya1xuXG4gIEBhcnJhbGl6ZSA9ICh2YWx1ZSktPlxuICAgIGlmIF8uaXNBcnJheSh2YWx1ZSlcbiAgICAgIHZhbHVlXG4gICAgZWxzZVxuICAgICAgW3ZhbHVlXVxuXG4gIEBkZXRlY3RSZXN1bHRUZXh0ID0gKG1hcmspLT5cbiAgICBpZiBtYXJrLmlzQ29ycmVjdCgpXG4gICAgICAn5q2j6KejISEnXG4gICAgZWxzZVxuICAgICAgJ+S4jeato+inoydcblxuIiwiI1xuIyBOb3RpZmllcuOBq+a4oeOBmeODh+ODvOOCv+ODouODh+ODq1xuI1xuIyA9IEV4YW1wbGVcbiNcbiMgICBBcHAuTm90aWNlLmRhbmdlcignQ2Fubm90IFVuZG8hJywgJ0FyZSB5b3UgT0s/JylcbiNcbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgTm90aWNlXG4gIGNvbnN0cnVjdG9yOiAoQHR5cGUsIEB0aXRsZSwgQG1lc3NhZ2UpLT5cblxuICBAZGFuZ2VyID0gQHJlZCA9ICh0aXRsZSwgbWVzc2FnZSktPlxuICAgIG5ldyBAKCdkYW5nZXInLCB0aXRsZSwgbWVzc2FnZSlcblxuICBAc3VjY2VzcyA9IEBncmVlbiA9ICh0aXRsZSwgbWVzc2FnZSktPlxuICAgIG5ldyBAKCdzdWNjZXNzJywgdGl0bGUsIG1lc3NhZ2UpXG5cbiAgQGluZm9ybWF0aW9uID0gQHllbGxvdyA9ICh0aXRsZSwgbWVzc2FnZSktPlxuICAgIG5ldyBAKCdpbmZvJywgdGl0bGUsIG1lc3NhZ2UpXG5cbiAgQHByaW1hcnkgPSBAYmx1ZSA9ICh0aXRsZSwgbWVzc2FnZSktPlxuICAgIG5ldyBAKCdwcmltYXJ5JywgdGl0bGUsIG1lc3NhZ2UpIiwibW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBQYWdlTGlua1xuIiwiI1xuIyBRLlF1ZXN0aW9uQ29udGV4dOOBruOCueODhuODvOODiOOCkue1seS4gOOBmeOCi1xuI1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBRdWVzdGlvblN0YXRlXG4gICMg5ZWP6aGM6KGo56S655So44GrYXBp44KS5Y+p44GE44Gm44GE44KLXG4gIEBMT0FESU5HID0gJ2xvYWRpbmcnXG5cbiAgIyDllY/poYzjgYzooajnpLrjgZXjgozjgIHkvZXjgoLpgbjmip7jgZXjgozjgabjgYTjgarjgYRcbiAgQEFTS0lORyA9ICdhc2tpbmcnXG5cbiAgIyDjgarjgpPjgonjgYvjga7lm57nrZTjgYzjgarjgZXjgozjgIHpgIHkv6HjgafjgY3jgotcbiAgQEFTS0VEID0gJ2Fza2VkJ1xuXG4gICMg6YCB5L+h55So44GuYXBp44KS5Y+p44GE44Gm44GE44KLXG4gIEBTVUJNSVRUSU5HID0gJ3N1Ym1pdHRpbmcnXG5cbiAgIyDntZDmnpzjgYzluLDjgaPjgabjgY3jgZ9cbiAgQE1BUktFRCA9ICdtYXJrZWQnXG5cbiIsIiNcbiMg5Ye66aGM55SoQVBJ44GucXVlc3Rpb27jgpLmlbTlvaLjgZnjgovjg6Ljg4fjg6tcbiNcbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgUXVlc3Rpb25cbiAgY29uc3RydWN0b3I6IChvYmopLT5cbiAgICBAaWQgPSBvYmouaWRcbiAgICBAd2F5ID0gb2JqLndheSB8fCAnJ1xuICAgIEB0ZXh0ID0gb2JqLnRleHQgfHwgJydcbiAgICBAb3B0aW9ucyA9IChfLm1hcChvYmoub3B0aW9ucyB8fCBbXSwgKG9wdGlvbikgPT5cbiAgICAgIGlkOiBvcHRpb24uaWRcbiAgICAgIG1hcmtlZDogaWYgQGlzSW5PcmRlcigpXG4gICAgICAgIHsgX19odG1sOiBRdWVzdGlvbi50cmltKG1hcmtlZChvcHRpb24udGV4dCkpIH1cbiAgICAgIGVsc2VcbiAgICAgICAgeyBfX2h0bWw6IG1hcmtlZChvcHRpb24udGV4dCkgfVxuICAgICkpXG5cbiAgICBAYW5zd2Vyc051bWJlciA9IG9iai5hbnN3ZXJzX251bWJlciB8fCAtMVxuICAgIEBzb3VyY2VMaW5rSWQgPSBvYmouc291cmNlX2xpbmtfaWRcbiAgICBAbWFya2VkID0geyBfX2h0bWw6IG1hcmtlZChAdGV4dCkgfVxuICAgIEBkZXNjcmlwdGlvbiA9IFF1ZXN0aW9uLnRyaW0oQG1hcmtlZC5fX2h0bWwpLnNsaWNlKDAsIDQwKVxuICAgIEB3YXlUZXh0ID0gUXVlc3Rpb24uZGV0ZWN0V2F5VGV4dChAKVxuICAgIEBwbGVhc2VUZXh0ID0gUXVlc3Rpb24uZGV0ZWN0UGxlYXNlVGV4dChAKVxuXG4gIGhhc1NvdXJjZTogLT5cbiAgICBAc291cmNlTGlua0lkICE9IG51bGwgJiYgQHNvdXJjZUxpbmtJZCAhPSB1bmRlZmluZWRcblxuICBpc1NpbmdsZUNob2ljZTogLT5cbiAgICBAd2F5ID09ICdzaW5nbGVfY2hvaWNlJ1xuXG4gIGlzTXVsdGlwbGVDaG9pY2VzOiAtPlxuICAgIEB3YXkgPT0gJ211bHRpcGxlX2Nob2ljZXMnXG5cbiAgaXNGcmVlVGV4dDogLT5cbiAgICBAd2F5ID09ICdmcmVlX3RleHQnXG5cbiAgaXNJbk9yZGVyOiAtPlxuICAgIEB3YXkgPT0gJ2luX29yZGVyJ1xuXG4gIGlzT3g6IC0+XG4gICAgQHdheSA9PSAnb3gnXG5cbiAgQHRyaW0gPSAoaHRtbCktPlxuICAgIGh0bWwucmVwbGFjZSgvPC4qPz4vaWdtLCAnJylcblxuICBAZGV0ZWN0UGxlYXNlVGV4dCA9IChxKS0+XG4gICAgc3dpdGNoXG4gICAgICB3aGVuIHEuaXNTaW5nbGVDaG9pY2UoKVxuICAgICAgICAn44Gy44Go44Gk6YG444KT44Gn44GP44Gg44GV44GEJ1xuICAgICAgd2hlbiBxLmlzTXVsdGlwbGVDaG9pY2VzKClcbiAgICAgICAgJ+mBqeWIh+OBquOCguOBruOCkuOBmeOBueOBpumBuOOCk+OBp+OBj+OBoOOBleOBhCdcbiAgICAgIHdoZW4gcS5pc0ZyZWVUZXh0KClcbiAgICAgICAgJ+etlOOBiOOCkuWFpeWKm+OBl+OBpuOBj+OBoOOBleOBhCdcbiAgICAgIHdoZW4gcS5pc0luT3JkZXIoKVxuICAgICAgICAn44Gd44KM44Ge44KM44Gr5a++5b+c44GZ44KL44KC44Gu44KS6YG444KT44Gn44GP44Gg44GV44GEJ1xuICAgICAgd2hlbiBxLmlzT3goKVxuICAgICAgICAn44GE44Ga44KM44GL44KS6YG444KT44Gn44GP44Gg44GV44GEJ1xuICAgICAgZWxzZVxuICAgICAgICAnJ1xuXG4gIEBkZXRlY3RXYXlUZXh0ID0gKHEpLT5cbiAgICBzd2l0Y2hcbiAgICAgIHdoZW4gcS5pc1NpbmdsZUNob2ljZSgpXG4gICAgICAgICfkuIDjgaTjgaDjgZHpgbjmip4nXG4gICAgICB3aGVuIHEuaXNNdWx0aXBsZUNob2ljZXMoKVxuICAgICAgICAn6KSH5pWw6YG45oqeJ1xuICAgICAgd2hlbiBxLmlzRnJlZVRleHQoKVxuICAgICAgICAn44OG44Kt44K544OI5YWl5YqbJ1xuICAgICAgd2hlbiBxLmlzSW5PcmRlcigpXG4gICAgICAgICfpoIbjgavkuKbjgbnjgosnXG4gICAgICB3aGVuIHEuaXNPeCgpXG4gICAgICAgICdveOWVj+mhjCdcbiAgICAgIGVsc2VcbiAgICAgICAgJydcbiIsIiNcbiMgVVJM44Go6Zai5pWw44KS44K744OD44OI44Gn55m76Yyy44GZ44KL44CCXG4jIOeZu+mMsua4iOOBv+OBrlVSTOOBp+i1t+WLleOBmeOCi+OBqOOAgemWouaVsOOBjOWRvOOBs+WHuuOBleOCjOOCi+OAguW8leaVsOOBr3BsYWNlaG9sZGVy44Gu5aSJ5pWw44CCXG4jXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFJvdXRlclxuICBjb25zdHJ1Y3RvcjogKCktPlxuICAgIEBfbWFwID0ge31cbiAgICBAX21hcHBlZCA9IHt9XG4gICAgQF9ub3JtYWxpemVkID0ge31cblxuICAjXG4gICMgVVJM44Go6Zai5pWw44Gu44K744OD44OI44KS55m76Yyy44GZ44KLXG4gICNcbiAgIyA9IE9wdGlvbnNcbiAgI1xuICAjIC0gdXJsIFVSTFxuICAjIC0gYXBwIOmWouaVsOOAguW8leaVsOOBq+OBr3BsYWNlaG9sZGVy44GL44KJ5b6X44KJ44KM44Gf5aSJ5pWw44GM5YWl44KL44CCXG4gICNcbiAgIyA9IEV4YW1wbGVzXG4gICNcbiAgIyAgIHJvdXRlci5leGVjdXRlKCcvdXNlcicpICAgIyA9PiAnaW5kZXgnXG4gICMgICByb3V0ZXIuZXhlY3V0ZSgnL3VzZXIvMScpICMgPT4gJ3VzZXIgMSdcbiAgI1xuICBhZGQ6ICh1cmwsIGFwcCktPlxuICAgIHJldHVybiBmYWxzZSBpZiBAX2ZpbmQodXJsKVxuXG4gICAgbm9ybWFsaXplZCA9IEBfbm9ybWFsaXplKHVybClcblxuICAgIG5vdyA9IEBfbWFwXG4gICAgZm9yIGksIG5hbWUgb2Ygbm9ybWFsaXplZFswXS5zcGxpdCgnLycpXG4gICAgICBjb250aW51ZSBpZiBuYW1lID09ICcnXG4gICAgICBub3dbbmFtZV0gPz0gIHt9XG4gICAgICBub3cgPSBub3dbbmFtZV1cbiAgICBub3cuX2FwcCA9IGFwcFxuICAgIG5vdy5fcGFyYW1ldGVycyA9IG5vcm1hbGl6ZWRbMV0uc3BsaXQoJzonKVxuXG4gICAgQF9tYXBwZWRbbm9ybWFsaXplZFswXV0gPSB0cnVlXG5cbiAgI1xuICAjIFVSTOOBp+ODq+ODvOODiOOCkuWRvOOBs+WHuuOBmVxuICAjXG4gICMgPSBPcHRpb25zXG4gICNcbiAgIyAtIHVybCBVUkxcbiAgI1xuICAjID0gRXhhbXBsZXNcbiAgI1xuICAjICAgcm91dGVyLmFkZCgnL3VzZXInLCAoKS0+ICdpbmRleCcpXG4gICMgICByb3V0ZXIuYWRkKCcvdXNlci86aWQnLCAocGFyYW1zKS0+IFwiaWQgI3twYXJhbXMuaWR9XCIpXG4gICNcbiAgZXhlY3V0ZTogKHVybCkgLT5cbiAgICBzdG9yZSA9IFtdXG5cbiAgICAjIG1hcOOCkuaOmOOBo+OBpuOBhOOBj1xuICAgIG5vdyA9IEBfbWFwXG4gICAgZm9yIGksIG5hbWUgb2YgQF9zdHJpcCh1cmwpLnNwbGl0KCcvJylcbiAgICAgIGlmIG5vd1tuYW1lXVxuICAgICAgICBub3cgPSBub3dbbmFtZV1cbiAgICAgIGVsc2UgaWYgbm93Wyc6J11cbiAgICAgICAgc3RvcmUucHVzaChuYW1lKVxuICAgICAgICBub3cgPSBub3dbJzonXVxuXG4gICAgIyDlvpfjgZ/jg5Hjg6njg6Hjg7zjgr/jg7zjga7mjK/jgorjgo/jgZFcbiAgICBwYXJhbXMgPSB7fVxuICAgIGZvciBpLCBuYW1lIG9mIG5vdy5fcGFyYW1ldGVyc1xuICAgICAgcGFyYW1zW25hbWVdID0gc3RvcmVbaV1cblxuICAgICMg6LW35YuVXG4gICAgbm93Ll9hcHAocGFyYW1zKVxuXG4gICNcbiAgIyBwcml2YXRlXG4gICNcblxuICBfZmluZDogKHVybCkgLT5cbiAgICBub3JtYWxpemVkID0gQF9ub3JtYWxpemUodXJsKVxuICAgIEBfbWFwcGVkW25vcm1hbGl6ZWRbMF1dXG5cbiAgX2lzX2luY2x1ZGVfcGxhY2Vob2xkZXI6ICh1cmwpLT5cbiAgICB1cmwubWF0Y2goLzpbYS16XzAtOV0rLyk/XG5cbiAgX25vcm1hbGl6ZTogKHVybCkgLT5cbiAgICByZXR1cm4gQF9ub3JtYWxpemVkW3VybF0gaWYgQF9ub3JtYWxpemVkW3VybF1cbiAgICByZXR1cm4gQF9ub3JtYWxpemVkW3VybF0gPSBbQF9zdHJpcCh1cmwpLCAnJ10gdW5sZXNzIEBfaXNfaW5jbHVkZV9wbGFjZWhvbGRlcih1cmwpXG5cbiAgICBAX25vcm1hbGl6ZWRbdXJsXSA9IEBfcGlja0hvbGRlcih1cmwsIFtdKVxuXG4gIF9waWNrSG9sZGVyOiAodXJsLCBob2xkZXJzKS0+XG4gICAgcmVzdWx0ID0gdXJsLm1hdGNoKC8oOlthLXpfMC05XSspLylcblxuICAgIHJldHVybiBbQF9zdHJpcCh1cmwpLCBob2xkZXJzLmpvaW4oJzonKV0gdW5sZXNzIHJlc3VsdFxuXG4gICAgQF9waWNrSG9sZGVyKHVybC5yZXBsYWNlKHJlc3VsdFsxXSwgJzonKSwgaG9sZGVycy5jb25jYXQocmVzdWx0WzFdLnJlcGxhY2UoJzonLCAnJykpKVxuXG4gIF9zdHJpcDogKHVybCktPlxuICAgIHVybC5yZXBsYWNlKC9cXC8kL2lnLCAnJykucmVwbGFjZSgvLis/OlxcL1xcLyguKz8pXFwvLywgJy8nKS5yZXBsYWNlKC9cXD8uKi8sICcnKVxuXG4iLCIjXG4jIOWHuuWFuOODouODh+ODq1xuI1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBTb3VyY2VMaW5rXG4gIGNvbnN0cnVjdG9yOiAob2JqKS0+XG4gICAgQGlkID0gb2JqLmlkXG4gICAgQGRpc3BsYXkgPSBvYmouZGlzcGxheVxuICAgIEB1cmwgPSBvYmoudXJsXG4iLCIjXG4jIFRhZ1NlbGVjdG9y44Gu44K544OG44O844OIXG4jXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFRhZ1NlbGVjdG9yU3RhdGVcbiAgI+OCv+OCsOOCkumBuOOCk+OBoOebtOW+jOOBrueKtuaFi1xuICBAVE9HR0xFRCA9ICdxdWVzdGlvbiBsb2FkaW5nJ1xuXG4gICPjgr/jgrDjg6rjgrnjg4jjgpLmm7TmlrDkuK1cbiAgQExPQURJTkcgPSAnbG9hZGluZyB0YWcnXG5cbiAgI+OCv+OCsOODquOCueODiOOBruabtOaWsOOBjOe1guOCj+OBo+OBn1xuICBATE9BREVEID0gJ2xvYWRlZCdcblxuIiwiI1xuIyDjgr/jgrDjg6Ljg4fjg6tcbiNcbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgVGFnXG4gIGNvbnN0cnVjdG9yOiAob2JqKS0+XG4gICAgQGlkID0gb2JqLmlkXG4gICAgQGRpc3BsYXkgPSBvYmouZGlzcGxheVxuICAgIEBjb3VudCA9IG9iai5jb3VudFxuICAgIEBjb3VudFRleHQgPSBcIigje0Bjb3VudH0pXCJcblxuICBoYXNfcXVlc3Rpb246IC0+XG4gICAgQGNvdW50ID4gMFxuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IFBhdGggPVxuICBwb3J0YWw6ICcvJ1xuICBxOiAnL3EvOmlkJ1xuICBxSW5kZXg6ICcvcSdcbiAgcVRhZ3M6ICcvcS86aWQvdGFnJ1xuICBtYXJrOiAnL21hcmtzJ1xuICB0YWdzOiAnL3RhZ3MnXG4gIHRhZ2dlZFRhZ3M6ICcvdGFncy90YWdnZWQvOnRhZ3MnXG4gIHRhZ2dlZEluZGV4OiAnL3EvdGFnZ2VkLzp0YWdzJ1xuICBzb3VyY2VzOiAnL3NyYydcbiAgc291cmNlOiAnL3NyYy86aWQnXG4gIHJlbmRlcjogKHBhdGgsIHZhbHVlcyktPlxuICAgIF8ucmVkdWNlKHZhbHVlcywgKGEsIHZhbHVlLCBrZXkpLT5cbiAgICAgIGEucmVwbGFjZShcIiV7I3trZXl9fVwiLCB2YWx1ZSlcbiAgICAsIFBhdGhbcGF0aF0pXG4iLCJtb2R1bGUuZXhwb3J0cyA9IFV0aWwgPSB7XG4gICMjI1xuICBSZWFjdC5jcmVhdGVFbGVtZW5044KS5aSJ5b2iXG5cbiAgY2Uob2JqZWN0KVxuICAgIG9iamVjdC4kY24gLT4gY2xhc3NOYW1lXG4gICAgb2JqZWN0LiRlbCAtPiDjgr/jgrDlkI1cbiAgICBvYmplY3QuJGluYyAtPiDmnKvlsL7lvJXmlbDjgIHjgYLjgovjgYTjga/lj6/lpInplbflvJXmlbDjgajjgZfjgabmuKHjgZXjgozjgovlgKRcbiAgICBvYmplY3QgLT4g5byV5pWw44Gv44Gd44Gu44G+44G+cHJvcHPjgajjgZfjgabmuKHjgZXjgozjgotcblxuICDmma7pgJpcblxuICAgICBjZSB7JGVsOiAnZGl2JywgJGNuOiAnc2hvcnQnLCAkaW5jOiAndGV4dCd9XG5cbiAgICAgPGRpdiBjbGFzc05hbWU9XCJzaG9ydFwiPlxuICAgICAgIHRleHRcbiAgICAgPC9kaXY+XG5cbiAg5YWl44KM5a2QXG5cbiAgICAgSXRlbSA9IFJlYWN0Q2xhc3NcbiAgICAgICByZW5kZXI6IC0+XG4gICAgICAgICBjZSB7JGVsOiAnbGknLCAkaW5jOiAnaXRlbSd9XG5cbiAgICAgY2UgeyRlbDogJ3VsJywgJGluYzogW0l0ZW0sIEl0ZW1dfVxuXG4gICAgIDx1bD5cbiAgICAgICB7SXRlbX1cbiAgICAgICB7SXRlbX1cbiAgICAgPC91bD5cbiAgIyMjXG4gIGNlOiAob2JqZWN0KS0+XG4gICAgc3dpdGNoIHRydWVcbiAgICAgIHdoZW4gb2JqZWN0Py5oYXNPd25Qcm9wZXJ0eSgnJGVsJylcbiAgICAgICAgb2JqZWN0LmNsYXNzTmFtZSA9IG9iamVjdC4kY25cbiAgICAgICAgY2hpbGRyZW4gPSBAY2Uob2JqZWN0LiRpbmMpXG4gICAgICAgIGlmIF8uaXNBcnJheShjaGlsZHJlbilcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KG9iamVjdC4kZWwsIG9iamVjdCwgY2hpbGRyZW4uLi4pXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KG9iamVjdC4kZWwsIG9iamVjdCwgY2hpbGRyZW4pXG4gICAgICB3aGVuIF8uaXNBcnJheShvYmplY3QpXG4gICAgICAgIGZvciBjaGlsZCBpbiBvYmplY3RcbiAgICAgICAgICBAY2UoY2hpbGQpXG4gICAgICB3aGVuIF8uaXNTdHJpbmcob2JqZWN0KVxuICAgICAgICBvYmplY3RcbiAgICAgIHdoZW4gXy5pc051bWJlcihvYmplY3QpXG4gICAgICAgIG9iamVjdFxuICAgICAgd2hlbiBfLmlzT2JqZWN0KG9iamVjdClcbiAgICAgICAgb2JqZWN0XG4gICAgICBlbHNlXG4gICAgICAgICcnXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEZhID0gUmVhY3QuY3JlYXRlQ2xhc3MoXG4gIHJlbmRlcjogKCktPlxuICAgIGNsYXNzZXMgPSBbJ2ZhJ11cbiAgICBjbGFzc2VzLnB1c2goXCJmYS0je0Bwcm9wcy5pY29ufVwiKVxuICAgIGNsYXNzZXMucHVzaChcImZhLSN7QHByb3BzLnNjYWxlfXhcIikgaWYgQHByb3BzLnNjYWxlP1xuICAgIGNsYXNzZXMucHVzaCgnZmEtZncnKSBpZiAhQHByb3BzLmZpeGVkV2lkdGg/IHx8IEBwcm9wcy5maXhlZFdpZHRoID09IGZhbHNlXG4gICAgY2xhc3Nlcy5wdXNoKCdmYS1saScpIGlmIEBwcm9wcy5saXN0XG4gICAgY2xhc3Nlcy5wdXNoKCdmYS1ib3JkZXInKSBpZiBAcHJvcHMuYm9yZGVyXG4gICAgY2xhc3Nlcy5wdXNoKFwiZmEtcHVsbC0je0Bwcm9wcy5wdWxsfVwiKSBpZiBAcHJvcHMucHVsbD9cbiAgICBjbGFzc2VzLnB1c2goXCJmYS0je0Bwcm9wcy5hbmltYXRpb259XCIpIGlmIEBwcm9wcy5hbmltYXRpb24/XG4gICAgY2xhc3Nlcy5wdXNoKFwiZmEtcm90YXRlLSN7QHByb3BzLnJvdGF0ZX1cIikgaWYgQHByb3BzLnJvdGF0ZT9cbiAgICBjbGFzc2VzLnB1c2goXCJmYS1mbGlwLSN7QHByb3BzLmFuaW1hdGlvbn1cIikgaWYgQHByb3BzLmZsaXA/XG5cbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpJywgeyBjbGFzc05hbWU6IGNsYXNzZXMuam9pbignICcpIH0pXG4pXG4iLCJtb2R1bGUuZXhwb3J0cyA9IEZyZWVUZXh0ID0gUmVhY3QuY3JlYXRlQ2xhc3MoXG4gIG1peGluczogW0FyZGEubWl4aW5dXG5cbiAgcmVuZGVyOiAoKS0+XG4gICAgQXBwLkpTWC5RLmZyZWVUZXh0KFxuICAgICAgRmE6IEFwcC5WaWV3LkZhXG5cbiAgICAgIG9wdGlvbnM6IEBwcm9wcy5vcHRpb25zXG4gICAgICBhbnN3ZXJzOiBAcHJvcHMuYW5zd2Vyc1xuICAgICAgaXNNYXJrZWQ6ID0+IEBwcm9wcy5yZXN1bHQ/XG4gICAgICBpbnB1dDogKGUpPT5cbiAgICAgICAgQGRpc3BhdGNoKCdxdWVzdGlvbjphbnN3ZXInLCBlLnRhcmdldC52YWx1ZSlcbiAgICApXG4pXG4iLCJtb2R1bGUuZXhwb3J0cyA9IFNpbmdsZUNob2ljZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKFxuICBtaXhpbnM6IFtBcmRhLm1peGluXVxuXG4gIHJlbmRlcjogKCktPlxuICAgIHEgPSBAcHJvcHMucXVlc3Rpb25cbiAgICBBcHAuSlNYLlEuaW5PcmRlcihcbiAgICAgIEZhOiBBcHAuVmlldy5GYVxuXG4gICAgICBvcHRpb25zOiBxLm9wdGlvbnNcbiAgICAgIGFuc3dlcnNOdW1iZXI6IHEuYW5zd2Vyc051bWJlclxuICAgICAgYW5zd2VyczogQHByb3BzLmFuc3dlcnNcbiAgICAgIGlzQWN0aXZlOiAoaWQpPT4gQHByb3BzLmFuc3dlcnMgPT0gaWRcbiAgICAgIGlzTWFya2VkOiA9PiBAcHJvcHMucmVzdWx0P1xuICAgICAgaXNDb3JyZWN0OiAoaW5kZXgsIGlkKT0+ICtAcHJvcHMuYW5zd2Vyc1tpbmRleF0gPT0gQHByb3BzLnJlc3VsdC5hbnN3ZXJzW2luZGV4XVxuICAgICAgc2VsZWN0OiAoZSk9PlxuICAgICAgICBuZXdfYW5zd2VycyA9IEBwcm9wcy5hbnN3ZXJzPy5jb25jYXQoKSB8fCBbXVxuICAgICAgICBuZXdfYW5zd2Vyc1tlLnRhcmdldC5uYW1lXSA9IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIEBkaXNwYXRjaCgncXVlc3Rpb246YW5zd2VyJywgbmV3X2Fuc3dlcnMpXG4gICAgICBzZWxlY3RlZDogKGluZGV4KT0+XG4gICAgICAgIEBwcm9wcy5hbnN3ZXJzP1tpbmRleF0/LnRvU3RyaW5nKCkgfHwgJydcbiAgICApXG4pXG5cbiIsIm1vZHVsZS5leHBvcnRzID0gVmlld3MgPSB7fVxuVmlld3MuRmEgPSByZXF1aXJlICcuL2ZhJ1xuVmlld3MuRnJlZVRleHQgPSByZXF1aXJlICcuL2ZyZWUtdGV4dCdcblZpZXdzLkluT3JkZXIgPSByZXF1aXJlICcuL2luLW9yZGVyJ1xuVmlld3MuTG9hZGluZyA9IHJlcXVpcmUgJy4vbG9hZGluZydcblZpZXdzLk11bHRpcGxlQ2hvaWNlcyA9IHJlcXVpcmUgJy4vbXVsdGlwbGVfY2hvaWNlcydcblZpZXdzLk94ID0gcmVxdWlyZSAnLi9veCdcblZpZXdzLlBhZ2luYXRvciA9IHJlcXVpcmUgJy4vcGFnaW5hdG9yJ1xuVmlld3MuU2luZ2xlQ2hvaWNlID0gcmVxdWlyZSAnLi9zaW5nbGVfY2hvaWNlJ1xuVmlld3MuVGFnU2VsZWN0b3IgPSByZXF1aXJlICcuL3RhZy1zZWxlY3RvcidcbiMgR2VuZXJhdGVkIGJ5IEluZGV4Q29mZmVlR2VuZXJhdG9yIiwibW9kdWxlLmV4cG9ydHMgPSBMb2FkaW5nID0gUmVhY3QuY3JlYXRlQ2xhc3MoXG4gIHJlbmRlcjogKCktPlxuICAgIEFwcC5KU1gubG9hZGluZyhGYTogQXBwLlZpZXcuRmEpXG4pXG4iLCJtb2R1bGUuZXhwb3J0cyA9IFNpbmdsZUNob2ljZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKFxuICBtaXhpbnM6IFtBcmRhLm1peGluXVxuXG4gIHJlbmRlcjogKCktPlxuICAgIEFwcC5KU1guUS5zaW5nbGVDaG9pY2UoXG4gICAgICBGYTogQXBwLlZpZXcuRmFcbiAgICAgIG9wdGlvbnM6IEBwcm9wcy5vcHRpb25zXG5cbiAgICAgIGlzQWN0aXZlOiAoaWQpPT4gXy5pbmNsdWRlKEBwcm9wcy5hbnN3ZXJzLCBpZClcbiAgICAgIGlzTWFya2VkOiA9PiBAcHJvcHMucmVzdWx0P1xuICAgICAgaXNDb3JyZWN0OiAoaWQpPT4gXy5pbmNsdWRlKEBwcm9wcy5yZXN1bHQuYW5zd2VycywgaWQpXG4gICAgICB0b2dnbGU6IChpZCk9PlxuICAgICAgICBuZXdfYW5zd2VycyA9IEBwcm9wcy5hbnN3ZXJzPy5jb25jYXQoKSB8fCBbXVxuICAgICAgICBpZiBfLmluY2x1ZGUobmV3X2Fuc3dlcnMsIGlkKVxuICAgICAgICAgIG5ld19hbnN3ZXJzID0gXy5yZWplY3QobmV3X2Fuc3dlcnMsIChuKS0+IG4gPT0gaWQpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBuZXdfYW5zd2Vycy5wdXNoKGlkKVxuICAgICAgICBAZGlzcGF0Y2goJ3F1ZXN0aW9uOmFuc3dlcicsIG5ld19hbnN3ZXJzKVxuICAgIClcbilcbiIsIm1vZHVsZS5leHBvcnRzID0gT3ggPSBSZWFjdC5jcmVhdGVDbGFzcyhcbiAgbWl4aW5zOiBbQXJkYS5taXhpbl1cblxuICByZW5kZXI6ICgpLT5cbiAgICBBcHAuSlNYLlEub3goXG4gICAgICBGYTogQXBwLlZpZXcuRmFcblxuICAgICAgb3B0aW9uczogQHByb3BzLm9wdGlvbnNcblxuICAgICAgaXNGYWxzZTogPT4gJ2FjdGl2ZScgaWYgQHByb3BzLmFuc3dlcnMgPT0gMFxuICAgICAgaXNUcnVlOiA9PiAnYWN0aXZlJyBpZiBAcHJvcHMuYW5zd2VycyA9PSAxXG4gICAgICBpc01hcmtlZDogPT4gQHByb3BzLnJlc3VsdD9cbiAgICAgIHRvZ2dsZTogKGJvb2xlYW4pPT5cbiAgICAgICAgQGRpc3BhdGNoKCdxdWVzdGlvbjphbnN3ZXInLCBib29sZWFuKVxuICAgIClcbilcbiIsIm1vZHVsZS5leHBvcnRzID0gUGFnaW5hdG9yID0gUmVhY3QuY3JlYXRlQ2xhc3MoXG4gIG1peGluczogW0FyZGEubWl4aW5dXG5cbiAgcmVuZGVyOiAtPlxuICAgIEFwcC5KU1gucGFnaW5hdG9yKFxuICAgICAgbGlua3M6IEBsaW5rcygpXG4gICAgICBwYWdpbmF0ZTogKHBhZ2UpPT5cbiAgICAgICAgQGRpc3BhdGNoKCdxdWVzdGlvbjppbmRleDpwYWdpbmF0ZScsIHBhZ2UpXG4gICAgKVxuXG4gIGxpbmtzOiAtPlxuICAgIF8ubWFwKFsxLi5AcHJvcHMuaGVhZGVyLnRvdGFsXSwgKG4pPT5cbiAgICAgIGlzQ3VycmVudDogK0Bwcm9wcy5oZWFkZXIucGFnZSA9PSBuXG4gICAgICBwYWdlOiBuXG4gICAgKVxuKSIsIm1vZHVsZS5leHBvcnRzID0gU2luZ2xlQ2hvaWNlID0gUmVhY3QuY3JlYXRlQ2xhc3MoXG4gIG1peGluczogW0FyZGEubWl4aW5dXG5cbiAgcmVuZGVyOiAoKS0+XG4gICAgQXBwLkpTWC5RLnNpbmdsZUNob2ljZShcbiAgICAgIEZhOiBBcHAuVmlldy5GYVxuXG4gICAgICBvcHRpb25zOiBAcHJvcHMub3B0aW9uc1xuXG4gICAgICBpc0FjdGl2ZTogKGlkKT0+IEBwcm9wcy5hbnN3ZXJzID09IGlkXG4gICAgICBpc0NvcnJlY3Q6IChpZCk9PiBAcHJvcHMucmVzdWx0LmFuc3dlcnNbMF0gPT0gaWRcbiAgICAgIGlzTWFya2VkOiA9PiBAcHJvcHMucmVzdWx0P1xuICAgICAgdG9nZ2xlOiAoaW5kZXgpPT5cbiAgICAgICAgQGRpc3BhdGNoKCdxdWVzdGlvbjphbnN3ZXInLCBpbmRleClcbiAgICApXG4pXG4iLCJtb2R1bGUuZXhwb3J0cyA9IFRhZ1NlbGVjdG9yID0gUmVhY3QuY3JlYXRlQ2xhc3MoXG4gIG1peGluczogW0FyZGEubWl4aW5dXG5cbiAgcmVuZGVyOiAoKS0+XG4gICAgY29uc29sZS5sb2cgQHByb3BzXG4gICAgQXBwLkpTWC5RLnRhZ1NlbGVjdG9yKFxuICAgICAgRmE6IEFwcC5WaWV3LkZhXG4gICAgICBxVGFnczogQHByb3BzLnFUYWdzXG4gICAgICBMb2FkaW5nOiBBcHAuVmlldy5Mb2FkaW5nXG4gICAgICB0b2dnbGVUYWc6IChpZCk9PlxuICAgICAgICBAZGlzcGF0Y2goJ3F1ZXN0aW9uOnRhZzp0b2dnbGUnLCBpZClcbiAgICAgIGlzQ2hlY2tlZDogKGlkKT0+XG4gICAgICAgIF8uaW5jbHVkZShAcHJvcHMuc2VsZWN0ZWRUYWdzLCBpZClcbiAgICAgIGlzTG9ja2VkOiA9PlxuICAgICAgICBAcHJvcHMudGFnU2VsZWN0b3JTdGF0ZSAhPSBBcHAuVGFnU2VsZWN0b3JTdGF0ZS5MT0FERURcbiAgICAgIGlzT3BlbjogPT5cbiAgICAgICAgQHByb3BzLnNlbGVjdG9yT3BlbmVkXG4gICAgICBvcGVuU2VsZWN0b3I6ID0+XG4gICAgICAgIEBkaXNwYXRjaCgncXVlc3Rpb246dGFnU2VsZWN0b3I6dG9nZ2xlJylcbiAgICAgIGNsb3NlU2VsZWN0b3I6ID0+XG4gICAgICAgIEBkaXNwYXRjaCgncXVlc3Rpb246dGFnU2VsZWN0b3I6dG9nZ2xlJylcbiAgICApXG4pXG5cbiJdfQ==
